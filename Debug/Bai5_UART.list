
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031a8  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae94  0800ae94  0000c094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae94  0800ae94  0000be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae9c  0800ae9c  0000c094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea0  0800aea0  0000bea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800aea4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c094  2**0
                  CONTENTS
 10 .bss          00000454  20000094  20000094  0000c094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  0000c094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d1d  00000000  00000000  0000c0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f74  00000000  00000000  00023de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00027d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b1  00000000  00000000  000292c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002492c  00000000  00000000  0002a371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f513  00000000  00000000  0004ec9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d35b0  00000000  00000000  0006e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141760  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dd4  00000000  00000000  001417a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00147578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cd4 	.word	0x08007cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08007cd4 	.word	0x08007cd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2108      	movs	r1, #8
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <button_init+0x14>)
 800057a:	f002 fdad 	bl	80030d8 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40020c00 	.word	0x40020c00

08000588 <button_Scan>:

void button_Scan(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	482f      	ldr	r0, [pc, #188]	@ (8000650 <button_Scan+0xc8>)
 8000594:	f002 fda0 	bl	80030d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	482c      	ldr	r0, [pc, #176]	@ (8000650 <button_Scan+0xc8>)
 800059e:	f002 fd9b 	bl	80030d8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2202      	movs	r2, #2
 80005a6:	492b      	ldr	r1, [pc, #172]	@ (8000654 <button_Scan+0xcc>)
 80005a8:	482b      	ldr	r0, [pc, #172]	@ (8000658 <button_Scan+0xd0>)
 80005aa:	f004 fbcc 	bl	8004d46 <HAL_SPI_Receive>
	  int button_index = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005b6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e03f      	b.n	800063e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db06      	blt.n	80005d2 <button_Scan+0x4a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	dc03      	bgt.n	80005d2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3304      	adds	r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e018      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	dd07      	ble.n	80005e8 <button_Scan+0x60>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dc04      	bgt.n	80005e8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f1c3 0307 	rsb	r3, r3, #7
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e00d      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	dd06      	ble.n	80005fc <button_Scan+0x74>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0b      	cmp	r3, #11
 80005f2:	dc03      	bgt.n	80005fc <button_Scan+0x74>
			  button_index = i + 4;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3304      	adds	r3, #4
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e003      	b.n	8000604 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f1c3 0317 	rsb	r3, r3, #23
 8000602:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <button_Scan+0xcc>)
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	897b      	ldrh	r3, [r7, #10]
 800060a:	4013      	ands	r3, r2
 800060c:	b29b      	uxth	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <button_Scan+0x96>
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <button_Scan+0xd4>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2100      	movs	r1, #0
 8000618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800061c:	e009      	b.n	8000632 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <button_Scan+0xd4>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	3301      	adds	r3, #1
 8000628:	b299      	uxth	r1, r3
 800062a:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <button_Scan+0xd4>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000632:	897b      	ldrh	r3, [r7, #10]
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	ddbc      	ble.n	80005be <button_Scan+0x36>
	  }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020c00 	.word	0x40020c00
 8000654:	200000d0 	.word	0x200000d0
 8000658:	200001c4 	.word	0x200001c4
 800065c:	200000b0 	.word	0x200000b0

08000660 <displayTime>:
 uint8_t al_min;
 uint8_t al_sec;
char* update_value[6] = {"Seconds", "Minutes", "Hours", "Days", "Months", "Years"};
char* update_request[6] = {"Seconds?", "Minutes?", "Hours?", "Days?", "Months?", "Years?"};

void displayTime(){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <displayTime+0xe0>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	2318      	movs	r3, #24
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2302      	movs	r3, #2
 800067c:	2164      	movs	r1, #100	@ 0x64
 800067e:	2046      	movs	r0, #70	@ 0x46
 8000680:	f001 f928 	bl	80018d4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8000684:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <displayTime+0xe4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2318      	movs	r3, #24
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2302      	movs	r3, #2
 800069a:	2164      	movs	r1, #100	@ 0x64
 800069c:	206e      	movs	r0, #110	@ 0x6e
 800069e:	f001 f919 	bl	80018d4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80006a2:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <displayTime+0xe8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2318      	movs	r3, #24
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	2300      	movs	r3, #0
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2302      	movs	r3, #2
 80006b8:	2164      	movs	r1, #100	@ 0x64
 80006ba:	2096      	movs	r0, #150	@ 0x96
 80006bc:	f001 f90a 	bl	80018d4 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <displayTime+0xec>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	2318      	movs	r3, #24
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2302      	movs	r3, #2
 80006d6:	2182      	movs	r1, #130	@ 0x82
 80006d8:	2014      	movs	r0, #20
 80006da:	f001 f8fb 	bl	80018d4 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <displayTime+0xf0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	2318      	movs	r3, #24
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2300      	movs	r3, #0
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2302      	movs	r3, #2
 80006f4:	2182      	movs	r1, #130	@ 0x82
 80006f6:	2046      	movs	r0, #70	@ 0x46
 80006f8:	f001 f8ec 	bl	80018d4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <displayTime+0xf4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	2318      	movs	r3, #24
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	2300      	movs	r3, #0
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2302      	movs	r3, #2
 8000712:	2182      	movs	r1, #130	@ 0x82
 8000714:	206e      	movs	r0, #110	@ 0x6e
 8000716:	f001 f8dd 	bl	80018d4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <displayTime+0xf8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	2318      	movs	r3, #24
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2300      	movs	r3, #0
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2302      	movs	r3, #2
 8000730:	2182      	movs	r1, #130	@ 0x82
 8000732:	2096      	movs	r0, #150	@ 0x96
 8000734:	f001 f8ce 	bl	80018d4 <lcd_ShowIntNum>
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000f3 	.word	0x200000f3
 8000744:	200000f4 	.word	0x200000f4
 8000748:	200000f5 	.word	0x200000f5
 800074c:	200000f7 	.word	0x200000f7
 8000750:	200000f6 	.word	0x200000f6
 8000754:	200000f8 	.word	0x200000f8
 8000758:	200000f9 	.word	0x200000f9

0800075c <ChangeValue>:

void ChangeValue(int val){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	switch(val){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b05      	cmp	r3, #5
 8000768:	f200 809e 	bhi.w	80008a8 <ChangeValue+0x14c>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <ChangeValue+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	0800078d 	.word	0x0800078d
 8000778:	080007ab 	.word	0x080007ab
 800077c:	080007c7 	.word	0x080007c7
 8000780:	080007e3 	.word	0x080007e3
 8000784:	0800087f 	.word	0x0800087f
 8000788:	0800089b 	.word	0x0800089b
	case 0:
		cal_sec++;
 800078c:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <ChangeValue+0x170>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b4d      	ldr	r3, [pc, #308]	@ (80008cc <ChangeValue+0x170>)
 8000796:	701a      	strb	r2, [r3, #0]
		if(cal_sec > 59) cal_sec=0;
 8000798:	4b4c      	ldr	r3, [pc, #304]	@ (80008cc <ChangeValue+0x170>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b3b      	cmp	r3, #59	@ 0x3b
 800079e:	f240 8085 	bls.w	80008ac <ChangeValue+0x150>
 80007a2:	4b4a      	ldr	r3, [pc, #296]	@ (80008cc <ChangeValue+0x170>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
		break;
 80007a8:	e080      	b.n	80008ac <ChangeValue+0x150>
	case 1:
		cal_min++;
 80007aa:	4b49      	ldr	r3, [pc, #292]	@ (80008d0 <ChangeValue+0x174>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b47      	ldr	r3, [pc, #284]	@ (80008d0 <ChangeValue+0x174>)
 80007b4:	701a      	strb	r2, [r3, #0]
		if(cal_min > 59) cal_min=0;
 80007b6:	4b46      	ldr	r3, [pc, #280]	@ (80008d0 <ChangeValue+0x174>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80007bc:	d978      	bls.n	80008b0 <ChangeValue+0x154>
 80007be:	4b44      	ldr	r3, [pc, #272]	@ (80008d0 <ChangeValue+0x174>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e074      	b.n	80008b0 <ChangeValue+0x154>
	case 2:
		cal_hour++;
 80007c6:	4b43      	ldr	r3, [pc, #268]	@ (80008d4 <ChangeValue+0x178>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <ChangeValue+0x178>)
 80007d0:	701a      	strb	r2, [r3, #0]
		if(cal_hour > 23) cal_hour =0;
 80007d2:	4b40      	ldr	r3, [pc, #256]	@ (80008d4 <ChangeValue+0x178>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b17      	cmp	r3, #23
 80007d8:	d96c      	bls.n	80008b4 <ChangeValue+0x158>
 80007da:	4b3e      	ldr	r3, [pc, #248]	@ (80008d4 <ChangeValue+0x178>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		break;
 80007e0:	e068      	b.n	80008b4 <ChangeValue+0x158>
	case 3:
		cal_day++;
 80007e2:	4b3d      	ldr	r3, [pc, #244]	@ (80008d8 <ChangeValue+0x17c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b3b      	ldr	r3, [pc, #236]	@ (80008d8 <ChangeValue+0x17c>)
 80007ec:	701a      	strb	r2, [r3, #0]
		cal_date++;
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <ChangeValue+0x180>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b39      	ldr	r3, [pc, #228]	@ (80008dc <ChangeValue+0x180>)
 80007f8:	701a      	strb	r2, [r3, #0]
		if(cal_day >28){
 80007fa:	4b37      	ldr	r3, [pc, #220]	@ (80008d8 <ChangeValue+0x17c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b1c      	cmp	r3, #28
 8000800:	d916      	bls.n	8000830 <ChangeValue+0xd4>
			if(cal_month ==2){
 8000802:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <ChangeValue+0x184>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d131      	bne.n	800086e <ChangeValue+0x112>
				if(cal_year%4 !=0){
 800080a:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <ChangeValue+0x188>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f003 0303 	and.w	r3, r3, #3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <ChangeValue+0xc4>
					cal_day=1;
 8000818:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <ChangeValue+0x17c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e026      	b.n	800086e <ChangeValue+0x112>
				}
				else{
					if(cal_day >29) cal_day=0;
 8000820:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <ChangeValue+0x17c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b1d      	cmp	r3, #29
 8000826:	d922      	bls.n	800086e <ChangeValue+0x112>
 8000828:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <ChangeValue+0x17c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e01e      	b.n	800086e <ChangeValue+0x112>
				}
			}
		}
		else if(cal_month==4 || cal_month==6 || cal_month==9 || cal_month==11){
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <ChangeValue+0x184>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d00b      	beq.n	8000850 <ChangeValue+0xf4>
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <ChangeValue+0x184>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b06      	cmp	r3, #6
 800083e:	d007      	beq.n	8000850 <ChangeValue+0xf4>
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <ChangeValue+0x184>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b09      	cmp	r3, #9
 8000846:	d003      	beq.n	8000850 <ChangeValue+0xf4>
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <ChangeValue+0x184>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b0b      	cmp	r3, #11
 800084e:	d107      	bne.n	8000860 <ChangeValue+0x104>
			if(cal_day > 30) cal_day=0;
 8000850:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <ChangeValue+0x17c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b1e      	cmp	r3, #30
 8000856:	d90a      	bls.n	800086e <ChangeValue+0x112>
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <ChangeValue+0x17c>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e006      	b.n	800086e <ChangeValue+0x112>
		}
		else{
			if(cal_day>31) cal_day=0;
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <ChangeValue+0x17c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b1f      	cmp	r3, #31
 8000866:	d902      	bls.n	800086e <ChangeValue+0x112>
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <ChangeValue+0x17c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
		}
		if(cal_date>8) cal_date=2;
 800086e:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <ChangeValue+0x180>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b08      	cmp	r3, #8
 8000874:	d920      	bls.n	80008b8 <ChangeValue+0x15c>
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <ChangeValue+0x180>)
 8000878:	2202      	movs	r2, #2
 800087a:	701a      	strb	r2, [r3, #0]

		break;
 800087c:	e01c      	b.n	80008b8 <ChangeValue+0x15c>
	case 4:
		cal_month++;
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <ChangeValue+0x184>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <ChangeValue+0x184>)
 8000888:	701a      	strb	r2, [r3, #0]
		if(cal_month>12) cal_month=1;
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <ChangeValue+0x184>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b0c      	cmp	r3, #12
 8000890:	d914      	bls.n	80008bc <ChangeValue+0x160>
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <ChangeValue+0x184>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
		break;
 8000898:	e010      	b.n	80008bc <ChangeValue+0x160>
	case 5:
		cal_year++;
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <ChangeValue+0x188>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <ChangeValue+0x188>)
 80008a4:	701a      	strb	r2, [r3, #0]
		break;
 80008a6:	e00a      	b.n	80008be <ChangeValue+0x162>
	default:
		break;
 80008a8:	bf00      	nop
 80008aa:	e008      	b.n	80008be <ChangeValue+0x162>
		break;
 80008ac:	bf00      	nop
 80008ae:	e006      	b.n	80008be <ChangeValue+0x162>
		break;
 80008b0:	bf00      	nop
 80008b2:	e004      	b.n	80008be <ChangeValue+0x162>
		break;
 80008b4:	bf00      	nop
 80008b6:	e002      	b.n	80008be <ChangeValue+0x162>
		break;
 80008b8:	bf00      	nop
 80008ba:	e000      	b.n	80008be <ChangeValue+0x162>
		break;
 80008bc:	bf00      	nop
	}
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	200000e2 	.word	0x200000e2
 80008d0:	200000e1 	.word	0x200000e1
 80008d4:	200000e0 	.word	0x200000e0
 80008d8:	200000e4 	.word	0x200000e4
 80008dc:	200000e3 	.word	0x200000e3
 80008e0:	200000e5 	.word	0x200000e5
 80008e4:	200000e6 	.word	0x200000e6

080008e8 <ApplyChange>:

void ApplyChange(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
		ds3231_Write(ADDRESS_SEC, cal_sec);
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <ApplyChange+0x5c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 fba8 	bl	8001048 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, cal_min);
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <ApplyChange+0x60>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fba2 	bl	8001048 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, cal_hour);
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <ApplyChange+0x64>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	2002      	movs	r0, #2
 800090c:	f000 fb9c 	bl	8001048 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, cal_day);
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <ApplyChange+0x68>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	2003      	movs	r0, #3
 8000918:	f000 fb96 	bl	8001048 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, cal_date);
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <ApplyChange+0x6c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	2004      	movs	r0, #4
 8000924:	f000 fb90 	bl	8001048 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, cal_month);
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <ApplyChange+0x70>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	2005      	movs	r0, #5
 8000930:	f000 fb8a 	bl	8001048 <ds3231_Write>
		ds3231_Write(ADDRESS_YEAR, cal_year);
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <ApplyChange+0x74>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	2006      	movs	r0, #6
 800093c:	f000 fb84 	bl	8001048 <ds3231_Write>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000e2 	.word	0x200000e2
 8000948:	200000e1 	.word	0x200000e1
 800094c:	200000e0 	.word	0x200000e0
 8000950:	200000e4 	.word	0x200000e4
 8000954:	200000e3 	.word	0x200000e3
 8000958:	200000e5 	.word	0x200000e5
 800095c:	200000e6 	.word	0x200000e6

08000960 <ChangeAlarm>:

void ChangeAlarm(){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	switch (counter) {
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <ChangeAlarm+0x50>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d014      	beq.n	8000996 <ChangeAlarm+0x36>
 800096c:	2b02      	cmp	r3, #2
 800096e:	dc19      	bgt.n	80009a4 <ChangeAlarm+0x44>
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <ChangeAlarm+0x1a>
 8000974:	2b01      	cmp	r3, #1
 8000976:	d007      	beq.n	8000988 <ChangeAlarm+0x28>
		break;
	case 2:
		al_hours++;
		break;
	default:
		break;
 8000978:	e014      	b.n	80009a4 <ChangeAlarm+0x44>
		al_sec++;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <ChangeAlarm+0x54>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <ChangeAlarm+0x54>)
 8000984:	701a      	strb	r2, [r3, #0]
		break;
 8000986:	e00e      	b.n	80009a6 <ChangeAlarm+0x46>
		al_min++;
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <ChangeAlarm+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <ChangeAlarm+0x58>)
 8000992:	701a      	strb	r2, [r3, #0]
		break;
 8000994:	e007      	b.n	80009a6 <ChangeAlarm+0x46>
		al_hours++;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <ChangeAlarm+0x5c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <ChangeAlarm+0x5c>)
 80009a0:	701a      	strb	r2, [r3, #0]
		break;
 80009a2:	e000      	b.n	80009a6 <ChangeAlarm+0x46>
		break;
 80009a4:	bf00      	nop
	}
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	200000d4 	.word	0x200000d4
 80009b4:	200000e9 	.word	0x200000e9
 80009b8:	200000e8 	.word	0x200000e8
 80009bc:	200000e7 	.word	0x200000e7

080009c0 <fsm>:

void fsm(uint16_t status){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	@ 0x50
 80009c4:	af04      	add	r7, sp, #16
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
	switch(status){
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	f200 811c 	bhi.w	8000c0a <fsm+0x24a>
 80009d2:	a201      	add	r2, pc, #4	@ (adr r2, 80009d8 <fsm+0x18>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	080009e9 	.word	0x080009e9
 80009dc:	08000a73 	.word	0x08000a73
 80009e0:	08000b57 	.word	0x08000b57
 80009e4:	08000bdd 	.word	0x08000bdd
	case NORMAL:
		ds3231_ReadTime();
 80009e8:	f000 fb50 	bl	800108c <ds3231_ReadTime>
		displayTime();
 80009ec:	f7ff fe38 	bl	8000660 <displayTime>
		lcd_StrCenter(110, 20, "NORMAL", BLUE, YELLOW, 16, 0);
 80009f0:	2300      	movs	r3, #0
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2310      	movs	r3, #16
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	231f      	movs	r3, #31
 8000a00:	4a86      	ldr	r2, [pc, #536]	@ (8000c1c <fsm+0x25c>)
 8000a02:	2114      	movs	r1, #20
 8000a04:	206e      	movs	r0, #110	@ 0x6e
 8000a06:	f001 f9cb 	bl	8001da0 <lcd_StrCenter>
		if (ds3231_hours == al_hours && ds3231_min == al_min
 8000a0a:	4b85      	ldr	r3, [pc, #532]	@ (8000c20 <fsm+0x260>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b85      	ldr	r3, [pc, #532]	@ (8000c24 <fsm+0x264>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d10e      	bne.n	8000a34 <fsm+0x74>
 8000a16:	4b84      	ldr	r3, [pc, #528]	@ (8000c28 <fsm+0x268>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b84      	ldr	r3, [pc, #528]	@ (8000c2c <fsm+0x26c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d108      	bne.n	8000a34 <fsm+0x74>
				&& ds3231_sec == al_sec) {
 8000a22:	4b83      	ldr	r3, [pc, #524]	@ (8000c30 <fsm+0x270>)
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	4b83      	ldr	r3, [pc, #524]	@ (8000c34 <fsm+0x274>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d102      	bne.n	8000a34 <fsm+0x74>
			flag=1;
 8000a2e:	4b82      	ldr	r3, [pc, #520]	@ (8000c38 <fsm+0x278>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
		}
		if(flag){
 8000a34:	4b80      	ldr	r3, [pc, #512]	@ (8000c38 <fsm+0x278>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00d      	beq.n	8000a58 <fsm+0x98>
			lcd_StrCenter(110, 20, "ALARM", RED, YELLOW, 16, 0);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	2310      	movs	r3, #16
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a4e:	4a7b      	ldr	r2, [pc, #492]	@ (8000c3c <fsm+0x27c>)
 8000a50:	2114      	movs	r1, #20
 8000a52:	206e      	movs	r0, #110	@ 0x6e
 8000a54:	f001 f9a4 	bl	8001da0 <lcd_StrCenter>
		}
		if(button_count[0] || button_count[14]){
 8000a58:	4b79      	ldr	r3, [pc, #484]	@ (8000c40 <fsm+0x280>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d104      	bne.n	8000a6a <fsm+0xaa>
 8000a60:	4b77      	ldr	r3, [pc, #476]	@ (8000c40 <fsm+0x280>)
 8000a62:	8b9b      	ldrh	r3, [r3, #28]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f000 80d2 	beq.w	8000c0e <fsm+0x24e>
			flag=0;
 8000a6a:	4b73      	ldr	r3, [pc, #460]	@ (8000c38 <fsm+0x278>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a70:	e0cd      	b.n	8000c0e <fsm+0x24e>
	case CALIBRATE:
		flag=0;
 8000a72:	4b71      	ldr	r3, [pc, #452]	@ (8000c38 <fsm+0x278>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
		char title[50] ="Updating ";
 8000a78:	4a72      	ldr	r2, [pc, #456]	@ (8000c44 <fsm+0x284>)
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	6810      	ldr	r0, [r2, #0]
 8000a80:	6851      	ldr	r1, [r2, #4]
 8000a82:	c303      	stmia	r3!, {r0, r1}
 8000a84:	8912      	ldrh	r2, [r2, #8]
 8000a86:	801a      	strh	r2, [r3, #0]
 8000a88:	f107 0316 	add.w	r3, r7, #22
 8000a8c:	2228      	movs	r2, #40	@ 0x28
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 fc8f 	bl	80073b4 <memset>
		strcat(title, update_value[counter]);
 8000a96:	4b6c      	ldr	r3, [pc, #432]	@ (8000c48 <fsm+0x288>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8000c4c <fsm+0x28c>)
 8000a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f006 fc8c 	bl	80073c4 <strcat>
		strcat(title,"...");
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb8d 	bl	80001d0 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a63      	ldr	r2, [pc, #396]	@ (8000c50 <fsm+0x290>)
 8000ac2:	6810      	ldr	r0, [r2, #0]
 8000ac4:	6018      	str	r0, [r3, #0]
		if (button_count[3] == 1) {
 8000ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8000c40 <fsm+0x280>)
 8000ac8:	88db      	ldrh	r3, [r3, #6]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d104      	bne.n	8000ad8 <fsm+0x118>
			ChangeValue(counter);
 8000ace:	4b5e      	ldr	r3, [pc, #376]	@ (8000c48 <fsm+0x288>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe42 	bl	800075c <ChangeValue>
		}

		if (button_count[3] == 40) {
 8000ad8:	4b59      	ldr	r3, [pc, #356]	@ (8000c40 <fsm+0x280>)
 8000ada:	88db      	ldrh	r3, [r3, #6]
 8000adc:	2b28      	cmp	r3, #40	@ 0x28
 8000ade:	d107      	bne.n	8000af0 <fsm+0x130>
			setTimer3(200);
 8000ae0:	20c8      	movs	r0, #200	@ 0xc8
 8000ae2:	f001 fb23 	bl	800212c <setTimer3>
			ChangeValue(counter);
 8000ae6:	4b58      	ldr	r3, [pc, #352]	@ (8000c48 <fsm+0x288>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe36 	bl	800075c <ChangeValue>
		}
		if (flag_timer3 && button_count[3] > 40) {
 8000af0:	4b58      	ldr	r3, [pc, #352]	@ (8000c54 <fsm+0x294>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00b      	beq.n	8000b10 <fsm+0x150>
 8000af8:	4b51      	ldr	r3, [pc, #324]	@ (8000c40 <fsm+0x280>)
 8000afa:	88db      	ldrh	r3, [r3, #6]
 8000afc:	2b28      	cmp	r3, #40	@ 0x28
 8000afe:	d907      	bls.n	8000b10 <fsm+0x150>
			setTimer3(200);
 8000b00:	20c8      	movs	r0, #200	@ 0xc8
 8000b02:	f001 fb13 	bl	800212c <setTimer3>
			ChangeValue(counter);
 8000b06:	4b50      	ldr	r3, [pc, #320]	@ (8000c48 <fsm+0x288>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fe26 	bl	800075c <ChangeValue>
		}



		if(button_count[12] != 0){
 8000b10:	4b4b      	ldr	r3, [pc, #300]	@ (8000c40 <fsm+0x280>)
 8000b12:	8b1b      	ldrh	r3, [r3, #24]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00f      	beq.n	8000b38 <fsm+0x178>

			counter++;
 8000b18:	4b4b      	ldr	r3, [pc, #300]	@ (8000c48 <fsm+0x288>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8000c48 <fsm+0x288>)
 8000b20:	6013      	str	r3, [r2, #0]
			if(counter==5) {
 8000b22:	4b49      	ldr	r3, [pc, #292]	@ (8000c48 <fsm+0x288>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b05      	cmp	r3, #5
 8000b28:	d106      	bne.n	8000b38 <fsm+0x178>
				ApplyChange();
 8000b2a:	f7ff fedd 	bl	80008e8 <ApplyChange>
				counter =0;
 8000b2e:	4b46      	ldr	r3, [pc, #280]	@ (8000c48 <fsm+0x288>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
				status=SET_ALARM;
 8000b34:	2302      	movs	r3, #2
 8000b36:	80fb      	strh	r3, [r7, #6]
			}

		}
		lcd_StrCenter(110, 20, title, BLUE, YELLOW, 16, 0);
 8000b38:	f107 020c 	add.w	r2, r7, #12
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	2310      	movs	r3, #16
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	231f      	movs	r3, #31
 8000b4c:	2114      	movs	r1, #20
 8000b4e:	206e      	movs	r0, #110	@ 0x6e
 8000b50:	f001 f926 	bl	8001da0 <lcd_StrCenter>
		break;
 8000b54:	e05e      	b.n	8000c14 <fsm+0x254>
	case SET_ALARM:
		if (button_count[3] == 1) {
 8000b56:	4b3a      	ldr	r3, [pc, #232]	@ (8000c40 <fsm+0x280>)
 8000b58:	88db      	ldrh	r3, [r3, #6]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <fsm+0x1a8>
			ChangeAlarm(counter);
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c48 <fsm+0x288>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fefc 	bl	8000960 <ChangeAlarm>
		}

		if (button_count[3] == 40) {
 8000b68:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <fsm+0x280>)
 8000b6a:	88db      	ldrh	r3, [r3, #6]
 8000b6c:	2b28      	cmp	r3, #40	@ 0x28
 8000b6e:	d107      	bne.n	8000b80 <fsm+0x1c0>
			setTimer3(200);
 8000b70:	20c8      	movs	r0, #200	@ 0xc8
 8000b72:	f001 fadb 	bl	800212c <setTimer3>
			ChangeAlarm(counter);
 8000b76:	4b34      	ldr	r3, [pc, #208]	@ (8000c48 <fsm+0x288>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fef0 	bl	8000960 <ChangeAlarm>
		}
		if (flag_timer3 && button_count[3] > 40) {
 8000b80:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <fsm+0x294>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <fsm+0x1e0>
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <fsm+0x280>)
 8000b8a:	88db      	ldrh	r3, [r3, #6]
 8000b8c:	2b28      	cmp	r3, #40	@ 0x28
 8000b8e:	d907      	bls.n	8000ba0 <fsm+0x1e0>
			setTimer3(200);
 8000b90:	20c8      	movs	r0, #200	@ 0xc8
 8000b92:	f001 facb 	bl	800212c <setTimer3>
			ChangeAlarm(counter);
 8000b96:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <fsm+0x288>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fee0 	bl	8000960 <ChangeAlarm>
		}
		if(button_count[12] != 0){
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <fsm+0x280>)
 8000ba2:	8b1b      	ldrh	r3, [r3, #24]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00b      	beq.n	8000bc0 <fsm+0x200>
			counter++;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <fsm+0x288>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a26      	ldr	r2, [pc, #152]	@ (8000c48 <fsm+0x288>)
 8000bb0:	6013      	str	r3, [r2, #0]
			if(counter>2) counter =0;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <fsm+0x288>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	dd02      	ble.n	8000bc0 <fsm+0x200>
 8000bba:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <fsm+0x288>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
		}
		lcd_StrCenter(110, 20, "SET ALARM", BLUE, YELLOW, 16, 0);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	231f      	movs	r3, #31
 8000bd0:	4a21      	ldr	r2, [pc, #132]	@ (8000c58 <fsm+0x298>)
 8000bd2:	2114      	movs	r1, #20
 8000bd4:	206e      	movs	r0, #110	@ 0x6e
 8000bd6:	f001 f8e3 	bl	8001da0 <lcd_StrCenter>
		break;
 8000bda:	e01b      	b.n	8000c14 <fsm+0x254>
	case UART_UPDATING:
		if(!UpdateTime(counter)){
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <fsm+0x288>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f83b 	bl	8000c5c <UpdateTime>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <fsm+0x232>
			status=NORMAL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	80fb      	strh	r3, [r7, #6]
			counter++;
			if(counter ==5){
				ApplyChange();
			}
		}
		break;
 8000bf0:	e00f      	b.n	8000c12 <fsm+0x252>
			counter++;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <fsm+0x288>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a13      	ldr	r2, [pc, #76]	@ (8000c48 <fsm+0x288>)
 8000bfa:	6013      	str	r3, [r2, #0]
			if(counter ==5){
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <fsm+0x288>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d106      	bne.n	8000c12 <fsm+0x252>
				ApplyChange();
 8000c04:	f7ff fe70 	bl	80008e8 <ApplyChange>
		break;
 8000c08:	e003      	b.n	8000c12 <fsm+0x252>
	default:
		break;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <fsm+0x254>
		break;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <fsm+0x254>
		break;
 8000c12:	bf00      	nop
	}
}
 8000c14:	bf00      	nop
 8000c16:	3740      	adds	r7, #64	@ 0x40
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08007d54 	.word	0x08007d54
 8000c20:	200000f3 	.word	0x200000f3
 8000c24:	200000e7 	.word	0x200000e7
 8000c28:	200000f4 	.word	0x200000f4
 8000c2c:	200000e8 	.word	0x200000e8
 8000c30:	200000f5 	.word	0x200000f5
 8000c34:	200000e9 	.word	0x200000e9
 8000c38:	200000dc 	.word	0x200000dc
 8000c3c:	08007d5c 	.word	0x08007d5c
 8000c40:	200000b0 	.word	0x200000b0
 8000c44:	08007d74 	.word	0x08007d74
 8000c48:	200000d4 	.word	0x200000d4
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	08007d64 	.word	0x08007d64
 8000c54:	200001b6 	.word	0x200001b6
 8000c58:	08007d68 	.word	0x08007d68

08000c5c <UpdateTime>:

int UpdateTime(int counter){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af04      	add	r7, sp, #16
 8000c62:	6078      	str	r0, [r7, #4]
	uart_Rs232SendString(update_request[counter]);
 8000c64:	4ab4      	ldr	r2, [pc, #720]	@ (8000f38 <UpdateTime+0x2dc>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fce9 	bl	8002644 <uart_Rs232SendString>
	uint8_t response[10];
	while (try_count < 4) {
 8000c72:	e1b9      	b.n	8000fe8 <UpdateTime+0x38c>
		if (HAL_UART_Receive(&huart1, response, sizeof(response), 10000)
 8000c74:	f107 010c 	add.w	r1, r7, #12
 8000c78:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	48af      	ldr	r0, [pc, #700]	@ (8000f3c <UpdateTime+0x2e0>)
 8000c80:	f005 f9e9 	bl	8006056 <HAL_UART_Receive>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 81a9 	bne.w	8000fde <UpdateTime+0x382>
				== HAL_OK) {
			uint8_t data = atoi((char*) response);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4618      	mov	r0, r3
 8000c92:	f006 fae7 	bl	8007264 <atoi>
 8000c96:	4603      	mov	r3, r0
 8000c98:	75fb      	strb	r3, [r7, #23]
			switch (counter) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	f200 819c 	bhi.w	8000fda <UpdateTime+0x37e>
 8000ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca8 <UpdateTime+0x4c>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000cfd 	.word	0x08000cfd
 8000cac:	08000d7b 	.word	0x08000d7b
 8000cb0:	08000df9 	.word	0x08000df9
 8000cb4:	08000e77 	.word	0x08000e77
 8000cb8:	08000ef5 	.word	0x08000ef5
 8000cbc:	08000f9f 	.word	0x08000f9f
			case 0:
				while (data < 0 || data > 59 || !isdigit(data)) {
					if (data < 0 || data > 59 || !isdigit(data))
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000cc4:	d808      	bhi.n	8000cd8 <UpdateTime+0x7c>
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a9d      	ldr	r2, [pc, #628]	@ (8000f40 <UpdateTime+0x2e4>)
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <UpdateTime+0x82>
						uart_Rs232SendString("Number invalid");
 8000cd8:	489a      	ldr	r0, [pc, #616]	@ (8000f44 <UpdateTime+0x2e8>)
 8000cda:	f001 fcb3 	bl	8002644 <uart_Rs232SendString>
					HAL_UART_Receive(&huart1, response, sizeof(response),
 8000cde:	f107 010c 	add.w	r1, r7, #12
 8000ce2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ce6:	220a      	movs	r2, #10
 8000ce8:	4894      	ldr	r0, [pc, #592]	@ (8000f3c <UpdateTime+0x2e0>)
 8000cea:	f005 f9b4 	bl	8006056 <HAL_UART_Receive>
							10000);
					data = atoi((char*) response);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 fab6 	bl	8007264 <atoi>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	75fb      	strb	r3, [r7, #23]
				while (data < 0 || data > 59 || !isdigit(data)) {
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d00:	d8de      	bhi.n	8000cc0 <UpdateTime+0x64>
 8000d02:	7dfb      	ldrb	r3, [r7, #23]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a8e      	ldr	r2, [pc, #568]	@ (8000f40 <UpdateTime+0x2e4>)
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0d5      	beq.n	8000cc0 <UpdateTime+0x64>
				}
				cal_sec=data;
 8000d14:	4a8c      	ldr	r2, [pc, #560]	@ (8000f48 <UpdateTime+0x2ec>)
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	7013      	strb	r3, [r2, #0]
				uart_Rs232SendString(update_value[counter]);
 8000d1a:	4a8c      	ldr	r2, [pc, #560]	@ (8000f4c <UpdateTime+0x2f0>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fc8e 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendString(" changed to ");
 8000d28:	4889      	ldr	r0, [pc, #548]	@ (8000f50 <UpdateTime+0x2f4>)
 8000d2a:	f001 fc8b 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendNum(data);
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fca1 	bl	8002678 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 8000d36:	4887      	ldr	r0, [pc, #540]	@ (8000f54 <UpdateTime+0x2f8>)
 8000d38:	f001 fc84 	bl	8002644 <uart_Rs232SendString>
				break;
 8000d3c:	e14e      	b.n	8000fdc <UpdateTime+0x380>
			case 1:
				while (data < 0 || data > 59 || !isdigit(data)) {
					if (data < 0 || data > 59 || !isdigit(data))
 8000d3e:	7dfb      	ldrb	r3, [r7, #23]
 8000d40:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d42:	d808      	bhi.n	8000d56 <UpdateTime+0xfa>
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a7d      	ldr	r2, [pc, #500]	@ (8000f40 <UpdateTime+0x2e4>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <UpdateTime+0x100>
						uart_Rs232SendString("Number invalid");
 8000d56:	487b      	ldr	r0, [pc, #492]	@ (8000f44 <UpdateTime+0x2e8>)
 8000d58:	f001 fc74 	bl	8002644 <uart_Rs232SendString>
					HAL_UART_Receive(&huart1, response, sizeof(response),
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000d64:	220a      	movs	r2, #10
 8000d66:	4875      	ldr	r0, [pc, #468]	@ (8000f3c <UpdateTime+0x2e0>)
 8000d68:	f005 f975 	bl	8006056 <HAL_UART_Receive>
							10000);
					data = atoi((char*) response);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f006 fa77 	bl	8007264 <atoi>
 8000d76:	4603      	mov	r3, r0
 8000d78:	75fb      	strb	r3, [r7, #23]
				while (data < 0 || data > 59 || !isdigit(data)) {
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d7e:	d8de      	bhi.n	8000d3e <UpdateTime+0xe2>
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	3301      	adds	r3, #1
 8000d84:	4a6e      	ldr	r2, [pc, #440]	@ (8000f40 <UpdateTime+0x2e4>)
 8000d86:	4413      	add	r3, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0d5      	beq.n	8000d3e <UpdateTime+0xe2>
				}
				cal_min=data;
 8000d92:	4a71      	ldr	r2, [pc, #452]	@ (8000f58 <UpdateTime+0x2fc>)
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	7013      	strb	r3, [r2, #0]
				uart_Rs232SendString(update_value[counter]);
 8000d98:	4a6c      	ldr	r2, [pc, #432]	@ (8000f4c <UpdateTime+0x2f0>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fc4f 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendString(" changed to ");
 8000da6:	486a      	ldr	r0, [pc, #424]	@ (8000f50 <UpdateTime+0x2f4>)
 8000da8:	f001 fc4c 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendNum(data);
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fc62 	bl	8002678 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 8000db4:	4867      	ldr	r0, [pc, #412]	@ (8000f54 <UpdateTime+0x2f8>)
 8000db6:	f001 fc45 	bl	8002644 <uart_Rs232SendString>
				break;
 8000dba:	e10f      	b.n	8000fdc <UpdateTime+0x380>
				case 2:
				while (data < 0 || data > 23 || !isdigit(data)) {
					if (data < 0 || data > 23 || !isdigit(data))
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	2b17      	cmp	r3, #23
 8000dc0:	d808      	bhi.n	8000dd4 <UpdateTime+0x178>
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f40 <UpdateTime+0x2e4>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <UpdateTime+0x17e>
						uart_Rs232SendString("Number invalid");
 8000dd4:	485b      	ldr	r0, [pc, #364]	@ (8000f44 <UpdateTime+0x2e8>)
 8000dd6:	f001 fc35 	bl	8002644 <uart_Rs232SendString>
					HAL_UART_Receive(&huart1, response, sizeof(response),
 8000dda:	f107 010c 	add.w	r1, r7, #12
 8000dde:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000de2:	220a      	movs	r2, #10
 8000de4:	4855      	ldr	r0, [pc, #340]	@ (8000f3c <UpdateTime+0x2e0>)
 8000de6:	f005 f936 	bl	8006056 <HAL_UART_Receive>
							10000);
					data = atoi((char*) response);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4618      	mov	r0, r3
 8000df0:	f006 fa38 	bl	8007264 <atoi>
 8000df4:	4603      	mov	r3, r0
 8000df6:	75fb      	strb	r3, [r7, #23]
				while (data < 0 || data > 23 || !isdigit(data)) {
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b17      	cmp	r3, #23
 8000dfc:	d8de      	bhi.n	8000dbc <UpdateTime+0x160>
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a4f      	ldr	r2, [pc, #316]	@ (8000f40 <UpdateTime+0x2e4>)
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0d5      	beq.n	8000dbc <UpdateTime+0x160>
				}
				cal_hour=data;
 8000e10:	4a52      	ldr	r2, [pc, #328]	@ (8000f5c <UpdateTime+0x300>)
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	7013      	strb	r3, [r2, #0]
				uart_Rs232SendString(update_value[counter]);
 8000e16:	4a4d      	ldr	r2, [pc, #308]	@ (8000f4c <UpdateTime+0x2f0>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fc10 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendString(" changed to ");
 8000e24:	484a      	ldr	r0, [pc, #296]	@ (8000f50 <UpdateTime+0x2f4>)
 8000e26:	f001 fc0d 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendNum(data);
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fc23 	bl	8002678 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 8000e32:	4848      	ldr	r0, [pc, #288]	@ (8000f54 <UpdateTime+0x2f8>)
 8000e34:	f001 fc06 	bl	8002644 <uart_Rs232SendString>
				break;
 8000e38:	e0d0      	b.n	8000fdc <UpdateTime+0x380>
			case 3:
				while (data < 0 || data > 31 || !isdigit(data)) {
					if (data < 0 || data > 31 || !isdigit(data))
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
 8000e3c:	2b1f      	cmp	r3, #31
 8000e3e:	d808      	bhi.n	8000e52 <UpdateTime+0x1f6>
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a3e      	ldr	r2, [pc, #248]	@ (8000f40 <UpdateTime+0x2e4>)
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <UpdateTime+0x1fc>
						uart_Rs232SendString("Number invalid");
 8000e52:	483c      	ldr	r0, [pc, #240]	@ (8000f44 <UpdateTime+0x2e8>)
 8000e54:	f001 fbf6 	bl	8002644 <uart_Rs232SendString>
					HAL_UART_Receive(&huart1, response, sizeof(response),
 8000e58:	f107 010c 	add.w	r1, r7, #12
 8000e5c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e60:	220a      	movs	r2, #10
 8000e62:	4836      	ldr	r0, [pc, #216]	@ (8000f3c <UpdateTime+0x2e0>)
 8000e64:	f005 f8f7 	bl	8006056 <HAL_UART_Receive>
							10000);
					data = atoi((char*) response);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 f9f9 	bl	8007264 <atoi>
 8000e72:	4603      	mov	r3, r0
 8000e74:	75fb      	strb	r3, [r7, #23]
				while (data < 0 || data > 31 || !isdigit(data)) {
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
 8000e78:	2b1f      	cmp	r3, #31
 8000e7a:	d8de      	bhi.n	8000e3a <UpdateTime+0x1de>
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <UpdateTime+0x2e4>)
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0d5      	beq.n	8000e3a <UpdateTime+0x1de>
				}
				cal_day=data;
 8000e8e:	4a34      	ldr	r2, [pc, #208]	@ (8000f60 <UpdateTime+0x304>)
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	7013      	strb	r3, [r2, #0]
				uart_Rs232SendString(update_value[counter]);
 8000e94:	4a2d      	ldr	r2, [pc, #180]	@ (8000f4c <UpdateTime+0x2f0>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fbd1 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendString(" changed to ");
 8000ea2:	482b      	ldr	r0, [pc, #172]	@ (8000f50 <UpdateTime+0x2f4>)
 8000ea4:	f001 fbce 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendNum(data);
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fbe4 	bl	8002678 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 8000eb0:	4828      	ldr	r0, [pc, #160]	@ (8000f54 <UpdateTime+0x2f8>)
 8000eb2:	f001 fbc7 	bl	8002644 <uart_Rs232SendString>
				break;
 8000eb6:	e091      	b.n	8000fdc <UpdateTime+0x380>
			case 4:
				while (data < 0 || data > 12 || !isdigit(data)) {
					if (data < 0 || data > 12 || !isdigit(data))
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b0c      	cmp	r3, #12
 8000ebc:	d808      	bhi.n	8000ed0 <UpdateTime+0x274>
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f40 <UpdateTime+0x2e4>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <UpdateTime+0x27a>
						uart_Rs232SendString("Number invalid");
 8000ed0:	481c      	ldr	r0, [pc, #112]	@ (8000f44 <UpdateTime+0x2e8>)
 8000ed2:	f001 fbb7 	bl	8002644 <uart_Rs232SendString>
					HAL_UART_Receive(&huart1, response, sizeof(response),
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ede:	220a      	movs	r2, #10
 8000ee0:	4816      	ldr	r0, [pc, #88]	@ (8000f3c <UpdateTime+0x2e0>)
 8000ee2:	f005 f8b8 	bl	8006056 <HAL_UART_Receive>
							10000);
					data = atoi((char*) response);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4618      	mov	r0, r3
 8000eec:	f006 f9ba 	bl	8007264 <atoi>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	75fb      	strb	r3, [r7, #23]
				while (data < 0 || data > 12 || !isdigit(data)) {
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b0c      	cmp	r3, #12
 8000ef8:	d8de      	bhi.n	8000eb8 <UpdateTime+0x25c>
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <UpdateTime+0x2e4>)
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0d5      	beq.n	8000eb8 <UpdateTime+0x25c>
				}
				cal_month=data;
 8000f0c:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <UpdateTime+0x308>)
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	7013      	strb	r3, [r2, #0]
				uart_Rs232SendString(update_value[counter]);
 8000f12:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <UpdateTime+0x2f0>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fb92 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendString(" changed to ");
 8000f20:	480b      	ldr	r0, [pc, #44]	@ (8000f50 <UpdateTime+0x2f4>)
 8000f22:	f001 fb8f 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendNum(data);
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fba5 	bl	8002678 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 8000f2e:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <UpdateTime+0x2f8>)
 8000f30:	f001 fb88 	bl	8002644 <uart_Rs232SendString>
				break;
 8000f34:	e052      	b.n	8000fdc <UpdateTime+0x380>
 8000f36:	bf00      	nop
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000358 	.word	0x20000358
 8000f40:	0800ad60 	.word	0x0800ad60
 8000f44:	08007d80 	.word	0x08007d80
 8000f48:	200000e2 	.word	0x200000e2
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	08007d90 	.word	0x08007d90
 8000f54:	08007da0 	.word	0x08007da0
 8000f58:	200000e1 	.word	0x200000e1
 8000f5c:	200000e0 	.word	0x200000e0
 8000f60:	200000e4 	.word	0x200000e4
 8000f64:	200000e5 	.word	0x200000e5
			case 5:
				while (data <0 || !isdigit(data)) {
					if (data < 0 || !isdigit(data))
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <UpdateTime+0x3c8>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <UpdateTime+0x324>
						uart_Rs232SendString("Number invalid");
 8000f7a:	482b      	ldr	r0, [pc, #172]	@ (8001028 <UpdateTime+0x3cc>)
 8000f7c:	f001 fb62 	bl	8002644 <uart_Rs232SendString>
					HAL_UART_Receive(&huart1, response, sizeof(response),
 8000f80:	f107 010c 	add.w	r1, r7, #12
 8000f84:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f88:	220a      	movs	r2, #10
 8000f8a:	4828      	ldr	r0, [pc, #160]	@ (800102c <UpdateTime+0x3d0>)
 8000f8c:	f005 f863 	bl	8006056 <HAL_UART_Receive>
							10000);
					data = atoi((char*) response);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f006 f965 	bl	8007264 <atoi>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	75fb      	strb	r3, [r7, #23]
				while (data <0 || !isdigit(data)) {
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a20      	ldr	r2, [pc, #128]	@ (8001024 <UpdateTime+0x3c8>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0db      	beq.n	8000f68 <UpdateTime+0x30c>
				}
				cal_year=data;
 8000fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001030 <UpdateTime+0x3d4>)
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	7013      	strb	r3, [r2, #0]
				uart_Rs232SendString(update_value[counter]);
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <UpdateTime+0x3d8>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fb40 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendString(" changed to ");
 8000fc4:	481c      	ldr	r0, [pc, #112]	@ (8001038 <UpdateTime+0x3dc>)
 8000fc6:	f001 fb3d 	bl	8002644 <uart_Rs232SendString>
				uart_Rs232SendNum(data);
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fb53 	bl	8002678 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 8000fd2:	481a      	ldr	r0, [pc, #104]	@ (800103c <UpdateTime+0x3e0>)
 8000fd4:	f001 fb36 	bl	8002644 <uart_Rs232SendString>
				break;
 8000fd8:	e000      	b.n	8000fdc <UpdateTime+0x380>
			default:
			break;
 8000fda:	bf00      	nop
		}
			break;
 8000fdc:	e009      	b.n	8000ff2 <UpdateTime+0x396>
	}
	try_count++;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <UpdateTime+0x3e4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <UpdateTime+0x3e4>)
 8000fe6:	6013      	str	r3, [r2, #0]
	while (try_count < 4) {
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <UpdateTime+0x3e4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	f77f ae41 	ble.w	8000c74 <UpdateTime+0x18>
}

if(try_count ==4) {
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <UpdateTime+0x3e4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d10f      	bne.n	800101a <UpdateTime+0x3be>
	lcd_StrCenter(150, 110, "TIME OUT", RED, YELLOW, 12, 0);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	230c      	movs	r3, #12
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800100c:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <UpdateTime+0x3e8>)
 800100e:	216e      	movs	r1, #110	@ 0x6e
 8001010:	2096      	movs	r0, #150	@ 0x96
 8001012:	f000 fec5 	bl	8001da0 <lcd_StrCenter>
	return 0;
 8001016:	2300      	movs	r3, #0
 8001018:	e7ff      	b.n	800101a <UpdateTime+0x3be>
}

}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	0800ad60 	.word	0x0800ad60
 8001028:	08007d80 	.word	0x08007d80
 800102c:	20000358 	.word	0x20000358
 8001030:	200000e6 	.word	0x200000e6
 8001034:	20000000 	.word	0x20000000
 8001038:	08007d90 	.word	0x08007d90
 800103c:	08007da0 	.word	0x08007da0
 8001040:	200000d8 	.word	0x200000d8
 8001044:	08007da4 	.word	0x08007da4

08001048 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fc18 	bl	8002890 <DEC2BCD>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	b29a      	uxth	r2, r3
 8001068:	230a      	movs	r3, #10
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	f107 030f 	add.w	r3, r7, #15
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	21d0      	movs	r1, #208	@ 0xd0
 800107a:	4803      	ldr	r0, [pc, #12]	@ (8001088 <ds3231_Write+0x40>)
 800107c:	f002 f98a 	bl	8003394 <HAL_I2C_Mem_Write>
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000150 	.word	0x20000150

0800108c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001092:	230a      	movs	r3, #10
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2307      	movs	r3, #7
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <ds3231_ReadTime+0xa4>)
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2200      	movs	r2, #0
 80010a2:	21d0      	movs	r1, #208	@ 0xd0
 80010a4:	4823      	ldr	r0, [pc, #140]	@ (8001134 <ds3231_ReadTime+0xa8>)
 80010a6:	f002 fa6f 	bl	8003588 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <ds3231_ReadTime+0xa4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fbd4 	bl	800285c <BCD2DEC>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <ds3231_ReadTime+0xac>)
 80010ba:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <ds3231_ReadTime+0xa4>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fbcb 	bl	800285c <BCD2DEC>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <ds3231_ReadTime+0xb0>)
 80010cc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <ds3231_ReadTime+0xa4>)
 80010d0:	789b      	ldrb	r3, [r3, #2]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fbc2 	bl	800285c <BCD2DEC>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <ds3231_ReadTime+0xb4>)
 80010de:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <ds3231_ReadTime+0xa4>)
 80010e2:	78db      	ldrb	r3, [r3, #3]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fbb9 	bl	800285c <BCD2DEC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <ds3231_ReadTime+0xb8>)
 80010f0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <ds3231_ReadTime+0xa4>)
 80010f4:	791b      	ldrb	r3, [r3, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fbb0 	bl	800285c <BCD2DEC>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <ds3231_ReadTime+0xbc>)
 8001102:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <ds3231_ReadTime+0xa4>)
 8001106:	795b      	ldrb	r3, [r3, #5]
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fba7 	bl	800285c <BCD2DEC>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <ds3231_ReadTime+0xc0>)
 8001114:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <ds3231_ReadTime+0xa4>)
 8001118:	799b      	ldrb	r3, [r3, #6]
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fb9e 	bl	800285c <BCD2DEC>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <ds3231_ReadTime+0xc4>)
 8001126:	701a      	strb	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000ec 	.word	0x200000ec
 8001134:	20000150 	.word	0x20000150
 8001138:	200000f5 	.word	0x200000f5
 800113c:	200000f4 	.word	0x200000f4
 8001140:	200000f3 	.word	0x200000f3
 8001144:	200000f7 	.word	0x200000f7
 8001148:	200000f6 	.word	0x200000f6
 800114c:	200000f8 	.word	0x200000f8
 8001150:	200000f9 	.word	0x200000f9

08001154 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001180:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <MX_FSMC_Init+0xec>)
 8001182:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001186:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_FSMC_Init+0xec>)
 800118a:	4a2e      	ldr	r2, [pc, #184]	@ (8001244 <MX_FSMC_Init+0xf0>)
 800118c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800118e:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <MX_FSMC_Init+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001194:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <MX_FSMC_Init+0xec>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800119a:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <MX_FSMC_Init+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011b8:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_FSMC_Init+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80011e6:	230f      	movs	r3, #15
 80011e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80011ea:	230f      	movs	r3, #15
 80011ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80011ee:	233c      	movs	r3, #60	@ 0x3c
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80011fa:	2311      	movs	r3, #17
 80011fc:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001202:	2308      	movs	r3, #8
 8001204:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800120a:	2309      	movs	r3, #9
 800120c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001216:	2311      	movs	r3, #17
 8001218:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800121e:	463a      	mov	r2, r7
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	@ (8001240 <MX_FSMC_Init+0xec>)
 8001228:	f004 f970 	bl	800550c <HAL_SRAM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001232:	f000 ff4f 	bl	80020d4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	@ 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200000fc 	.word	0x200000fc
 8001244:	a0000104 	.word	0xa0000104

08001248 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <HAL_FSMC_MspInit+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d131      	bne.n	80012c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <HAL_FSMC_MspInit+0x88>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001272:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6393      	str	r3, [r2, #56]	@ 0x38
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <HAL_FSMC_MspInit+0x8c>)
 800127c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001286:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800128a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001298:	230c      	movs	r3, #12
 800129a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <HAL_FSMC_MspInit+0x90>)
 80012a2:	f001 fd7d 	bl	8002da0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012a6:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80012aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012b8:	230c      	movs	r3, #12
 80012ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <HAL_FSMC_MspInit+0x94>)
 80012c2:	f001 fd6d 	bl	8002da0 <HAL_GPIO_Init>
 80012c6:	e000      	b.n	80012ca <HAL_FSMC_MspInit+0x82>
    return;
 80012c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000014c 	.word	0x2000014c
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80012e8:	f7ff ffae 	bl	8001248 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	@ 0x30
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a6e      	ldr	r2, [pc, #440]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b6c      	ldr	r3, [pc, #432]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b68      	ldr	r3, [pc, #416]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a67      	ldr	r2, [pc, #412]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b65      	ldr	r3, [pc, #404]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b61      	ldr	r3, [pc, #388]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a60      	ldr	r2, [pc, #384]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b5e      	ldr	r3, [pc, #376]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b5a      	ldr	r3, [pc, #360]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a59      	ldr	r2, [pc, #356]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b57      	ldr	r3, [pc, #348]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b53      	ldr	r3, [pc, #332]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a52      	ldr	r2, [pc, #328]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b50      	ldr	r3, [pc, #320]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b4c      	ldr	r3, [pc, #304]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a4b      	ldr	r2, [pc, #300]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 80013a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b49      	ldr	r3, [pc, #292]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b45      	ldr	r3, [pc, #276]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a44      	ldr	r2, [pc, #272]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b42      	ldr	r3, [pc, #264]	@ (80014cc <MX_GPIO_Init+0x1d8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2170      	movs	r1, #112	@ 0x70
 80013d2:	483f      	ldr	r0, [pc, #252]	@ (80014d0 <MX_GPIO_Init+0x1dc>)
 80013d4:	f001 fe80 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013de:	483d      	ldr	r0, [pc, #244]	@ (80014d4 <MX_GPIO_Init+0x1e0>)
 80013e0:	f001 fe7a 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2140      	movs	r1, #64	@ 0x40
 80013e8:	483b      	ldr	r0, [pc, #236]	@ (80014d8 <MX_GPIO_Init+0x1e4>)
 80013ea:	f001 fe75 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f4:	4839      	ldr	r0, [pc, #228]	@ (80014dc <MX_GPIO_Init+0x1e8>)
 80013f6:	f001 fe6f 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2108      	movs	r1, #8
 80013fe:	4838      	ldr	r0, [pc, #224]	@ (80014e0 <MX_GPIO_Init+0x1ec>)
 8001400:	f001 fe6a 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001404:	2370      	movs	r3, #112	@ 0x70
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	482d      	ldr	r0, [pc, #180]	@ (80014d0 <MX_GPIO_Init+0x1dc>)
 800141c:	f001 fcc0 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4826      	ldr	r0, [pc, #152]	@ (80014d4 <MX_GPIO_Init+0x1e0>)
 800143a:	f001 fcb1 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800143e:	23c0      	movs	r3, #192	@ 0xc0
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4822      	ldr	r0, [pc, #136]	@ (80014dc <MX_GPIO_Init+0x1e8>)
 8001452:	f001 fca5 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001456:	2330      	movs	r3, #48	@ 0x30
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <MX_GPIO_Init+0x1e0>)
 800146a:	f001 fc99 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800146e:	2340      	movs	r3, #64	@ 0x40
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4814      	ldr	r0, [pc, #80]	@ (80014d8 <MX_GPIO_Init+0x1e4>)
 8001486:	f001 fc8b 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800148a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	480e      	ldr	r0, [pc, #56]	@ (80014dc <MX_GPIO_Init+0x1e8>)
 80014a4:	f001 fc7c 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80014a8:	2308      	movs	r3, #8
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <MX_GPIO_Init+0x1ec>)
 80014c0:	f001 fc6e 	bl	8002da0 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	@ 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40021800 	.word	0x40021800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020c00 	.word	0x40020c00

080014e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f001 fdf3 	bl	800310c <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 fdd2 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000150 	.word	0x20000150
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_I2C_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157e:	23c0      	movs	r3, #192	@ 0xc0
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001582:	2312      	movs	r3, #18
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158e:	2304      	movs	r3, #4
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <HAL_I2C_MspInit+0x8c>)
 800159a:	f001 fc01 	bl	8002da0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_I2C_MspInit+0x88>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80015da:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <LCD_WR_REG+0x1c>)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	8013      	strh	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	600ffffe 	.word	0x600ffffe

080015f0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <LCD_WR_DATA+0x1c>)
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	8053      	strh	r3, [r2, #2]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	600ffffe 	.word	0x600ffffe

08001610 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <LCD_RD_DATA+0x20>)
 8001618:	885b      	ldrh	r3, [r3, #2]
 800161a:	b29b      	uxth	r3, r3
 800161c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	b29b      	uxth	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	600ffffe 	.word	0x600ffffe

08001634 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	4603      	mov	r3, r0
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001652:	202a      	movs	r0, #42	@ 0x2a
 8001654:	f7ff ffbc 	bl	80015d0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ffc6 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ffc0 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b29b      	uxth	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ffba 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ffb4 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001688:	202b      	movs	r0, #43	@ 0x2b
 800168a:	f7ff ffa1 	bl	80015d0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ffab 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffa5 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80016a6:	883b      	ldrh	r3, [r7, #0]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff9f 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80016b2:	883b      	ldrh	r3, [r7, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff99 	bl	80015f0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80016be:	202c      	movs	r0, #44	@ 0x2c
 80016c0:	f7ff ff86 	bl	80015d0 <LCD_WR_REG>
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
 80016d6:	460b      	mov	r3, r1
 80016d8:	80bb      	strh	r3, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80016de:	88bb      	ldrh	r3, [r7, #4]
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	88b9      	ldrh	r1, [r7, #4]
 80016e4:	88f8      	ldrh	r0, [r7, #6]
 80016e6:	f7ff ffa5 	bl	8001634 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff7f 	bl	80015f0 <LCD_WR_DATA>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	4604      	mov	r4, r0
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4623      	mov	r3, r4
 800170c:	80fb      	strh	r3, [r7, #6]
 800170e:	4603      	mov	r3, r0
 8001710:	80bb      	strh	r3, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	70fb      	strb	r3, [r7, #3]
 8001716:	4613      	mov	r3, r2
 8001718:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800171a:	2300      	movs	r3, #0
 800171c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001722:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b29a      	uxth	r2, r3
 8001748:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800174c:	b29b      	uxth	r3, r3
 800174e:	fb12 f303 	smulbb	r3, r2, r3
 8001752:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	3b20      	subs	r3, #32
 8001758:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	b29a      	uxth	r2, r3
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29c      	uxth	r4, r3
 8001768:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800176c:	b29a      	uxth	r2, r3
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b29b      	uxth	r3, r3
 8001778:	88b9      	ldrh	r1, [r7, #4]
 800177a:	88f8      	ldrh	r0, [r7, #6]
 800177c:	4622      	mov	r2, r4
 800177e:	f7ff ff59 	bl	8001634 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001782:	2300      	movs	r3, #0
 8001784:	827b      	strh	r3, [r7, #18]
 8001786:	e07a      	b.n	800187e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001788:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d028      	beq.n	80017e2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001790:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001794:	2b10      	cmp	r3, #16
 8001796:	d108      	bne.n	80017aa <lcd_ShowChar+0xae>
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	8a7b      	ldrh	r3, [r7, #18]
 800179c:	493c      	ldr	r1, [pc, #240]	@ (8001890 <lcd_ShowChar+0x194>)
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	440a      	add	r2, r1
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	75fb      	strb	r3, [r7, #23]
 80017a8:	e01b      	b.n	80017e2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 80017aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017ae:	2b18      	cmp	r3, #24
 80017b0:	d10b      	bne.n	80017ca <lcd_ShowChar+0xce>
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	8a79      	ldrh	r1, [r7, #18]
 80017b6:	4837      	ldr	r0, [pc, #220]	@ (8001894 <lcd_ShowChar+0x198>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4403      	add	r3, r0
 80017c2:	440b      	add	r3, r1
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	75fb      	strb	r3, [r7, #23]
 80017c8:	e00b      	b.n	80017e2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 80017ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d15a      	bne.n	8001888 <lcd_ShowChar+0x18c>
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	8a7b      	ldrh	r3, [r7, #18]
 80017d6:	4930      	ldr	r1, [pc, #192]	@ (8001898 <lcd_ShowChar+0x19c>)
 80017d8:	0192      	lsls	r2, r2, #6
 80017da:	440a      	add	r2, r1
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	75bb      	strb	r3, [r7, #22]
 80017e6:	e044      	b.n	8001872 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80017e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d120      	bne.n	8001832 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80017f0:	7dfa      	ldrb	r2, [r7, #23]
 80017f2:	7dbb      	ldrb	r3, [r7, #22]
 80017f4:	fa42 f303 	asr.w	r3, r2, r3
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <lcd_ShowChar+0x10e>
 8001800:	883b      	ldrh	r3, [r7, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fef4 	bl	80015f0 <LCD_WR_DATA>
 8001808:	e003      	b.n	8001812 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800180a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff feef 	bl	80015f0 <LCD_WR_DATA>
				m++;
 8001812:	7d7b      	ldrb	r3, [r7, #21]
 8001814:	3301      	adds	r3, #1
 8001816:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001818:	7d7b      	ldrb	r3, [r7, #21]
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001820:	fb01 f202 	mul.w	r2, r1, r2
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11f      	bne.n	800186c <lcd_ShowChar+0x170>
				{
					m=0;
 800182c:	2300      	movs	r3, #0
 800182e:	757b      	strb	r3, [r7, #21]
					break;
 8001830:	e022      	b.n	8001878 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001832:	7dfa      	ldrb	r2, [r7, #23]
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	fa42 f303 	asr.w	r3, r2, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <lcd_ShowChar+0x152>
 8001842:	883a      	ldrh	r2, [r7, #0]
 8001844:	88b9      	ldrh	r1, [r7, #4]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff3f 	bl	80016cc <lcd_DrawPoint>
				x++;
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	3301      	adds	r3, #1
 8001852:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	8a3b      	ldrh	r3, [r7, #16]
 8001858:	1ad2      	subs	r2, r2, r3
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	429a      	cmp	r2, r3
 800185e:	d105      	bne.n	800186c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001860:	8a3b      	ldrh	r3, [r7, #16]
 8001862:	80fb      	strh	r3, [r7, #6]
					y++;
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	80bb      	strh	r3, [r7, #4]
					break;
 800186a:	e005      	b.n	8001878 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800186c:	7dbb      	ldrb	r3, [r7, #22]
 800186e:	3301      	adds	r3, #1
 8001870:	75bb      	strb	r3, [r7, #22]
 8001872:	7dbb      	ldrb	r3, [r7, #22]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d9b7      	bls.n	80017e8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001878:	8a7b      	ldrh	r3, [r7, #18]
 800187a:	3301      	adds	r3, #1
 800187c:	827b      	strh	r3, [r7, #18]
 800187e:	8a7a      	ldrh	r2, [r7, #18]
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d380      	bcc.n	8001788 <lcd_ShowChar+0x8c>
 8001886:	e000      	b.n	800188a <lcd_ShowChar+0x18e>
		else return;
 8001888:	bf00      	nop
				}
			}
		}
	}
}
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	08007dc8 	.word	0x08007dc8
 8001894:	080083b8 	.word	0x080083b8
 8001898:	08009588 	.word	0x08009588

0800189c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80018b0:	e004      	b.n	80018bc <mypow+0x20>
 80018b2:	79fa      	ldrb	r2, [r7, #7]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	71ba      	strb	r2, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f5      	bne.n	80018b2 <mypow+0x16>
	return result;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af04      	add	r7, sp, #16
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	4603      	mov	r3, r0
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	807b      	strh	r3, [r7, #2]
 80018ee:	4613      	mov	r3, r2
 80018f0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80018f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	e059      	b.n	80019b8 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001904:	887c      	ldrh	r4, [r7, #2]
 8001906:	787a      	ldrb	r2, [r7, #1]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	200a      	movs	r0, #10
 8001916:	f7ff ffc1 	bl	800189c <mypow>
 800191a:	4603      	mov	r3, r0
 800191c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001920:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <lcd_ShowIntNum+0xf8>)
 8001922:	fba3 2301 	umull	r2, r3, r3, r1
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	1aca      	subs	r2, r1, r3
 8001932:	4613      	mov	r3, r2
 8001934:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001936:	7bbb      	ldrb	r3, [r7, #14]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d121      	bne.n	8001980 <lcd_ShowIntNum+0xac>
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	787b      	ldrb	r3, [r7, #1]
 8001940:	3b01      	subs	r3, #1
 8001942:	429a      	cmp	r2, r3
 8001944:	da1c      	bge.n	8001980 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001946:	7b3b      	ldrb	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d117      	bne.n	800197c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	b29a      	uxth	r2, r3
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	b29b      	uxth	r3, r3
 8001954:	fb12 f303 	smulbb	r3, r2, r3
 8001958:	b29a      	uxth	r2, r3
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4413      	add	r3, r2
 800195e:	b298      	uxth	r0, r3
 8001960:	8c3a      	ldrh	r2, [r7, #32]
 8001962:	88b9      	ldrh	r1, [r7, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	4613      	mov	r3, r2
 8001974:	2220      	movs	r2, #32
 8001976:	f7ff fec1 	bl	80016fc <lcd_ShowChar>
				continue;
 800197a:	e01a      	b.n	80019b2 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 800197c:	2301      	movs	r3, #1
 800197e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	b29a      	uxth	r2, r3
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	b29b      	uxth	r3, r3
 8001988:	fb12 f303 	smulbb	r3, r2, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4413      	add	r3, r2
 8001992:	b298      	uxth	r0, r3
 8001994:	7b3b      	ldrb	r3, [r7, #12]
 8001996:	3330      	adds	r3, #48	@ 0x30
 8001998:	b2da      	uxtb	r2, r3
 800199a:	8c3c      	ldrh	r4, [r7, #32]
 800199c:	88b9      	ldrh	r1, [r7, #4]
 800199e:	2300      	movs	r3, #0
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4623      	mov	r3, r4
 80019ae:	f7ff fea5 	bl	80016fc <lcd_ShowChar>
	for(t=0;t<len;t++)
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	3301      	adds	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	787b      	ldrb	r3, [r7, #1]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3a1      	bcc.n	8001904 <lcd_ShowIntNum+0x30>
	}
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	cccccccd 	.word	0xcccccccd

080019d0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <lcd_SetDir+0x44>)
 80019ec:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019f0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <lcd_SetDir+0x44>)
 80019f4:	22f0      	movs	r2, #240	@ 0xf0
 80019f6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80019f8:	e006      	b.n	8001a08 <lcd_SetDir+0x38>
		lcddev.width=240;
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <lcd_SetDir+0x44>)
 80019fc:	22f0      	movs	r2, #240	@ 0xf0
 80019fe:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001a00:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <lcd_SetDir+0x44>)
 8001a02:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a06:	805a      	strh	r2, [r3, #2]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	200001a4 	.word	0x200001a4

08001a18 <lcd_init>:


void lcd_init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a22:	48aa      	ldr	r0, [pc, #680]	@ (8001ccc <lcd_init+0x2b4>)
 8001a24:	f001 fb58 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001a28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a2c:	f000 fff0 	bl	8002a10 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a36:	48a5      	ldr	r0, [pc, #660]	@ (8001ccc <lcd_init+0x2b4>)
 8001a38:	f001 fb4e 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001a3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a40:	f000 ffe6 	bl	8002a10 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff ffc3 	bl	80019d0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001a4a:	20d3      	movs	r0, #211	@ 0xd3
 8001a4c:	f7ff fdc0 	bl	80015d0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001a50:	f7ff fdde 	bl	8001610 <LCD_RD_DATA>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b9d      	ldr	r3, [pc, #628]	@ (8001cd0 <lcd_init+0x2b8>)
 8001a5a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001a5c:	f7ff fdd8 	bl	8001610 <LCD_RD_DATA>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd0 <lcd_init+0x2b8>)
 8001a66:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001a68:	f7ff fdd2 	bl	8001610 <LCD_RD_DATA>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b97      	ldr	r3, [pc, #604]	@ (8001cd0 <lcd_init+0x2b8>)
 8001a72:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001a74:	4b96      	ldr	r3, [pc, #600]	@ (8001cd0 <lcd_init+0x2b8>)
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b94      	ldr	r3, [pc, #592]	@ (8001cd0 <lcd_init+0x2b8>)
 8001a7e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001a80:	f7ff fdc6 	bl	8001610 <LCD_RD_DATA>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b91      	ldr	r3, [pc, #580]	@ (8001cd0 <lcd_init+0x2b8>)
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd0 <lcd_init+0x2b8>)
 8001a92:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001a94:	20cf      	movs	r0, #207	@ 0xcf
 8001a96:	f7ff fd9b 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fda8 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001aa0:	20c1      	movs	r0, #193	@ 0xc1
 8001aa2:	f7ff fda5 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001aa6:	2030      	movs	r0, #48	@ 0x30
 8001aa8:	f7ff fda2 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001aac:	20ed      	movs	r0, #237	@ 0xed
 8001aae:	f7ff fd8f 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001ab2:	2064      	movs	r0, #100	@ 0x64
 8001ab4:	f7ff fd9c 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f7ff fd99 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001abe:	2012      	movs	r0, #18
 8001ac0:	f7ff fd96 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ac4:	2081      	movs	r0, #129	@ 0x81
 8001ac6:	f7ff fd93 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001aca:	20e8      	movs	r0, #232	@ 0xe8
 8001acc:	f7ff fd80 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001ad0:	2085      	movs	r0, #133	@ 0x85
 8001ad2:	f7ff fd8d 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ad6:	2010      	movs	r0, #16
 8001ad8:	f7ff fd8a 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001adc:	207a      	movs	r0, #122	@ 0x7a
 8001ade:	f7ff fd87 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001ae2:	20cb      	movs	r0, #203	@ 0xcb
 8001ae4:	f7ff fd74 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001ae8:	2039      	movs	r0, #57	@ 0x39
 8001aea:	f7ff fd81 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001aee:	202c      	movs	r0, #44	@ 0x2c
 8001af0:	f7ff fd7e 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fd7b 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001afa:	2034      	movs	r0, #52	@ 0x34
 8001afc:	f7ff fd78 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7ff fd75 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001b06:	20f7      	movs	r0, #247	@ 0xf7
 8001b08:	f7ff fd62 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001b0c:	2020      	movs	r0, #32
 8001b0e:	f7ff fd6f 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001b12:	20ea      	movs	r0, #234	@ 0xea
 8001b14:	f7ff fd5c 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fd69 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fd66 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001b24:	20c0      	movs	r0, #192	@ 0xc0
 8001b26:	f7ff fd53 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001b2a:	201b      	movs	r0, #27
 8001b2c:	f7ff fd60 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001b30:	20c1      	movs	r0, #193	@ 0xc1
 8001b32:	f7ff fd4d 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fd5a 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001b3c:	20c5      	movs	r0, #197	@ 0xc5
 8001b3e:	f7ff fd47 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001b42:	2030      	movs	r0, #48	@ 0x30
 8001b44:	f7ff fd54 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001b48:	2030      	movs	r0, #48	@ 0x30
 8001b4a:	f7ff fd51 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001b4e:	20c7      	movs	r0, #199	@ 0xc7
 8001b50:	f7ff fd3e 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001b54:	20b7      	movs	r0, #183	@ 0xb7
 8001b56:	f7ff fd4b 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001b5a:	2036      	movs	r0, #54	@ 0x36
 8001b5c:	f7ff fd38 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001b60:	2008      	movs	r0, #8
 8001b62:	f7ff fd45 	bl	80015f0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001b66:	203a      	movs	r0, #58	@ 0x3a
 8001b68:	f7ff fd32 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001b6c:	2055      	movs	r0, #85	@ 0x55
 8001b6e:	f7ff fd3f 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001b72:	20b1      	movs	r0, #177	@ 0xb1
 8001b74:	f7ff fd2c 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fd39 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001b7e:	201a      	movs	r0, #26
 8001b80:	f7ff fd36 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001b84:	20b6      	movs	r0, #182	@ 0xb6
 8001b86:	f7ff fd23 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f7ff fd30 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001b90:	20a2      	movs	r0, #162	@ 0xa2
 8001b92:	f7ff fd2d 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001b96:	20f2      	movs	r0, #242	@ 0xf2
 8001b98:	f7ff fd1a 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fd27 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001ba2:	2026      	movs	r0, #38	@ 0x26
 8001ba4:	f7ff fd14 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff fd21 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001bae:	20e0      	movs	r0, #224	@ 0xe0
 8001bb0:	f7ff fd0e 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001bb4:	200f      	movs	r0, #15
 8001bb6:	f7ff fd1b 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001bba:	202a      	movs	r0, #42	@ 0x2a
 8001bbc:	f7ff fd18 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001bc0:	2028      	movs	r0, #40	@ 0x28
 8001bc2:	f7ff fd15 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001bc6:	2008      	movs	r0, #8
 8001bc8:	f7ff fd12 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001bcc:	200e      	movs	r0, #14
 8001bce:	f7ff fd0f 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001bd2:	2008      	movs	r0, #8
 8001bd4:	f7ff fd0c 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001bd8:	2054      	movs	r0, #84	@ 0x54
 8001bda:	f7ff fd09 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001bde:	20a9      	movs	r0, #169	@ 0xa9
 8001be0:	f7ff fd06 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001be4:	2043      	movs	r0, #67	@ 0x43
 8001be6:	f7ff fd03 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001bea:	200a      	movs	r0, #10
 8001bec:	f7ff fd00 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001bf0:	200f      	movs	r0, #15
 8001bf2:	f7ff fcfd 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff fcfa 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fcf7 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fcf4 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff fcf1 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001c0e:	20e1      	movs	r0, #225	@ 0xe1
 8001c10:	f7ff fcde 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fceb 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001c1a:	2015      	movs	r0, #21
 8001c1c:	f7ff fce8 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001c20:	2017      	movs	r0, #23
 8001c22:	f7ff fce5 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001c26:	2007      	movs	r0, #7
 8001c28:	f7ff fce2 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001c2c:	2011      	movs	r0, #17
 8001c2e:	f7ff fcdf 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001c32:	2006      	movs	r0, #6
 8001c34:	f7ff fcdc 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001c38:	202b      	movs	r0, #43	@ 0x2b
 8001c3a:	f7ff fcd9 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001c3e:	2056      	movs	r0, #86	@ 0x56
 8001c40:	f7ff fcd6 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001c44:	203c      	movs	r0, #60	@ 0x3c
 8001c46:	f7ff fcd3 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001c4a:	2005      	movs	r0, #5
 8001c4c:	f7ff fcd0 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001c50:	2010      	movs	r0, #16
 8001c52:	f7ff fccd 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f7ff fcca 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001c5c:	203f      	movs	r0, #63	@ 0x3f
 8001c5e:	f7ff fcc7 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001c62:	203f      	movs	r0, #63	@ 0x3f
 8001c64:	f7ff fcc4 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001c68:	200f      	movs	r0, #15
 8001c6a:	f7ff fcc1 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001c6e:	202b      	movs	r0, #43	@ 0x2b
 8001c70:	f7ff fcae 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fcbb 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff fcb8 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fcb5 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001c86:	203f      	movs	r0, #63	@ 0x3f
 8001c88:	f7ff fcb2 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001c8c:	202a      	movs	r0, #42	@ 0x2a
 8001c8e:	f7ff fc9f 	bl	80015d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fcac 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fca9 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fca6 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001ca4:	20ef      	movs	r0, #239	@ 0xef
 8001ca6:	f7ff fca3 	bl	80015f0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001caa:	2011      	movs	r0, #17
 8001cac:	f7ff fc90 	bl	80015d0 <LCD_WR_REG>
	HAL_Delay(120);
 8001cb0:	2078      	movs	r0, #120	@ 0x78
 8001cb2:	f000 fead 	bl	8002a10 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001cb6:	2029      	movs	r0, #41	@ 0x29
 8001cb8:	f7ff fc8a 	bl	80015d0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc2:	4804      	ldr	r0, [pc, #16]	@ (8001cd4 <lcd_init+0x2bc>)
 8001cc4:	f001 fa08 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	200001a4 	.word	0x200001a4
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b08b      	sub	sp, #44	@ 0x2c
 8001cdc:	af04      	add	r7, sp, #16
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	81fb      	strh	r3, [r7, #14]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	81bb      	strh	r3, [r7, #12]
 8001cea:	4613      	mov	r3, r2
 8001cec:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001cf6:	e048      	b.n	8001d8a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d145      	bne.n	8001d8a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001cfe:	89fa      	ldrh	r2, [r7, #14]
 8001d00:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <lcd_ShowStr+0xc4>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	1acb      	subs	r3, r1, r3
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dc3f      	bgt.n	8001d94 <lcd_ShowStr+0xbc>
 8001d14:	89ba      	ldrh	r2, [r7, #12]
 8001d16:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <lcd_ShowStr+0xc4>)
 8001d18:	885b      	ldrh	r3, [r3, #2]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d20:	1acb      	subs	r3, r1, r3
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dc36      	bgt.n	8001d94 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b80      	cmp	r3, #128	@ 0x80
 8001d2c:	d902      	bls.n	8001d34 <lcd_ShowStr+0x5c>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
 8001d32:	e02a      	b.n	8001d8a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b0d      	cmp	r3, #13
 8001d3a:	d10b      	bne.n	8001d54 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001d3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	89bb      	ldrh	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001d48:	8abb      	ldrh	r3, [r7, #20]
 8001d4a:	81fb      	strh	r3, [r7, #14]
					str++;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	e017      	b.n	8001d84 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	88fc      	ldrh	r4, [r7, #6]
 8001d5a:	89b9      	ldrh	r1, [r7, #12]
 8001d5c:	89f8      	ldrh	r0, [r7, #14]
 8001d5e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	4623      	mov	r3, r4
 8001d70:	f7ff fcc4 	bl	80016fc <lcd_ShowChar>
					x+=sizey/2;
 8001d74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
 8001d80:	4413      	add	r3, r2
 8001d82:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1b2      	bne.n	8001cf8 <lcd_ShowStr+0x20>
 8001d92:	e000      	b.n	8001d96 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001d94:	bf00      	nop
			}
		}
	}
}
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	200001a4 	.word	0x200001a4

08001da0 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af04      	add	r7, sp, #16
 8001da6:	60ba      	str	r2, [r7, #8]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	81fb      	strh	r3, [r7, #14]
 8001dae:	460b      	mov	r3, r1
 8001db0:	81bb      	strh	r3, [r7, #12]
 8001db2:	4613      	mov	r3, r2
 8001db4:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001db6:	68b8      	ldr	r0, [r7, #8]
 8001db8:	f7fe fa0a 	bl	80001d0 <strlen>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <lcd_StrCenter+0x60>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	8afb      	ldrh	r3, [r7, #22]
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	0fda      	lsrs	r2, r3, #31
 8001dce:	4413      	add	r3, r2
 8001dd0:	105b      	asrs	r3, r3, #1
 8001dd2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001dd4:	89fa      	ldrh	r2, [r7, #14]
 8001dd6:	8abb      	ldrh	r3, [r7, #20]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b298      	uxth	r0, r3
 8001ddc:	88fa      	ldrh	r2, [r7, #6]
 8001dde:	89b9      	ldrh	r1, [r7, #12]
 8001de0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	8c3b      	ldrh	r3, [r7, #32]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f7ff ff70 	bl	8001cd8 <lcd_ShowStr>
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200001a4 	.word	0x200001a4

08001e04 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2140      	movs	r1, #64	@ 0x40
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <led7_init+0x14>)
 8001e0e:	f001 f963 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021800 	.word	0x40021800

08001e1c <led7_Scan>:

void led7_Scan(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001e20:	4b3f      	ldr	r3, [pc, #252]	@ (8001f20 <led7_Scan+0x104>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b3d      	ldr	r3, [pc, #244]	@ (8001f20 <led7_Scan+0x104>)
 8001e2a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <led7_Scan+0x108>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3d      	ldr	r2, [pc, #244]	@ (8001f28 <led7_Scan+0x10c>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	4b39      	ldr	r3, [pc, #228]	@ (8001f20 <led7_Scan+0x104>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b36      	ldr	r3, [pc, #216]	@ (8001f20 <led7_Scan+0x104>)
 8001e46:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001e48:	4b36      	ldr	r3, [pc, #216]	@ (8001f24 <led7_Scan+0x108>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d847      	bhi.n	8001ee0 <led7_Scan+0xc4>
 8001e50:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <led7_Scan+0x3c>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e87 	.word	0x08001e87
 8001e60:	08001ea5 	.word	0x08001ea5
 8001e64:	08001ec3 	.word	0x08001ec3
	case 0:
		spi_buffer |= 0x00b0;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <led7_Scan+0x104>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <led7_Scan+0x104>)
 8001e74:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001e76:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <led7_Scan+0x104>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <led7_Scan+0x104>)
 8001e82:	801a      	strh	r2, [r3, #0]
		break;
 8001e84:	e02d      	b.n	8001ee2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001e86:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <led7_Scan+0x104>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <led7_Scan+0x104>)
 8001e92:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <led7_Scan+0x104>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	f023 0320 	bic.w	r3, r3, #32
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <led7_Scan+0x104>)
 8001ea0:	801a      	strh	r2, [r3, #0]
		break;
 8001ea2:	e01e      	b.n	8001ee2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <led7_Scan+0x104>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <led7_Scan+0x104>)
 8001eb0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <led7_Scan+0x104>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f023 0310 	bic.w	r3, r3, #16
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <led7_Scan+0x104>)
 8001ebe:	801a      	strh	r2, [r3, #0]
		break;
 8001ec0:	e00f      	b.n	8001ee2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <led7_Scan+0x104>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <led7_Scan+0x104>)
 8001ece:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <led7_Scan+0x104>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <led7_Scan+0x104>)
 8001edc:	801a      	strh	r2, [r3, #0]
		break;
 8001ede:	e000      	b.n	8001ee2 <led7_Scan+0xc6>
	default:
		break;
 8001ee0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <led7_Scan+0x108>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	425a      	negs	r2, r3
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	bf58      	it	pl
 8001ef4:	4253      	negpl	r3, r2
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f24 <led7_Scan+0x108>)
 8001ef8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2140      	movs	r1, #64	@ 0x40
 8001efe:	480b      	ldr	r0, [pc, #44]	@ (8001f2c <led7_Scan+0x110>)
 8001f00:	f001 f8ea 	bl	80030d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001f04:	2301      	movs	r3, #1
 8001f06:	2202      	movs	r2, #2
 8001f08:	4905      	ldr	r1, [pc, #20]	@ (8001f20 <led7_Scan+0x104>)
 8001f0a:	4809      	ldr	r0, [pc, #36]	@ (8001f30 <led7_Scan+0x114>)
 8001f0c:	f002 fddf 	bl	8004ace <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2140      	movs	r1, #64	@ 0x40
 8001f14:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <led7_Scan+0x110>)
 8001f16:	f001 f8df 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000034 	.word	0x20000034
 8001f24:	200001ac 	.word	0x200001ac
 8001f28:	20000030 	.word	0x20000030
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	200001c4 	.word	0x200001c4

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int status =0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
int sta=1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f42:	f000 fcf3 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f46:	f000 f839 	bl	8001fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4a:	f7ff f9d3 	bl	80012f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f4e:	f000 fa9b 	bl	8002488 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001f52:	f000 f967 	bl	8002224 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001f56:	f7ff f8fd 	bl	8001154 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001f5a:	f7ff fac3 	bl	80014e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f5e:	f000 fc03 	bl	8002768 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001f62:	f000 f895 	bl	8002090 <system_init>
//	  flag_timer2 = 0;
//	  button_Scan();
//	  test_LedDebug();
//	  ds3231_ReadTime();
//	  test_Uart();
	  if(dataReady && button_count[0] == 1){
 8001f66:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <main+0x7c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <main+0x46>
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <main+0x80>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <main+0x46>
		  BufferReading();
 8001f76:	f000 fb1d 	bl	80025b4 <BufferReading>
	  }
	  if (flag_timer2){
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <main+0x84>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <main+0x60>
		  button_Scan();
 8001f82:	f7fe fb01 	bl	8000588 <button_Scan>
		  ds3231_ReadTime();
 8001f86:	f7ff f881 	bl	800108c <ds3231_ReadTime>
		  fsm(status);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fd16 	bl	80009c0 <fsm>
	  }
	  if(button_count[1]==1){
 8001f94:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <main+0x80>)
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d1e4      	bne.n	8001f66 <main+0x32>
		  status++;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
		  if(status >3) status =0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	ddde      	ble.n	8001f66 <main+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
	  if(dataReady && button_count[0] == 1){
 8001fac:	e7db      	b.n	8001f66 <main+0x32>
 8001fae:	bf00      	nop
 8001fb0:	20000354 	.word	0x20000354
 8001fb4:	200000b0 	.word	0x200000b0
 8001fb8:	200001b0 	.word	0x200001b0

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b094      	sub	sp, #80	@ 0x50
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2230      	movs	r2, #48	@ 0x30
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 f9f2 	bl	80073b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <SystemClock_Config+0xcc>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <SystemClock_Config+0xcc>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <SystemClock_Config+0xcc>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	4b22      	ldr	r3, [pc, #136]	@ (800208c <SystemClock_Config+0xd0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a21      	ldr	r2, [pc, #132]	@ (800208c <SystemClock_Config+0xd0>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <SystemClock_Config+0xd0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002018:	2302      	movs	r3, #2
 800201a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201c:	2301      	movs	r3, #1
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002020:	2310      	movs	r3, #16
 8002022:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002024:	2302      	movs	r3, #2
 8002026:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800202c:	2308      	movs	r3, #8
 800202e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002030:	23a8      	movs	r3, #168	@ 0xa8
 8002032:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002034:	2302      	movs	r3, #2
 8002036:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002038:	2304      	movs	r3, #4
 800203a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	4618      	mov	r0, r3
 8002042:	f002 f823 	bl	800408c <HAL_RCC_OscConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800204c:	f000 f842 	bl	80020d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002050:	230f      	movs	r3, #15
 8002052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002054:	2302      	movs	r3, #2
 8002056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800205c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002062:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2105      	movs	r1, #5
 800206e:	4618      	mov	r0, r3
 8002070:	f002 fa84 	bl	800457c <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800207a:	f000 f82b 	bl	80020d4 <Error_Handler>
  }
}
 800207e:	bf00      	nop
 8002080:	3750      	adds	r7, #80	@ 0x50
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2120      	movs	r1, #32
 8002098:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <system_init+0x40>)
 800209a:	f001 f81d 	bl	80030d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2140      	movs	r1, #64	@ 0x40
 80020a2:	480b      	ldr	r0, [pc, #44]	@ (80020d0 <system_init+0x40>)
 80020a4:	f001 f818 	bl	80030d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2110      	movs	r1, #16
 80020ac:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <system_init+0x40>)
 80020ae:	f001 f813 	bl	80030d8 <HAL_GPIO_WritePin>
	  timer_init();
 80020b2:	f000 f815 	bl	80020e0 <timer_init>
	  led7_init();
 80020b6:	f7ff fea5 	bl	8001e04 <led7_init>
	  button_init();
 80020ba:	f7fe fa59 	bl	8000570 <button_init>
	  lcd_init();
 80020be:	f7ff fcab 	bl	8001a18 <lcd_init>
	  uart_init_rs232();
 80020c2:	f000 fab1 	bl	8002628 <uart_init_rs232>
	  setTimer2(50);
 80020c6:	2032      	movs	r0, #50	@ 0x32
 80020c8:	f000 f814 	bl	80020f4 <setTimer2>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <Error_Handler+0x8>

080020e0 <timer_init>:
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;
uint16_t flag_timer4 = 0;
uint16_t timer4_counter = 0;
uint16_t timer4_MUL = 0;
void timer_init(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <timer_init+0x10>)
 80020e6:	f003 faa5 	bl	8005634 <HAL_TIM_Base_Start_IT>
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000220 	.word	0x20000220

080020f4 <setTimer2>:

void setTimer2(uint16_t duration){
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80020fe:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <setTimer2+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <setTimer2+0x2c>)
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <setTimer2+0x30>)
 800210a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <setTimer2+0x34>)
 800210e:	2200      	movs	r2, #0
 8002110:	801a      	strh	r2, [r3, #0]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	200001b4 	.word	0x200001b4
 8002124:	200001b2 	.word	0x200001b2
 8002128:	200001b0 	.word	0x200001b0

0800212c <setTimer3>:
void setTimer3(uint16_t duration){
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8002136:	4a08      	ldr	r2, [pc, #32]	@ (8002158 <setTimer3+0x2c>)
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <setTimer3+0x2c>)
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <setTimer3+0x30>)
 8002142:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <setTimer3+0x34>)
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	200001ba 	.word	0x200001ba
 800215c:	200001b8 	.word	0x200001b8
 8002160:	200001b6 	.word	0x200001b6

08002164 <HAL_TIM_PeriodElapsedCallback>:
	timer4_MUL = duration/TIMER_CYCLE_2;
	timer4_counter = timer4_MUL;
	flag_timer4 = 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002174:	d140      	bne.n	80021f8 <HAL_TIM_PeriodElapsedCallback+0x94>
		if (timer2_counter > 0) {
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002188:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 800218a:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002194:	2201      	movs	r2, #1
 8002196:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800219e:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer3_counter > 0) {
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d010      	beq.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021b2:	801a      	strh	r2, [r3, #0]
			if (timer3_counter == 0) {
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80021be:	2201      	movs	r2, #1
 80021c0:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80021c8:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer4_counter > 0) {
 80021ca:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d010      	beq.n	80021f4 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80021dc:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 80021e6:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80021f2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80021f4:	f7ff fe12 	bl	8001e1c <led7_Scan>
	}
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200001b2 	.word	0x200001b2
 8002204:	200001b0 	.word	0x200001b0
 8002208:	200001b4 	.word	0x200001b4
 800220c:	200001b8 	.word	0x200001b8
 8002210:	200001b6 	.word	0x200001b6
 8002214:	200001ba 	.word	0x200001ba
 8002218:	200001be 	.word	0x200001be
 800221c:	200001bc 	.word	0x200001bc
 8002220:	200001c0 	.word	0x200001c0

08002224 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <MX_SPI1_Init+0x64>)
 800222a:	4a18      	ldr	r2, [pc, #96]	@ (800228c <MX_SPI1_Init+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002236:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <MX_SPI1_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <MX_SPI1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <MX_SPI1_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002270:	220a      	movs	r2, #10
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002276:	f002 fba1 	bl	80049bc <HAL_SPI_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002280:	f7ff ff28 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200001c4 	.word	0x200001c4
 800228c:	40013000 	.word	0x40013000

08002290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <HAL_SPI_MspInit+0x84>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d12b      	bne.n	800230a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_SPI_MspInit+0x88>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a17      	ldr	r2, [pc, #92]	@ (8002318 <HAL_SPI_MspInit+0x88>)
 80022bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_SPI_MspInit+0x88>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <HAL_SPI_MspInit+0x88>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <HAL_SPI_MspInit+0x88>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <HAL_SPI_MspInit+0x88>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80022ea:	2338      	movs	r3, #56	@ 0x38
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fa:	2305      	movs	r3, #5
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	@ (800231c <HAL_SPI_MspInit+0x8c>)
 8002306:	f000 fd4b 	bl	8002da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	@ 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40013000 	.word	0x40013000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020400 	.word	0x40020400

08002320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b10      	ldr	r3, [pc, #64]	@ (800236c <HAL_MspInit+0x4c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <HAL_MspInit+0x4c>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_MspInit+0x4c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4b09      	ldr	r3, [pc, #36]	@ (800236c <HAL_MspInit+0x4c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a08      	ldr	r2, [pc, #32]	@ (800236c <HAL_MspInit+0x4c>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_MspInit+0x4c>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <NMI_Handler+0x4>

08002378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <HardFault_Handler+0x4>

08002380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <MemManage_Handler+0x4>

08002388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <UsageFault_Handler+0x4>

08002398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c6:	f000 fb03 	bl	80029d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <TIM2_IRQHandler+0x10>)
 80023d6:	f003 f99d 	bl	8005714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000220 	.word	0x20000220

080023e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <USART1_IRQHandler+0x10>)
 80023ea:	f003 ff07 	bl	80061fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000358 	.word	0x20000358

080023f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <_sbrk+0x5c>)
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <_sbrk+0x60>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002428:	f004 ffdc 	bl	80073e4 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	@ (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20020000 	.word	0x20020000
 8002458:	00000400 	.word	0x00000400
 800245c:	2000021c 	.word	0x2000021c
 8002460:	200004e8 	.word	0x200004e8

08002464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <SystemInit+0x20>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	4a05      	ldr	r2, [pc, #20]	@ (8002484 <SystemInit+0x20>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	463b      	mov	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <MX_TIM2_Init+0x94>)
 80024a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <MX_TIM2_Init+0x94>)
 80024ae:	f240 3247 	movw	r2, #839	@ 0x347
 80024b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <MX_TIM2_Init+0x94>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80024ba:	4b18      	ldr	r3, [pc, #96]	@ (800251c <MX_TIM2_Init+0x94>)
 80024bc:	2263      	movs	r2, #99	@ 0x63
 80024be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <MX_TIM2_Init+0x94>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <MX_TIM2_Init+0x94>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024cc:	4813      	ldr	r0, [pc, #76]	@ (800251c <MX_TIM2_Init+0x94>)
 80024ce:	f003 f861 	bl	8005594 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024d8:	f7ff fdfc 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4619      	mov	r1, r3
 80024e8:	480c      	ldr	r0, [pc, #48]	@ (800251c <MX_TIM2_Init+0x94>)
 80024ea:	f003 fa1b 	bl	8005924 <HAL_TIM_ConfigClockSource>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024f4:	f7ff fdee 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002500:	463b      	mov	r3, r7
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	@ (800251c <MX_TIM2_Init+0x94>)
 8002506:	f003 fc37 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002510:	f7ff fde0 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000220 	.word	0x20000220

08002520 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002530:	d115      	bne.n	800255e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_TIM_Base_MspInit+0x48>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a0b      	ldr	r2, [pc, #44]	@ (8002568 <HAL_TIM_Base_MspInit+0x48>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_TIM_Base_MspInit+0x48>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	201c      	movs	r0, #28
 8002554:	f000 fb5b 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002558:	201c      	movs	r0, #28
 800255a:	f000 fb74 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <BufferWrite>:
//bool BufferFull(){
//	return Full;
//}

// Function to add data to the buffer
void BufferWrite(uint8_t data) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]

    RingBuffer[head] = data;
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <BufferWrite+0x40>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	4619      	mov	r1, r3
 800257e:	4a0c      	ldr	r2, [pc, #48]	@ (80025b0 <BufferWrite+0x44>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	5453      	strb	r3, [r2, r1]
    head = (head + 1) % BUFFER_SIZE;
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <BufferWrite+0x40>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	3301      	adds	r3, #1
 800258c:	425a      	negs	r2, r3
 800258e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002592:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002596:	bf58      	it	pl
 8002598:	4253      	negpl	r3, r2
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <BufferWrite+0x40>)
 800259e:	801a      	strh	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	20000350 	.word	0x20000350
 80025b0:	200002d0 	.word	0x200002d0

080025b4 <BufferReading>:
void BufferReading(){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
	while(pointer != head){
 80025ba:	e01b      	b.n	80025f4 <BufferReading+0x40>
		uint8_t data = RingBuffer[pointer];
 80025bc:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <BufferReading+0x60>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <BufferReading+0x64>)
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	71fb      	strb	r3, [r7, #7]
		pointer=(pointer+1) % BUFFER_SIZE;
 80025ca:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <BufferReading+0x60>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	425a      	negs	r2, r3
 80025d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025dc:	bf58      	it	pl
 80025de:	4253      	negpl	r3, r2
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <BufferReading+0x60>)
 80025e4:	801a      	strh	r2, [r3, #0]
		uart_Rs232SendNum(data);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f845 	bl	8002678 <uart_Rs232SendNum>
		uart_Rs232SendString("	");
 80025ee:	480b      	ldr	r0, [pc, #44]	@ (800261c <BufferReading+0x68>)
 80025f0:	f000 f828 	bl	8002644 <uart_Rs232SendString>
	while(pointer != head){
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <BufferReading+0x60>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <BufferReading+0x6c>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	429a      	cmp	r2, r3
 8002602:	d1db      	bne.n	80025bc <BufferReading+0x8>
	}
	dataReady=0;
 8002604:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <BufferReading+0x70>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000352 	.word	0x20000352
 8002618:	200002d0 	.word	0x200002d0
 800261c:	08007db0 	.word	0x08007db0
 8002620:	20000350 	.word	0x20000350
 8002624:	20000354 	.word	0x20000354

08002628 <uart_init_rs232>:
void uart_init_rs232(){
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800262c:	2201      	movs	r2, #1
 800262e:	4903      	ldr	r1, [pc, #12]	@ (800263c <uart_init_rs232+0x14>)
 8002630:	4803      	ldr	r0, [pc, #12]	@ (8002640 <uart_init_rs232+0x18>)
 8002632:	f003 fdb2 	bl	800619a <HAL_UART_Receive_IT>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000268 	.word	0x20000268
 8002640:	20000358 	.word	0x20000358

08002644 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4907      	ldr	r1, [pc, #28]	@ (800266c <uart_Rs232SendString+0x28>)
 8002650:	4807      	ldr	r0, [pc, #28]	@ (8002670 <uart_Rs232SendString+0x2c>)
 8002652:	f004 fe8f 	bl	8007374 <siprintf>
 8002656:	4603      	mov	r3, r0
 8002658:	b29a      	uxth	r2, r3
 800265a:	230a      	movs	r3, #10
 800265c:	4904      	ldr	r1, [pc, #16]	@ (8002670 <uart_Rs232SendString+0x2c>)
 800265e:	4805      	ldr	r0, [pc, #20]	@ (8002674 <uart_Rs232SendString+0x30>)
 8002660:	f003 fc67 	bl	8005f32 <HAL_UART_Transmit>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	08007db4 	.word	0x08007db4
 8002670:	2000026c 	.word	0x2000026c
 8002674:	20000358 	.word	0x20000358

08002678 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8002686:	4824      	ldr	r0, [pc, #144]	@ (8002718 <uart_Rs232SendNum+0xa0>)
 8002688:	f7ff ffdc 	bl	8002644 <uart_Rs232SendString>
		return;
 800268c:	e040      	b.n	8002710 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002692:	230a      	movs	r3, #10
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	e038      	b.n	800270a <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3b01      	subs	r3, #1
 800269c:	4619      	mov	r1, r3
 800269e:	200a      	movs	r0, #10
 80026a0:	f7ff f8fc 	bl	800189c <mypow>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d315      	bcc.n	80026da <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	4619      	mov	r1, r3
 80026b8:	200a      	movs	r0, #10
 80026ba:	f7ff f8ef 	bl	800189c <mypow>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4914      	ldr	r1, [pc, #80]	@ (800271c <uart_Rs232SendNum+0xa4>)
 80026cc:	4814      	ldr	r0, [pc, #80]	@ (8002720 <uart_Rs232SendNum+0xa8>)
 80026ce:	f004 fe51 	bl	8007374 <siprintf>
            uart_Rs232SendString(msg);
 80026d2:	4813      	ldr	r0, [pc, #76]	@ (8002720 <uart_Rs232SendNum+0xa8>)
 80026d4:	f7ff ffb6 	bl	8002644 <uart_Rs232SendString>
 80026d8:	e005      	b.n	80026e6 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 80026e0:	480d      	ldr	r0, [pc, #52]	@ (8002718 <uart_Rs232SendNum+0xa0>)
 80026e2:	f7ff ffaf 	bl	8002644 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	4619      	mov	r1, r3
 80026ec:	200a      	movs	r0, #10
 80026ee:	f7ff f8d5 	bl	800189c <mypow>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80026fc:	fb01 f202 	mul.w	r2, r1, r2
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3b01      	subs	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	dcc3      	bgt.n	8002698 <uart_Rs232SendNum+0x20>
    }
}
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	08007db8 	.word	0x08007db8
 800271c:	08007dbc 	.word	0x08007dbc
 8002720:	2000026c 	.word	0x2000026c

08002724 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <HAL_UART_RxCpltCallback+0x34>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10c      	bne.n	8002750 <HAL_UART_RxCpltCallback+0x2c>
		// rs232 isr
		// Store received data in ring buffer
		BufferWrite (receive_buffer1);
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_UART_RxCpltCallback+0x38>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff16 	bl	800256c <BufferWrite>
		dataReady = 1; // Set flag to indicate new data
 8002740:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <HAL_UART_RxCpltCallback+0x3c>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]



		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002746:	2201      	movs	r2, #1
 8002748:	4904      	ldr	r1, [pc, #16]	@ (800275c <HAL_UART_RxCpltCallback+0x38>)
 800274a:	4806      	ldr	r0, [pc, #24]	@ (8002764 <HAL_UART_RxCpltCallback+0x40>)
 800274c:	f003 fd25 	bl	800619a <HAL_UART_Receive_IT>
	}
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40011000 	.word	0x40011000
 800275c:	20000268 	.word	0x20000268
 8002760:	20000354 	.word	0x20000354
 8002764:	20000358 	.word	0x20000358

08002768 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 800276e:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <MX_USART1_UART_Init+0x50>)
 8002770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800279e:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <MX_USART1_UART_Init+0x4c>)
 80027a0:	f003 fb7a 	bl	8005e98 <HAL_UART_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027aa:	f7ff fc93 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000358 	.word	0x20000358
 80027b8:	40011000 	.word	0x40011000

080027bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002850 <HAL_UART_MspInit+0x94>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d134      	bne.n	8002848 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <HAL_UART_MspInit+0x98>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <HAL_UART_MspInit+0x98>)
 80027e8:	f043 0310 	orr.w	r3, r3, #16
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_UART_MspInit+0x98>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_UART_MspInit+0x98>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_UART_MspInit+0x98>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_UART_MspInit+0x98>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002816:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800281a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002828:	2307      	movs	r3, #7
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	4809      	ldr	r0, [pc, #36]	@ (8002858 <HAL_UART_MspInit+0x9c>)
 8002834:	f000 fab4 	bl	8002da0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	2025      	movs	r0, #37	@ 0x25
 800283e:	f000 f9e6 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002842:	2025      	movs	r0, #37	@ 0x25
 8002844:	f000 f9ff 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002848:	bf00      	nop
 800284a:	3728      	adds	r7, #40	@ 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40011000 	.word	0x40011000
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000

0800285c <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4413      	add	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4413      	add	r3, r2
 8002880:	b2db      	uxtb	r3, r3
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <DEC2BCD+0x44>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	08db      	lsrs	r3, r3, #3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	b258      	sxtb	r0, r3
 80028aa:	79fa      	ldrb	r2, [r7, #7]
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <DEC2BCD+0x44>)
 80028ae:	fba3 1302 	umull	r1, r3, r3, r2
 80028b2:	08d9      	lsrs	r1, r3, #3
 80028b4:	460b      	mov	r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	4303      	orrs	r3, r0
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	cccccccd 	.word	0xcccccccd

080028d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028dc:	480d      	ldr	r0, [pc, #52]	@ (8002914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028de:	490e      	ldr	r1, [pc, #56]	@ (8002918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028e0:	4a0e      	ldr	r2, [pc, #56]	@ (800291c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028f4:	4c0b      	ldr	r4, [pc, #44]	@ (8002924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002902:	f7ff fdaf 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002906:	f004 fd73 	bl	80073f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800290a:	f7ff fb13 	bl	8001f34 <main>
  bx  lr    
 800290e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800291c:	0800aea4 	.word	0x0800aea4
  ldr r2, =_sbss
 8002920:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002924:	200004e8 	.word	0x200004e8

08002928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002930:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <HAL_Init+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0d      	ldr	r2, [pc, #52]	@ (800296c <HAL_Init+0x40>)
 8002936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_Init+0x40>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <HAL_Init+0x40>)
 8002942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002948:	4b08      	ldr	r3, [pc, #32]	@ (800296c <HAL_Init+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a07      	ldr	r2, [pc, #28]	@ (800296c <HAL_Init+0x40>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002954:	2003      	movs	r0, #3
 8002956:	f000 f94f 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800295a:	200f      	movs	r0, #15
 800295c:	f000 f808 	bl	8002970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002960:	f7ff fcde 	bl	8002320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00

08002970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_InitTick+0x54>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_InitTick+0x58>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002986:	fbb3 f3f1 	udiv	r3, r3, r1
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f967 	bl	8002c62 <HAL_SYSTICK_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e00e      	b.n	80029bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d80a      	bhi.n	80029ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a4:	2200      	movs	r2, #0
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f000 f92f 	bl	8002c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b0:	4a06      	ldr	r2, [pc, #24]	@ (80029cc <HAL_InitTick+0x5c>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000038 	.word	0x20000038
 80029c8:	20000040 	.word	0x20000040
 80029cc:	2000003c 	.word	0x2000003c

080029d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_IncTick+0x20>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_IncTick+0x24>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <HAL_IncTick+0x24>)
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000040 	.word	0x20000040
 80029f4:	2000039c 	.word	0x2000039c

080029f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return uwTick;
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_GetTick+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	2000039c 	.word	0x2000039c

08002a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a18:	f7ff ffee 	bl	80029f8 <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d005      	beq.n	8002a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <HAL_Delay+0x44>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a36:	bf00      	nop
 8002a38:	f7ff ffde 	bl	80029f8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d8f7      	bhi.n	8002a38 <HAL_Delay+0x28>
  {
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000040 	.word	0x20000040

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4907      	ldr	r1, [pc, #28]	@ (8002af4 <__NVIC_EnableIRQ+0x38>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	@ (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	@ (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	@ 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	@ 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc4:	d301      	bcc.n	8002bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00f      	b.n	8002bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bca:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <SysTick_Config+0x40>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f7ff ff8e 	bl	8002af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bdc:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <SysTick_Config+0x40>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <SysTick_Config+0x40>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff29 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c20:	f7ff ff3e 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff8e 	bl	8002b4c <NVIC_EncodePriority>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff5d 	bl	8002af8 <__NVIC_SetPriority>
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff31 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffa2 	bl	8002bb4 <SysTick_Config>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff feb6 	bl	80029f8 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d008      	beq.n	8002cac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2280      	movs	r2, #128	@ 0x80
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e052      	b.n	8002d52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0216 	bic.w	r2, r2, #22
 8002cba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <HAL_DMA_Abort+0x62>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0208 	bic.w	r2, r2, #8
 8002cea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfc:	e013      	b.n	8002d26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cfe:	f7ff fe7b 	bl	80029f8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d90c      	bls.n	8002d26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2203      	movs	r2, #3
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e015      	b.n	8002d52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e4      	bne.n	8002cfe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	223f      	movs	r2, #63	@ 0x3f
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d004      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2280      	movs	r2, #128	@ 0x80
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e00c      	b.n	8002d92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2205      	movs	r2, #5
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e16b      	b.n	8003094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 815a 	bne.w	800308e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b4 	beq.w	800308e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b60      	ldr	r3, [pc, #384]	@ (80030ac <HAL_GPIO_Init+0x30c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80030ac <HAL_GPIO_Init+0x30c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f36:	4b5d      	ldr	r3, [pc, #372]	@ (80030ac <HAL_GPIO_Init+0x30c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a5b      	ldr	r2, [pc, #364]	@ (80030b0 <HAL_GPIO_Init+0x310>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_GPIO_Init+0x314>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	@ (80030b8 <HAL_GPIO_Init+0x318>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d025      	beq.n	8002fc2 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	@ (80030bc <HAL_GPIO_Init+0x31c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	@ (80030c0 <HAL_GPIO_Init+0x320>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x21a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4e      	ldr	r2, [pc, #312]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x216>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4d      	ldr	r2, [pc, #308]	@ (80030c8 <HAL_GPIO_Init+0x328>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x212>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4c      	ldr	r2, [pc, #304]	@ (80030cc <HAL_GPIO_Init+0x32c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80030d0 <HAL_GPIO_Init+0x330>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x20a>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e00e      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e00c      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e00a      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f002 0203 	and.w	r2, r2, #3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd8:	4935      	ldr	r1, [pc, #212]	@ (80030b0 <HAL_GPIO_Init+0x310>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300a:	4a32      	ldr	r2, [pc, #200]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003010:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003034:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303a:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305e:	4a1d      	ldr	r2, [pc, #116]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003088:	4a12      	ldr	r2, [pc, #72]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	f67f ae90 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021800 	.word	0x40021800
 80030d0:	40021c00 	.word	0x40021c00
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
 80030e4:	4613      	mov	r3, r2
 80030e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f4:	e003      	b.n	80030fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	619a      	str	r2, [r3, #24]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e12b      	b.n	8003376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe fa04 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	@ 0x24
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800315e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800316e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003170:	f001 fbfc 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8003174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a81      	ldr	r2, [pc, #516]	@ (8003380 <HAL_I2C_Init+0x274>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d807      	bhi.n	8003190 <HAL_I2C_Init+0x84>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a80      	ldr	r2, [pc, #512]	@ (8003384 <HAL_I2C_Init+0x278>)
 8003184:	4293      	cmp	r3, r2
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e006      	b.n	800319e <HAL_I2C_Init+0x92>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a7d      	ldr	r2, [pc, #500]	@ (8003388 <HAL_I2C_Init+0x27c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	bf94      	ite	ls
 8003198:	2301      	movls	r3, #1
 800319a:	2300      	movhi	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e7      	b.n	8003376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a78      	ldr	r2, [pc, #480]	@ (800338c <HAL_I2C_Init+0x280>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0c9b      	lsrs	r3, r3, #18
 80031b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003380 <HAL_I2C_Init+0x274>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d802      	bhi.n	80031e0 <HAL_I2C_Init+0xd4>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	e009      	b.n	80031f4 <HAL_I2C_Init+0xe8>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	4a69      	ldr	r2, [pc, #420]	@ (8003390 <HAL_I2C_Init+0x284>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	495c      	ldr	r1, [pc, #368]	@ (8003380 <HAL_I2C_Init+0x274>)
 8003210:	428b      	cmp	r3, r1
 8003212:	d819      	bhi.n	8003248 <HAL_I2C_Init+0x13c>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e59      	subs	r1, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003228:	400b      	ands	r3, r1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_I2C_Init+0x138>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e59      	subs	r1, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fbb1 f3f3 	udiv	r3, r1, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	e051      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 8003244:	2304      	movs	r3, #4
 8003246:	e04f      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d111      	bne.n	8003274 <HAL_I2C_Init+0x168>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e012      	b.n	800329a <HAL_I2C_Init+0x18e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e58      	subs	r0, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	0099      	lsls	r1, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	fbb0 f3f3 	udiv	r3, r0, r3
 800328a:	3301      	adds	r3, #1
 800328c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Init+0x196>
 800329e:	2301      	movs	r3, #1
 80032a0:	e022      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10e      	bne.n	80032c8 <HAL_I2C_Init+0x1bc>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1e58      	subs	r0, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	440b      	add	r3, r1
 80032b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c6:	e00f      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	0099      	lsls	r1, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	fbb0 f3f3 	udiv	r3, r0, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	6809      	ldr	r1, [r1, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6911      	ldr	r1, [r2, #16]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	4311      	orrs	r1, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	430b      	orrs	r3, r1
 800332a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	000186a0 	.word	0x000186a0
 8003384:	001e847f 	.word	0x001e847f
 8003388:	003d08ff 	.word	0x003d08ff
 800338c:	431bde83 	.word	0x431bde83
 8003390:	10624dd3 	.word	0x10624dd3

08003394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	460b      	mov	r3, r1
 80033a8:	813b      	strh	r3, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ae:	f7ff fb23 	bl	80029f8 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b20      	cmp	r3, #32
 80033be:	f040 80d9 	bne.w	8003574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2319      	movs	r3, #25
 80033c8:	2201      	movs	r2, #1
 80033ca:	496d      	ldr	r1, [pc, #436]	@ (8003580 <HAL_I2C_Mem_Write+0x1ec>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fc7f 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	e0cc      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Mem_Write+0x56>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0c5      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d007      	beq.n	8003410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2221      	movs	r2, #33	@ 0x21
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2240      	movs	r2, #64	@ 0x40
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003440:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a4d      	ldr	r2, [pc, #308]	@ (8003584 <HAL_I2C_Mem_Write+0x1f0>)
 8003450:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003452:	88f8      	ldrh	r0, [r7, #6]
 8003454:	893a      	ldrh	r2, [r7, #8]
 8003456:	8979      	ldrh	r1, [r7, #10]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4603      	mov	r3, r0
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fab6 	bl	80039d4 <I2C_RequestMemoryWrite>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d052      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e081      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fd00 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06b      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_I2C_Mem_Write+0x180>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d017      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1aa      	bne.n	8003472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fcec 	bl	8003efe <I2C_WaitOnBTFFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	2b04      	cmp	r3, #4
 8003532:	d107      	bne.n	8003544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e016      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	00100002 	.word	0x00100002
 8003584:	ffff0000 	.word	0xffff0000

08003588 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	@ 0x30
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	4608      	mov	r0, r1
 8003592:	4611      	mov	r1, r2
 8003594:	461a      	mov	r2, r3
 8003596:	4603      	mov	r3, r0
 8003598:	817b      	strh	r3, [r7, #10]
 800359a:	460b      	mov	r3, r1
 800359c:	813b      	strh	r3, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a2:	f7ff fa29 	bl	80029f8 <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	f040 8208 	bne.w	80039c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2319      	movs	r3, #25
 80035bc:	2201      	movs	r2, #1
 80035be:	497b      	ldr	r1, [pc, #492]	@ (80037ac <HAL_I2C_Mem_Read+0x224>)
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fb85 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
 80035ce:	e1fb      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_I2C_Mem_Read+0x56>
 80035da:	2302      	movs	r3, #2
 80035dc:	e1f4      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d007      	beq.n	8003604 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2222      	movs	r2, #34	@ 0x22
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2240      	movs	r2, #64	@ 0x40
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a5b      	ldr	r2, [pc, #364]	@ (80037b0 <HAL_I2C_Mem_Read+0x228>)
 8003644:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003646:	88f8      	ldrh	r0, [r7, #6]
 8003648:	893a      	ldrh	r2, [r7, #8]
 800364a:	8979      	ldrh	r1, [r7, #10]
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	4603      	mov	r3, r0
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fa52 	bl	8003b00 <I2C_RequestMemoryRead>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1b0      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e184      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	2b01      	cmp	r3, #1
 800369c:	d11b      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e164      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d11b      	bne.n	8003716 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	e144      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800372c:	e138      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003732:	2b03      	cmp	r3, #3
 8003734:	f200 80f1 	bhi.w	800391a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	2b01      	cmp	r3, #1
 800373e:	d123      	bne.n	8003788 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003742:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fc1b 	bl	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e139      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003786:	e10b      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	2b02      	cmp	r3, #2
 800378e:	d14e      	bne.n	800382e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003796:	2200      	movs	r2, #0
 8003798:	4906      	ldr	r1, [pc, #24]	@ (80037b4 <HAL_I2C_Mem_Read+0x22c>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa98 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e10e      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
 80037aa:	bf00      	nop
 80037ac:	00100002 	.word	0x00100002
 80037b0:	ffff0000 	.word	0xffff0000
 80037b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800382c:	e0b8      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	4966      	ldr	r1, [pc, #408]	@ (80039d0 <HAL_I2C_Mem_Read+0x448>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fa49 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0bf      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003890:	2200      	movs	r2, #0
 8003892:	494f      	ldr	r1, [pc, #316]	@ (80039d0 <HAL_I2C_Mem_Read+0x448>)
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fa1b 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e091      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003918:	e042      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fb2e 	bl	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e04c      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d118      	bne.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f aec2 	bne.w	800372e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	@ 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	00010004 	.word	0x00010004

080039d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f960 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a24:	d103      	bne.n	8003a2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e05f      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	492d      	ldr	r1, [pc, #180]	@ (8003afc <I2C_RequestMemoryWrite+0x128>)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f998 	bl	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e04c      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a70:	6a39      	ldr	r1, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fa02 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d107      	bne.n	8003a96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e02b      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa0:	893b      	ldrh	r3, [r7, #8]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	611a      	str	r2, [r3, #16]
 8003aaa:	e021      	b.n	8003af0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aac:	893b      	ldrh	r3, [r7, #8]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003abc:	6a39      	ldr	r1, [r7, #32]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f9dc 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d107      	bne.n	8003ae2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e005      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae6:	893b      	ldrh	r3, [r7, #8]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	00010002 	.word	0x00010002

08003b00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	817b      	strh	r3, [r7, #10]
 8003b12:	460b      	mov	r3, r1
 8003b14:	813b      	strh	r3, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8c2 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b60:	d103      	bne.n	8003b6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0aa      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	4952      	ldr	r1, [pc, #328]	@ (8003ccc <I2C_RequestMemoryRead+0x1cc>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f8fa 	bl	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e097      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	6a39      	ldr	r1, [r7, #32]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f964 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d107      	bne.n	8003bd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e076      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]
 8003be6:	e021      	b.n	8003c2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be8:	893b      	ldrh	r3, [r7, #8]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf8:	6a39      	ldr	r1, [r7, #32]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f93e 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d107      	bne.n	8003c1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e050      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c22:	893b      	ldrh	r3, [r7, #8]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f923 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d107      	bne.n	8003c54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e035      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f82b 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8e:	d103      	bne.n	8003c98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e013      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c9c:	897b      	ldrh	r3, [r7, #10]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	4906      	ldr	r1, [pc, #24]	@ (8003ccc <I2C_RequestMemoryRead+0x1cc>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f863 	bl	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	00010002 	.word	0x00010002

08003cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce0:	e025      	b.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d021      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fe fe85 	bl	80029f8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e023      	b.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10d      	bne.n	8003d54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	e00c      	b.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d0b6      	beq.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d8c:	e051      	b.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9c:	d123      	bne.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003db6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e046      	b.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d021      	beq.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fe fe03 	bl	80029f8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d116      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e020      	b.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10c      	bne.n	8003e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e00b      	b.n	8003e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	43da      	mvns	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4013      	ands	r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d18d      	bne.n	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e88:	e02d      	b.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f8ce 	bl	800402c <I2C_IsAcknowledgeFailed>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e02d      	b.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d021      	beq.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe fda9 	bl	80029f8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d116      	bne.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e007      	b.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef0:	2b80      	cmp	r3, #128	@ 0x80
 8003ef2:	d1ca      	bne.n	8003e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f0a:	e02d      	b.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f88d 	bl	800402c <I2C_IsAcknowledgeFailed>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e02d      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d021      	beq.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f24:	f7fe fd68 	bl	80029f8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d302      	bcc.n	8003f3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d1ca      	bne.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f8c:	e042      	b.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d119      	bne.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0210 	mvn.w	r2, #16
 8003fa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e029      	b.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd0:	f7fe fd12 	bl	80029f8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d302      	bcc.n	8003fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d116      	bne.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b40      	cmp	r3, #64	@ 0x40
 8004020:	d1b5      	bne.n	8003f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004042:	d11b      	bne.n	800407c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800404c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e267      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d075      	beq.n	8004196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040aa:	4b88      	ldr	r3, [pc, #544]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d00c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b85      	ldr	r3, [pc, #532]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d112      	bne.n	80040e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4b82      	ldr	r3, [pc, #520]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ce:	d10b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	4b7e      	ldr	r3, [pc, #504]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05b      	beq.n	8004194 <HAL_RCC_OscConfig+0x108>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d157      	bne.n	8004194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e242      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f0:	d106      	bne.n	8004100 <HAL_RCC_OscConfig+0x74>
 80040f2:	4b76      	ldr	r3, [pc, #472]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a75      	ldr	r2, [pc, #468]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01d      	b.n	800413c <HAL_RCC_OscConfig+0xb0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x98>
 800410a:	4b70      	ldr	r3, [pc, #448]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6f      	ldr	r2, [pc, #444]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b6d      	ldr	r3, [pc, #436]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6c      	ldr	r2, [pc, #432]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0xb0>
 8004124:	4b69      	ldr	r3, [pc, #420]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a68      	ldr	r2, [pc, #416]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b66      	ldr	r3, [pc, #408]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a65      	ldr	r2, [pc, #404]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800413a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fc58 	bl	80029f8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414c:	f7fe fc54 	bl	80029f8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	@ 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e207      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b5b      	ldr	r3, [pc, #364]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0xc0>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe fc44 	bl	80029f8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004174:	f7fe fc40 	bl	80029f8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	@ 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e1f3      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	4b51      	ldr	r3, [pc, #324]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0xe8>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d063      	beq.n	800426a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a2:	4b4a      	ldr	r3, [pc, #296]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b47      	ldr	r3, [pc, #284]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d11c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ba:	4b44      	ldr	r3, [pc, #272]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d116      	bne.n	80041f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c6:	4b41      	ldr	r3, [pc, #260]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_RCC_OscConfig+0x152>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e1c7      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041de:	4b3b      	ldr	r3, [pc, #236]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4937      	ldr	r1, [pc, #220]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f2:	e03a      	b.n	800426a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041fc:	4b34      	ldr	r3, [pc, #208]	@ (80042d0 <HAL_RCC_OscConfig+0x244>)
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fe fbf9 	bl	80029f8 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420a:	f7fe fbf5 	bl	80029f8 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e1a8      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004228:	4b28      	ldr	r3, [pc, #160]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4925      	ldr	r1, [pc, #148]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]
 800423c:	e015      	b.n	800426a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423e:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <HAL_RCC_OscConfig+0x244>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fe fbd8 	bl	80029f8 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424c:	f7fe fbd4 	bl	80029f8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e187      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d036      	beq.n	80042e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427e:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <HAL_RCC_OscConfig+0x248>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe fbb8 	bl	80029f8 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428c:	f7fe fbb4 	bl	80029f8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e167      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80042a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x200>
 80042aa:	e01b      	b.n	80042e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ac:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_RCC_OscConfig+0x248>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fba1 	bl	80029f8 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	e00e      	b.n	80042d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ba:	f7fe fb9d 	bl	80029f8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d907      	bls.n	80042d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e150      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
 80042cc:	40023800 	.word	0x40023800
 80042d0:	42470000 	.word	0x42470000
 80042d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1ea      	bne.n	80042ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8097 	beq.w	8004420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f6:	4b81      	ldr	r3, [pc, #516]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	4b7d      	ldr	r3, [pc, #500]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	4a7c      	ldr	r2, [pc, #496]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004310:	6413      	str	r3, [r2, #64]	@ 0x40
 8004312:	4b7a      	ldr	r3, [pc, #488]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b77      	ldr	r3, [pc, #476]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432e:	4b74      	ldr	r3, [pc, #464]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a73      	ldr	r2, [pc, #460]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fe fb5d 	bl	80029f8 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fe fb59 	bl	80029f8 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e10c      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	4b6a      	ldr	r3, [pc, #424]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x2ea>
 8004368:	4b64      	ldr	r3, [pc, #400]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436c:	4a63      	ldr	r2, [pc, #396]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6713      	str	r3, [r2, #112]	@ 0x70
 8004374:	e01c      	b.n	80043b0 <HAL_RCC_OscConfig+0x324>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b05      	cmp	r3, #5
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x30c>
 800437e:	4b5f      	ldr	r3, [pc, #380]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004382:	4a5e      	ldr	r2, [pc, #376]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004384:	f043 0304 	orr.w	r3, r3, #4
 8004388:	6713      	str	r3, [r2, #112]	@ 0x70
 800438a:	4b5c      	ldr	r3, [pc, #368]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	4a5b      	ldr	r2, [pc, #364]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	@ 0x70
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0x324>
 8004398:	4b58      	ldr	r3, [pc, #352]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439c:	4a57      	ldr	r2, [pc, #348]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a4:	4b55      	ldr	r3, [pc, #340]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	4a54      	ldr	r2, [pc, #336]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80043aa:	f023 0304 	bic.w	r3, r3, #4
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d015      	beq.n	80043e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fe fb1e 	bl	80029f8 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fe fb1a 	bl	80029f8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e0cb      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	4b49      	ldr	r3, [pc, #292]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ee      	beq.n	80043c0 <HAL_RCC_OscConfig+0x334>
 80043e2:	e014      	b.n	800440e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e4:	f7fe fb08 	bl	80029f8 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ec:	f7fe fb04 	bl	80029f8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0b5      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	4b3e      	ldr	r3, [pc, #248]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ee      	bne.n	80043ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800440e:	7dfb      	ldrb	r3, [r7, #23]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004414:	4b39      	ldr	r3, [pc, #228]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	4a38      	ldr	r2, [pc, #224]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800441e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a1 	beq.w	800456c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800442a:	4b34      	ldr	r3, [pc, #208]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b08      	cmp	r3, #8
 8004434:	d05c      	beq.n	80044f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d141      	bne.n	80044c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443e:	4b31      	ldr	r3, [pc, #196]	@ (8004504 <HAL_RCC_OscConfig+0x478>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fe fad8 	bl	80029f8 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe fad4 	bl	80029f8 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e087      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	4b27      	ldr	r3, [pc, #156]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	019b      	lsls	r3, r3, #6
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	3b01      	subs	r3, #1
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	491b      	ldr	r1, [pc, #108]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <HAL_RCC_OscConfig+0x478>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe faad 	bl	80029f8 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fe faa9 	bl	80029f8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e05c      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b4:	4b11      	ldr	r3, [pc, #68]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x416>
 80044c0:	e054      	b.n	800456c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <HAL_RCC_OscConfig+0x478>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fa96 	bl	80029f8 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe fa92 	bl	80029f8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e045      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x444>
 80044ee:	e03d      	b.n	800456c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e038      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000
 8004504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004508:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x4ec>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d028      	beq.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d121      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d11a      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800453e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004540:	4293      	cmp	r3, r2
 8004542:	d111      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	3b01      	subs	r3, #1
 8004552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800

0800457c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0cc      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004590:	4b68      	ldr	r3, [pc, #416]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d90c      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b65      	ldr	r3, [pc, #404]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b63      	ldr	r3, [pc, #396]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0b8      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d0:	4b59      	ldr	r3, [pc, #356]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a58      	ldr	r2, [pc, #352]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e8:	4b53      	ldr	r3, [pc, #332]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a52      	ldr	r2, [pc, #328]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f4:	4b50      	ldr	r3, [pc, #320]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	494d      	ldr	r1, [pc, #308]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d044      	beq.n	800469c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d119      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d003      	beq.n	800463a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004636:	2b03      	cmp	r3, #3
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b3f      	ldr	r3, [pc, #252]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e06f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464a:	4b3b      	ldr	r3, [pc, #236]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e067      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465a:	4b37      	ldr	r3, [pc, #220]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 0203 	bic.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4934      	ldr	r1, [pc, #208]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800466c:	f7fe f9c4 	bl	80029f8 <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	e00a      	b.n	800468a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004674:	f7fe f9c0 	bl	80029f8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e04f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 020c 	and.w	r2, r3, #12
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	429a      	cmp	r2, r3
 800469a:	d1eb      	bne.n	8004674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800469c:	4b25      	ldr	r3, [pc, #148]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d20c      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b22      	ldr	r3, [pc, #136]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e032      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4916      	ldr	r1, [pc, #88]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ee:	4b12      	ldr	r3, [pc, #72]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	490e      	ldr	r1, [pc, #56]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004702:	f000 f821 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004706:	4602      	mov	r2, r0
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	490a      	ldr	r1, [pc, #40]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	fa22 f303 	lsr.w	r3, r2, r3
 800471a:	4a09      	ldr	r2, [pc, #36]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800471e:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <HAL_RCC_ClockConfig+0x1c8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe f924 	bl	8002970 <HAL_InitTick>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023c00 	.word	0x40023c00
 8004738:	40023800 	.word	0x40023800
 800473c:	0800ad48 	.word	0x0800ad48
 8004740:	20000038 	.word	0x20000038
 8004744:	2000003c 	.word	0x2000003c

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800474c:	b094      	sub	sp, #80	@ 0x50
 800474e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	647b      	str	r3, [r7, #68]	@ 0x44
 8004754:	2300      	movs	r3, #0
 8004756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004758:	2300      	movs	r3, #0
 800475a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004760:	4b79      	ldr	r3, [pc, #484]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b08      	cmp	r3, #8
 800476a:	d00d      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x40>
 800476c:	2b08      	cmp	r3, #8
 800476e:	f200 80e1 	bhi.w	8004934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x34>
 8004776:	2b04      	cmp	r3, #4
 8004778:	d003      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x3a>
 800477a:	e0db      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b73      	ldr	r3, [pc, #460]	@ (800494c <HAL_RCC_GetSysClockFreq+0x204>)
 800477e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004780:	e0db      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004782:	4b73      	ldr	r3, [pc, #460]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x208>)
 8004784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004786:	e0d8      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004788:	4b6f      	ldr	r3, [pc, #444]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004790:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004792:	4b6d      	ldr	r3, [pc, #436]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d063      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479e:	4b6a      	ldr	r3, [pc, #424]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	2200      	movs	r2, #0
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047b2:	2300      	movs	r3, #0
 80047b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047ba:	4622      	mov	r2, r4
 80047bc:	462b      	mov	r3, r5
 80047be:	f04f 0000 	mov.w	r0, #0
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047cc:	0150      	lsls	r0, r2, #5
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4621      	mov	r1, r4
 80047d4:	1a51      	subs	r1, r2, r1
 80047d6:	6139      	str	r1, [r7, #16]
 80047d8:	4629      	mov	r1, r5
 80047da:	eb63 0301 	sbc.w	r3, r3, r1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ec:	4659      	mov	r1, fp
 80047ee:	018b      	lsls	r3, r1, #6
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047f6:	4651      	mov	r1, sl
 80047f8:	018a      	lsls	r2, r1, #6
 80047fa:	4651      	mov	r1, sl
 80047fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004800:	4659      	mov	r1, fp
 8004802:	eb63 0901 	sbc.w	r9, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb18 0303 	adds.w	r3, r8, r3
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	462b      	mov	r3, r5
 8004828:	eb49 0303 	adc.w	r3, r9, r3
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800483a:	4629      	mov	r1, r5
 800483c:	024b      	lsls	r3, r1, #9
 800483e:	4621      	mov	r1, r4
 8004840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004844:	4621      	mov	r1, r4
 8004846:	024a      	lsls	r2, r1, #9
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484e:	2200      	movs	r2, #0
 8004850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004858:	f7fb fd12 	bl	8000280 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004864:	e058      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004866:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	2200      	movs	r2, #0
 800486e:	4618      	mov	r0, r3
 8004870:	4611      	mov	r1, r2
 8004872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
 800487c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	0159      	lsls	r1, r3, #5
 800488e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004892:	0150      	lsls	r0, r2, #5
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4641      	mov	r1, r8
 800489a:	ebb2 0a01 	subs.w	sl, r2, r1
 800489e:	4649      	mov	r1, r9
 80048a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048b8:	ebb2 040a 	subs.w	r4, r2, sl
 80048bc:	eb63 050b 	sbc.w	r5, r3, fp
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	00eb      	lsls	r3, r5, #3
 80048ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ce:	00e2      	lsls	r2, r4, #3
 80048d0:	4614      	mov	r4, r2
 80048d2:	461d      	mov	r5, r3
 80048d4:	4643      	mov	r3, r8
 80048d6:	18e3      	adds	r3, r4, r3
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	464b      	mov	r3, r9
 80048dc:	eb45 0303 	adc.w	r3, r5, r3
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ee:	4629      	mov	r1, r5
 80048f0:	028b      	lsls	r3, r1, #10
 80048f2:	4621      	mov	r1, r4
 80048f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048f8:	4621      	mov	r1, r4
 80048fa:	028a      	lsls	r2, r1, #10
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004902:	2200      	movs	r2, #0
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	61fa      	str	r2, [r7, #28]
 8004908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490c:	f7fb fcb8 	bl	8000280 <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4613      	mov	r3, r2
 8004916:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	3301      	adds	r3, #1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800492a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004932:	e002      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <HAL_RCC_GetSysClockFreq+0x204>)
 8004936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800493a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800493c:	4618      	mov	r0, r3
 800493e:	3750      	adds	r7, #80	@ 0x50
 8004940:	46bd      	mov	sp, r7
 8004942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	00f42400 	.word	0x00f42400
 8004950:	007a1200 	.word	0x007a1200

08004954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004958:	4b03      	ldr	r3, [pc, #12]	@ (8004968 <HAL_RCC_GetHCLKFreq+0x14>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000038 	.word	0x20000038

0800496c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004970:	f7ff fff0 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b05      	ldr	r3, [pc, #20]	@ (800498c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0a9b      	lsrs	r3, r3, #10
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4903      	ldr	r1, [pc, #12]	@ (8004990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023800 	.word	0x40023800
 8004990:	0800ad58 	.word	0x0800ad58

08004994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004998:	f7ff ffdc 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0b5b      	lsrs	r3, r3, #13
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4903      	ldr	r1, [pc, #12]	@ (80049b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40023800 	.word	0x40023800
 80049b8:	0800ad58 	.word	0x0800ad58

080049bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e07b      	b.n	8004ac6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049de:	d009      	beq.n	80049f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	e005      	b.n	80049f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd fc3e 	bl	8002290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a78:	ea42 0103 	orr.w	r1, r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 0104 	and.w	r1, r3, #4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	f003 0210 	and.w	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b088      	sub	sp, #32
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_SPI_Transmit+0x22>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e126      	b.n	8004d3e <HAL_SPI_Transmit+0x270>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004af8:	f7fd ff7e 	bl	80029f8 <HAL_GetTick>
 8004afc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b12:	e10b      	b.n	8004d2c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_SPI_Transmit+0x52>
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b24:	e102      	b.n	8004d2c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b6c:	d10f      	bne.n	8004b8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d007      	beq.n	8004bac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb4:	d14b      	bne.n	8004c4e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_SPI_Transmit+0xf6>
 8004bbe:	8afb      	ldrh	r3, [r7, #22]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d13e      	bne.n	8004c42 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc8:	881a      	ldrh	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd4:	1c9a      	adds	r2, r3, #2
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004be8:	e02b      	b.n	8004c42 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d112      	bne.n	8004c1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfc:	881a      	ldrh	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	1c9a      	adds	r2, r3, #2
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c1c:	e011      	b.n	8004c42 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c1e:	f7fd feeb 	bl	80029f8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d803      	bhi.n	8004c36 <HAL_SPI_Transmit+0x168>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_Transmit+0x16e>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c40:	e074      	b.n	8004d2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1ce      	bne.n	8004bea <HAL_SPI_Transmit+0x11c>
 8004c4c:	e04c      	b.n	8004ce8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Transmit+0x18e>
 8004c56:	8afb      	ldrh	r3, [r7, #22]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d140      	bne.n	8004cde <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c82:	e02c      	b.n	8004cde <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d113      	bne.n	8004cba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cb8:	e011      	b.n	8004cde <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cba:	f7fd fe9d 	bl	80029f8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d803      	bhi.n	8004cd2 <HAL_SPI_Transmit+0x204>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d102      	bne.n	8004cd8 <HAL_SPI_Transmit+0x20a>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cdc:	e026      	b.n	8004d2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1cd      	bne.n	8004c84 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fbcb 	bl	8005488 <SPI_EndRxTxTransaction>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e000      	b.n	8004d2c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b088      	sub	sp, #32
 8004d4a:	af02      	add	r7, sp, #8
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d62:	d112      	bne.n	8004d8a <HAL_SPI_Receive+0x44>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10e      	bne.n	8004d8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f8f1 	bl	8004f68 <HAL_SPI_TransmitReceive>
 8004d86:	4603      	mov	r3, r0
 8004d88:	e0ea      	b.n	8004f60 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_SPI_Receive+0x52>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e0e3      	b.n	8004f60 <HAL_SPI_Receive+0x21a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da0:	f7fd fe2a 	bl	80029f8 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
 8004db4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004db6:	e0ca      	b.n	8004f4e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SPI_Receive+0x7e>
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dc8:	e0c1      	b.n	8004f4e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e10:	d10f      	bne.n	8004e32 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d007      	beq.n	8004e50 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d162      	bne.n	8004f1e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e58:	e02e      	b.n	8004eb8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d115      	bne.n	8004e94 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f103 020c 	add.w	r2, r3, #12
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e92:	e011      	b.n	8004eb8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e94:	f7fd fdb0 	bl	80029f8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d803      	bhi.n	8004eac <HAL_SPI_Receive+0x166>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d102      	bne.n	8004eb2 <HAL_SPI_Receive+0x16c>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004eb6:	e04a      	b.n	8004f4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1cb      	bne.n	8004e5a <HAL_SPI_Receive+0x114>
 8004ec2:	e031      	b.n	8004f28 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d113      	bne.n	8004efa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004edc:	b292      	uxth	r2, r2
 8004ede:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	1c9a      	adds	r2, r3, #2
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ef8:	e011      	b.n	8004f1e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efa:	f7fd fd7d 	bl	80029f8 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d803      	bhi.n	8004f12 <HAL_SPI_Receive+0x1cc>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d102      	bne.n	8004f18 <HAL_SPI_Receive+0x1d2>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f1c:	e017      	b.n	8004f4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1cd      	bne.n	8004ec4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa45 	bl	80053bc <SPI_EndRxTransaction>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	75fb      	strb	r3, [r7, #23]
 8004f4a:	e000      	b.n	8004f4e <HAL_SPI_Receive+0x208>
  }

error :
 8004f4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	@ 0x30
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f76:	2301      	movs	r3, #1
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x26>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e18a      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x33c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f96:	f7fd fd2f 	bl	80029f8 <HAL_GetTick>
 8004f9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fac:	887b      	ldrh	r3, [r7, #2]
 8004fae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d00f      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0x70>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fbe:	d107      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x68>
 8004fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d003      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004fd6:	e15b      	b.n	8005290 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x82>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x82>
 8004fe4:	887b      	ldrh	r3, [r7, #2]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ff0:	e14e      	b.n	8005290 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d003      	beq.n	8005006 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2205      	movs	r2, #5
 8005002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	887a      	ldrh	r2, [r7, #2]
 8005016:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	887a      	ldrh	r2, [r7, #2]
 800501c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005046:	2b40      	cmp	r3, #64	@ 0x40
 8005048:	d007      	beq.n	800505a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005062:	d178      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x10a>
 800506c:	8b7b      	ldrh	r3, [r7, #26]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d166      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	881a      	ldrh	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	1c9a      	adds	r2, r3, #2
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005096:	e053      	b.n	8005140 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d11b      	bne.n	80050de <HAL_SPI_TransmitReceive+0x176>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d016      	beq.n	80050de <HAL_SPI_TransmitReceive+0x176>
 80050b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d113      	bne.n	80050de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	881a      	ldrh	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d119      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x1b8>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d014      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	b292      	uxth	r2, r2
 8005102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800511c:	2301      	movs	r3, #1
 800511e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005120:	f7fd fc6a 	bl	80029f8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800512c:	429a      	cmp	r2, r3
 800512e:	d807      	bhi.n	8005140 <HAL_SPI_TransmitReceive+0x1d8>
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d003      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800513e:	e0a7      	b.n	8005290 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1a6      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x130>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1a1      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x130>
 8005154:	e07c      	b.n	8005250 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_SPI_TransmitReceive+0x1fc>
 800515e:	8b7b      	ldrh	r3, [r7, #26]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d16b      	bne.n	800523c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518a:	e057      	b.n	800523c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d11c      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x26c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d017      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x26c>
 80051a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d114      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	7812      	ldrb	r2, [r2, #0]
 80051b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d119      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x2ae>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d014      	beq.n	8005216 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005212:	2301      	movs	r3, #1
 8005214:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005216:	f7fd fbef 	bl	80029f8 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005222:	429a      	cmp	r2, r3
 8005224:	d803      	bhi.n	800522e <HAL_SPI_TransmitReceive+0x2c6>
 8005226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d102      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x2cc>
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800523a:	e029      	b.n	8005290 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1a2      	bne.n	800518c <HAL_SPI_TransmitReceive+0x224>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d19d      	bne.n	800518c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005252:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f917 	bl	8005488 <SPI_EndRxTxTransaction>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d006      	beq.n	800526e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800526c:	e010      	b.n	8005290 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	e000      	b.n	8005290 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800528e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80052a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3730      	adds	r7, #48	@ 0x30
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	4613      	mov	r3, r2
 80052ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052bc:	f7fd fb9c 	bl	80029f8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	4413      	add	r3, r2
 80052ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052cc:	f7fd fb94 	bl	80029f8 <HAL_GetTick>
 80052d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052d2:	4b39      	ldr	r3, [pc, #228]	@ (80053b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	015b      	lsls	r3, r3, #5
 80052d8:	0d1b      	lsrs	r3, r3, #20
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	fb02 f303 	mul.w	r3, r2, r3
 80052e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052e2:	e054      	b.n	800538e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d050      	beq.n	800538e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ec:	f7fd fb84 	bl	80029f8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d902      	bls.n	8005302 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d13d      	bne.n	800537e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800531a:	d111      	bne.n	8005340 <SPI_WaitFlagStateUntilTimeout+0x94>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005324:	d004      	beq.n	8005330 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532e:	d107      	bne.n	8005340 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800533e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005348:	d10f      	bne.n	800536a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e017      	b.n	80053ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3b01      	subs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d19b      	bne.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000038 	.word	0x20000038

080053bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d0:	d111      	bne.n	80053f6 <SPI_EndRxTransaction+0x3a>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053da:	d004      	beq.n	80053e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e4:	d107      	bne.n	80053f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053fe:	d12a      	bne.n	8005456 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005408:	d012      	beq.n	8005430 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	2180      	movs	r1, #128	@ 0x80
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff ff49 	bl	80052ac <SPI_WaitFlagStateUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02d      	beq.n	800547c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e026      	b.n	800547e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	2101      	movs	r1, #1
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff ff36 	bl	80052ac <SPI_WaitFlagStateUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01a      	beq.n	800547c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e013      	b.n	800547e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	2101      	movs	r1, #1
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff ff23 	bl	80052ac <SPI_WaitFlagStateUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e000      	b.n	800547e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <SPI_EndRxTxTransaction+0x7c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	@ (8005508 <SPI_EndRxTxTransaction+0x80>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0d5b      	lsrs	r3, r3, #21
 80054a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054b2:	d112      	bne.n	80054da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	2180      	movs	r1, #128	@ 0x80
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff fef4 	bl	80052ac <SPI_WaitFlagStateUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d016      	beq.n	80054f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e00f      	b.n	80054fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f0:	2b80      	cmp	r3, #128	@ 0x80
 80054f2:	d0f2      	beq.n	80054da <SPI_EndRxTxTransaction+0x52>
 80054f4:	e000      	b.n	80054f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80054f6:	bf00      	nop
  }

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000038 	.word	0x20000038
 8005508:	165e9f81 	.word	0x165e9f81

0800550c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e034      	b.n	800558c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7fb fed2 	bl	80012e0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3308      	adds	r3, #8
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f001 fdbc 	bl	80070c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	461a      	mov	r2, r3
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	f001 fe06 	bl	8007168 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6858      	ldr	r0, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	f001 fe3b 	bl	80071e4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	6892      	ldr	r2, [r2, #8]
 8005582:	f041 0101 	orr.w	r1, r1, #1
 8005586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e041      	b.n	800562a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc ffb0 	bl	8002520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fa96 	bl	8005b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e04e      	b.n	80056ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a23      	ldr	r2, [pc, #140]	@ (80056f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005676:	d01d      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1f      	ldr	r2, [pc, #124]	@ (80056fc <HAL_TIM_Base_Start_IT+0xc8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1e      	ldr	r2, [pc, #120]	@ (8005700 <HAL_TIM_Base_Start_IT+0xcc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <HAL_TIM_Base_Start_IT+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <HAL_TIM_Base_Start_IT+0xd4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a19      	ldr	r2, [pc, #100]	@ (800570c <HAL_TIM_Base_Start_IT+0xd8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a18      	ldr	r2, [pc, #96]	@ (8005710 <HAL_TIM_Base_Start_IT+0xdc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d111      	bne.n	80056d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d010      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0201 	orr.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d6:	e007      	b.n	80056e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40010400 	.word	0x40010400
 800570c:	40014000 	.word	0x40014000
 8005710:	40001800 	.word	0x40001800

08005714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d122      	bne.n	8005770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d11b      	bne.n	8005770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0202 	mvn.w	r2, #2
 8005740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9b5 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9a7 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9b8 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b04      	cmp	r3, #4
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b04      	cmp	r3, #4
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0204 	mvn.w	r2, #4
 8005794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f98b 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f97d 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f98e 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0208 	mvn.w	r2, #8
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2204      	movs	r2, #4
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f961 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f953 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f964 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b10      	cmp	r3, #16
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b10      	cmp	r3, #16
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0210 	mvn.w	r2, #16
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2208      	movs	r2, #8
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f937 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f929 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f93a 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10e      	bne.n	8005898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b01      	cmp	r3, #1
 8005886:	d107      	bne.n	8005898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0201 	mvn.w	r2, #1
 8005890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc fc66 	bl	8002164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a2:	2b80      	cmp	r3, #128	@ 0x80
 80058a4:	d10e      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b0:	2b80      	cmp	r3, #128	@ 0x80
 80058b2:	d107      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fae0 	bl	8005e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b40      	cmp	r3, #64	@ 0x40
 80058d0:	d10e      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058dc:	2b40      	cmp	r3, #64	@ 0x40
 80058de:	d107      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f8ff 	bl	8005aee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d10e      	bne.n	800591c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b20      	cmp	r3, #32
 800590a:	d107      	bne.n	800591c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0220 	mvn.w	r2, #32
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 faaa 	bl	8005e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIM_ConfigClockSource+0x1c>
 800593c:	2302      	movs	r3, #2
 800593e:	e0b4      	b.n	8005aaa <HAL_TIM_ConfigClockSource+0x186>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800595e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005978:	d03e      	beq.n	80059f8 <HAL_TIM_ConfigClockSource+0xd4>
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597e:	f200 8087 	bhi.w	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 8005982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005986:	f000 8086 	beq.w	8005a96 <HAL_TIM_ConfigClockSource+0x172>
 800598a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598e:	d87f      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b70      	cmp	r3, #112	@ 0x70
 8005992:	d01a      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0xa6>
 8005994:	2b70      	cmp	r3, #112	@ 0x70
 8005996:	d87b      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b60      	cmp	r3, #96	@ 0x60
 800599a:	d050      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x11a>
 800599c:	2b60      	cmp	r3, #96	@ 0x60
 800599e:	d877      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b50      	cmp	r3, #80	@ 0x50
 80059a2:	d03c      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0xfa>
 80059a4:	2b50      	cmp	r3, #80	@ 0x50
 80059a6:	d873      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b40      	cmp	r3, #64	@ 0x40
 80059aa:	d058      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x13a>
 80059ac:	2b40      	cmp	r3, #64	@ 0x40
 80059ae:	d86f      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b30      	cmp	r3, #48	@ 0x30
 80059b2:	d064      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059b4:	2b30      	cmp	r3, #48	@ 0x30
 80059b6:	d86b      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d060      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d867      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d05c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d05a      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059c8:	e062      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6899      	ldr	r1, [r3, #8]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f000 f9ad 	bl	8005d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	609a      	str	r2, [r3, #8]
      break;
 80059f6:	e04f      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6899      	ldr	r1, [r3, #8]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f000 f996 	bl	8005d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a1a:	609a      	str	r2, [r3, #8]
      break;
 8005a1c:	e03c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 f90a 	bl	8005c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2150      	movs	r1, #80	@ 0x50
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f963 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e02c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 f929 	bl	8005ca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2160      	movs	r1, #96	@ 0x60
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f953 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e01c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f000 f8ea 	bl	8005c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2140      	movs	r1, #64	@ 0x40
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f943 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005a7c:	e00c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f000 f93a 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005a8e:	e003      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
      break;
 8005a94:	e000      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a40      	ldr	r2, [pc, #256]	@ (8005c18 <TIM_Base_SetConfig+0x114>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d013      	beq.n	8005b44 <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d00f      	beq.n	8005b44 <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3d      	ldr	r2, [pc, #244]	@ (8005c1c <TIM_Base_SetConfig+0x118>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c20 <TIM_Base_SetConfig+0x11c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3b      	ldr	r2, [pc, #236]	@ (8005c24 <TIM_Base_SetConfig+0x120>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8005c28 <TIM_Base_SetConfig+0x124>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d108      	bne.n	8005b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2f      	ldr	r2, [pc, #188]	@ (8005c18 <TIM_Base_SetConfig+0x114>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02b      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b64:	d027      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2c      	ldr	r2, [pc, #176]	@ (8005c1c <TIM_Base_SetConfig+0x118>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d023      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <TIM_Base_SetConfig+0x11c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01f      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2a      	ldr	r2, [pc, #168]	@ (8005c24 <TIM_Base_SetConfig+0x120>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01b      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a29      	ldr	r2, [pc, #164]	@ (8005c28 <TIM_Base_SetConfig+0x124>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d017      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a28      	ldr	r2, [pc, #160]	@ (8005c2c <TIM_Base_SetConfig+0x128>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a27      	ldr	r2, [pc, #156]	@ (8005c30 <TIM_Base_SetConfig+0x12c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00f      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a26      	ldr	r2, [pc, #152]	@ (8005c34 <TIM_Base_SetConfig+0x130>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a25      	ldr	r2, [pc, #148]	@ (8005c38 <TIM_Base_SetConfig+0x134>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a24      	ldr	r2, [pc, #144]	@ (8005c3c <TIM_Base_SetConfig+0x138>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a23      	ldr	r2, [pc, #140]	@ (8005c40 <TIM_Base_SetConfig+0x13c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d108      	bne.n	8005bc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a0a      	ldr	r2, [pc, #40]	@ (8005c18 <TIM_Base_SetConfig+0x114>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_Base_SetConfig+0xf8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8005c28 <TIM_Base_SetConfig+0x124>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d103      	bne.n	8005c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	615a      	str	r2, [r3, #20]
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800
 8005c38:	40001800 	.word	0x40001800
 8005c3c:	40001c00 	.word	0x40001c00
 8005c40:	40002000 	.word	0x40002000

08005c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f023 0201 	bic.w	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 030a 	bic.w	r3, r3, #10
 8005c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b087      	sub	sp, #28
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0210 	bic.w	r2, r3, #16
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	031b      	lsls	r3, r3, #12
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f043 0307 	orr.w	r3, r3, #7
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e05a      	b.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a21      	ldr	r2, [pc, #132]	@ (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d022      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ddc:	d01d      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1d      	ldr	r2, [pc, #116]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d018      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1b      	ldr	r2, [pc, #108]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00e      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d009      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a17      	ldr	r2, [pc, #92]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d004      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d10c      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40010400 	.word	0x40010400
 8005e68:	40014000 	.word	0x40014000
 8005e6c:	40001800 	.word	0x40001800

08005e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e03f      	b.n	8005f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc fc7c 	bl	80027bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2224      	movs	r2, #36	@ 0x24
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fe7d 	bl	8006bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b08a      	sub	sp, #40	@ 0x28
 8005f36:	af02      	add	r7, sp, #8
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d17c      	bne.n	800604c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_Transmit+0x2c>
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e075      	b.n	800604e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_UART_Transmit+0x3e>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e06e      	b.n	800604e <HAL_UART_Transmit+0x11c>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2221      	movs	r2, #33	@ 0x21
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f86:	f7fc fd37 	bl	80029f8 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa0:	d108      	bne.n	8005fb4 <HAL_UART_Transmit+0x82>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e003      	b.n	8005fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005fc4:	e02a      	b.n	800601c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fbc1 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e036      	b.n	800604e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e007      	b.n	800600e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1cf      	bne.n	8005fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	2140      	movs	r1, #64	@ 0x40
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fb91 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e006      	b.n	800604e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e000      	b.n	800604e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800604c:	2302      	movs	r3, #2
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b08a      	sub	sp, #40	@ 0x28
 800605a:	af02      	add	r7, sp, #8
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b20      	cmp	r3, #32
 8006074:	f040 808c 	bne.w	8006190 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_UART_Receive+0x2e>
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e084      	b.n	8006192 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_UART_Receive+0x40>
 8006092:	2302      	movs	r3, #2
 8006094:	e07d      	b.n	8006192 <HAL_UART_Receive+0x13c>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2222      	movs	r2, #34	@ 0x22
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b2:	f7fc fca1 	bl	80029f8 <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060cc:	d108      	bne.n	80060e0 <HAL_UART_Receive+0x8a>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e003      	b.n	80060e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80060f0:	e043      	b.n	800617a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2120      	movs	r1, #32
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 fb2b 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e042      	b.n	8006192 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10c      	bne.n	800612c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611e:	b29a      	uxth	r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	3302      	adds	r3, #2
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e01f      	b.n	800616c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006134:	d007      	beq.n	8006146 <HAL_UART_Receive+0xf0>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_UART_Receive+0xfe>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e008      	b.n	8006166 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006160:	b2da      	uxtb	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3301      	adds	r3, #1
 800616a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1b6      	bne.n	80060f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d11d      	bne.n	80061f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_UART_Receive_IT+0x26>
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e016      	b.n	80061f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Receive_IT+0x38>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e00f      	b.n	80061f2 <HAL_UART_Receive_IT+0x58>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	461a      	mov	r2, r3
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fb24 	bl	8006834 <UART_Start_Receive_IT>
 80061ec:	4603      	mov	r3, r0
 80061ee:	e000      	b.n	80061f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006222:	2300      	movs	r3, #0
 8006224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006228:	2300      	movs	r3, #0
 800622a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800623a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <HAL_UART_IRQHandler+0x66>
 800624e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fc03 	bl	8006a66 <UART_Receive_IT>
      return;
 8006260:	e256      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80de 	beq.w	8006428 <HAL_UART_IRQHandler+0x22c>
 800626c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80d1 	beq.w	8006428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <HAL_UART_IRQHandler+0xae>
 8006292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f043 0201 	orr.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <HAL_UART_IRQHandler+0xd2>
 80062b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	f043 0202 	orr.w	r2, r3, #2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <HAL_UART_IRQHandler+0xf6>
 80062da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	f043 0204 	orr.w	r2, r3, #4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d011      	beq.n	8006322 <HAL_UART_IRQHandler+0x126>
 80062fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f043 0208 	orr.w	r2, r3, #8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 81ed 	beq.w	8006706 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_UART_IRQHandler+0x14e>
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb8e 	bl	8006a66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006354:	2b40      	cmp	r3, #64	@ 0x40
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_UART_IRQHandler+0x17a>
 800636e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d04f      	beq.n	8006416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa96 	bl	80068a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006386:	2b40      	cmp	r3, #64	@ 0x40
 8006388:	d141      	bne.n	800640e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1d9      	bne.n	800638a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d013      	beq.n	8006406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e2:	4a7d      	ldr	r2, [pc, #500]	@ (80065d8 <HAL_UART_IRQHandler+0x3dc>)
 80063e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fc fcb5 	bl	8002d5a <HAL_DMA_Abort_IT>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006404:	e00e      	b.n	8006424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f990 	bl	800672c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640c:	e00a      	b.n	8006424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f98c 	bl	800672c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006414:	e006      	b.n	8006424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f988 	bl	800672c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006422:	e170      	b.n	8006706 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	bf00      	nop
    return;
 8006426:	e16e      	b.n	8006706 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	2b01      	cmp	r3, #1
 800642e:	f040 814a 	bne.w	80066c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8143 	beq.w	80066c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 813c 	beq.w	80066c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	f040 80b4 	bne.w	80065dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8140 	beq.w	800670a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800648e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006492:	429a      	cmp	r2, r3
 8006494:	f080 8139 	bcs.w	800670a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800649e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064aa:	f000 8088 	beq.w	80065be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1d9      	bne.n	80064ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3314      	adds	r3, #20
 8006500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800650a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800651e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006522:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e1      	bne.n	80064fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3314      	adds	r3, #20
 800653c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800654c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3314      	adds	r3, #20
 8006556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800655a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800655c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e3      	bne.n	8006536 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800658c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800658e:	f023 0310 	bic.w	r3, r3, #16
 8006592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e3      	bne.n	800657c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fc fb5e 	bl	8002c7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8b6 	bl	8006740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d4:	e099      	b.n	800670a <HAL_UART_IRQHandler+0x50e>
 80065d6:	bf00      	nop
 80065d8:	0800696f 	.word	0x0800696f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 808b 	beq.w	800670e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8086 	beq.w	800670e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006626:	647a      	str	r2, [r7, #68]	@ 0x44
 8006628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800662c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e3      	bne.n	8006602 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	623b      	str	r3, [r7, #32]
   return(result);
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3314      	adds	r3, #20
 800665a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800665e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e3      	bne.n	800663a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0310 	bic.w	r3, r3, #16
 8006696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066a4:	61fa      	str	r2, [r7, #28]
 80066a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	69b9      	ldr	r1, [r7, #24]
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	617b      	str	r3, [r7, #20]
   return(result);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e3      	bne.n	8006680 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f83e 	bl	8006740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066c4:	e023      	b.n	800670e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_UART_IRQHandler+0x4ea>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f959 	bl	8006996 <UART_Transmit_IT>
    return;
 80066e4:	e014      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00e      	beq.n	8006710 <HAL_UART_IRQHandler+0x514>
 80066f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d008      	beq.n	8006710 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f999 	bl	8006a36 <UART_EndTransmit_IT>
    return;
 8006704:	e004      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
    return;
 8006706:	bf00      	nop
 8006708:	e002      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
      return;
 800670a:	bf00      	nop
 800670c:	e000      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
      return;
 800670e:	bf00      	nop
  }
}
 8006710:	37e8      	adds	r7, #232	@ 0xe8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b090      	sub	sp, #64	@ 0x40
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006768:	e050      	b.n	800680c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d04c      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <UART_WaitOnFlagUntilTimeout+0x30>
 8006778:	f7fc f93e 	bl	80029f8 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006784:	429a      	cmp	r2, r3
 8006786:	d241      	bcs.n	800680c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80067aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e5      	bne.n	8006788 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3314      	adds	r3, #20
 80067c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	613b      	str	r3, [r7, #16]
   return(result);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3314      	adds	r3, #20
 80067da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067dc:	623a      	str	r2, [r7, #32]
 80067de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	69f9      	ldr	r1, [r7, #28]
 80067e2:	6a3a      	ldr	r2, [r7, #32]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e5      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e00f      	b.n	800682c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4013      	ands	r3, r2
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	429a      	cmp	r2, r3
 8006828:	d09f      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3740      	adds	r7, #64	@ 0x40
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2222      	movs	r2, #34	@ 0x22
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006878:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695a      	ldr	r2, [r3, #20]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0201 	orr.w	r2, r2, #1
 8006888:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0220 	orr.w	r2, r2, #32
 8006898:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b095      	sub	sp, #84	@ 0x54
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80068d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e5      	bne.n	80068b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3314      	adds	r3, #20
 80068ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f023 0301 	bic.w	r3, r3, #1
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3314      	adds	r3, #20
 8006902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800690a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e5      	bne.n	80068e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691c:	2b01      	cmp	r3, #1
 800691e:	d119      	bne.n	8006954 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f023 0310 	bic.w	r3, r3, #16
 8006936:	647b      	str	r3, [r7, #68]	@ 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006940:	61ba      	str	r2, [r7, #24]
 8006942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6979      	ldr	r1, [r7, #20]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	613b      	str	r3, [r7, #16]
   return(result);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e5      	bne.n	8006920 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006962:	bf00      	nop
 8006964:	3754      	adds	r7, #84	@ 0x54
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fecf 	bl	800672c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b21      	cmp	r3, #33	@ 0x21
 80069a8:	d13e      	bne.n	8006a28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b2:	d114      	bne.n	80069de <UART_Transmit_IT+0x48>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d110      	bne.n	80069de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	1c9a      	adds	r2, r3, #2
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	621a      	str	r2, [r3, #32]
 80069dc:	e008      	b.n	80069f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6211      	str	r1, [r2, #32]
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4619      	mov	r1, r3
 80069fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10f      	bne.n	8006a24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fe5e 	bl	8006718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b08c      	sub	sp, #48	@ 0x30
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b22      	cmp	r3, #34	@ 0x22
 8006a78:	f040 80ab 	bne.w	8006bd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a84:	d117      	bne.n	8006ab6 <UART_Receive_IT+0x50>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d113      	bne.n	8006ab6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a96:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aae:	1c9a      	adds	r2, r3, #2
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ab4:	e026      	b.n	8006b04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac8:	d007      	beq.n	8006ada <UART_Receive_IT+0x74>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <UART_Receive_IT+0x82>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e008      	b.n	8006afa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4619      	mov	r1, r3
 8006b12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d15a      	bne.n	8006bce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0220 	bic.w	r2, r2, #32
 8006b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0201 	bic.w	r2, r2, #1
 8006b46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d135      	bne.n	8006bc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f023 0310 	bic.w	r3, r3, #16
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7e:	623a      	str	r2, [r7, #32]
 8006b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	69f9      	ldr	r1, [r7, #28]
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e5      	bne.n	8006b5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b10      	cmp	r3, #16
 8006b9e:	d10a      	bne.n	8006bb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff fdbf 	bl	8006740 <HAL_UARTEx_RxEventCallback>
 8006bc2:	e002      	b.n	8006bca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fb fdad 	bl	8002724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e002      	b.n	8006bd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e000      	b.n	8006bd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
  }
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3730      	adds	r7, #48	@ 0x30
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be0:	b0c0      	sub	sp, #256	@ 0x100
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf8:	68d9      	ldr	r1, [r3, #12]
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	ea40 0301 	orr.w	r3, r0, r1
 8006c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c34:	f021 010c 	bic.w	r1, r1, #12
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c42:	430b      	orrs	r3, r1
 8006c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c56:	6999      	ldr	r1, [r3, #24]
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	ea40 0301 	orr.w	r3, r0, r1
 8006c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8006ea8 <UART_SetConfig+0x2cc>)
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d005      	beq.n	8006c7c <UART_SetConfig+0xa0>
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b8d      	ldr	r3, [pc, #564]	@ (8006eac <UART_SetConfig+0x2d0>)
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d104      	bne.n	8006c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c7c:	f7fd fe8a 	bl	8004994 <HAL_RCC_GetPCLK2Freq>
 8006c80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c84:	e003      	b.n	8006c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c86:	f7fd fe71 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8006c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c98:	f040 810c 	bne.w	8006eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cae:	4622      	mov	r2, r4
 8006cb0:	462b      	mov	r3, r5
 8006cb2:	1891      	adds	r1, r2, r2
 8006cb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cb6:	415b      	adcs	r3, r3
 8006cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	eb12 0801 	adds.w	r8, r2, r1
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	eb43 0901 	adc.w	r9, r3, r1
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cde:	4690      	mov	r8, r2
 8006ce0:	4699      	mov	r9, r3
 8006ce2:	4623      	mov	r3, r4
 8006ce4:	eb18 0303 	adds.w	r3, r8, r3
 8006ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cec:	462b      	mov	r3, r5
 8006cee:	eb49 0303 	adc.w	r3, r9, r3
 8006cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	18db      	adds	r3, r3, r3
 8006d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d10:	4613      	mov	r3, r2
 8006d12:	eb42 0303 	adc.w	r3, r2, r3
 8006d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d20:	f7f9 faae 	bl	8000280 <__aeabi_uldivmod>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4b61      	ldr	r3, [pc, #388]	@ (8006eb0 <UART_SetConfig+0x2d4>)
 8006d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	011c      	lsls	r4, r3, #4
 8006d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d44:	4642      	mov	r2, r8
 8006d46:	464b      	mov	r3, r9
 8006d48:	1891      	adds	r1, r2, r2
 8006d4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d4c:	415b      	adcs	r3, r3
 8006d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d54:	4641      	mov	r1, r8
 8006d56:	eb12 0a01 	adds.w	sl, r2, r1
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	f04f 0300 	mov.w	r3, #0
 8006d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d74:	4692      	mov	sl, r2
 8006d76:	469b      	mov	fp, r3
 8006d78:	4643      	mov	r3, r8
 8006d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d82:	464b      	mov	r3, r9
 8006d84:	eb4b 0303 	adc.w	r3, fp, r3
 8006d88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006da0:	460b      	mov	r3, r1
 8006da2:	18db      	adds	r3, r3, r3
 8006da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006da6:	4613      	mov	r3, r2
 8006da8:	eb42 0303 	adc.w	r3, r2, r3
 8006dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006db6:	f7f9 fa63 	bl	8000280 <__aeabi_uldivmod>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006eb0 <UART_SetConfig+0x2d4>)
 8006dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	2264      	movs	r2, #100	@ 0x64
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	1acb      	subs	r3, r1, r3
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dd6:	4b36      	ldr	r3, [pc, #216]	@ (8006eb0 <UART_SetConfig+0x2d4>)
 8006dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006de4:	441c      	add	r4, r3
 8006de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006df0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	1891      	adds	r1, r2, r2
 8006dfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e00:	415b      	adcs	r3, r3
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e08:	4641      	mov	r1, r8
 8006e0a:	1851      	adds	r1, r2, r1
 8006e0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e0e:	4649      	mov	r1, r9
 8006e10:	414b      	adcs	r3, r1
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e20:	4659      	mov	r1, fp
 8006e22:	00cb      	lsls	r3, r1, #3
 8006e24:	4651      	mov	r1, sl
 8006e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e2a:	4651      	mov	r1, sl
 8006e2c:	00ca      	lsls	r2, r1, #3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	4603      	mov	r3, r0
 8006e34:	4642      	mov	r2, r8
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	460a      	mov	r2, r1
 8006e40:	eb42 0303 	adc.w	r3, r2, r3
 8006e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	18db      	adds	r3, r3, r3
 8006e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e62:	4613      	mov	r3, r2
 8006e64:	eb42 0303 	adc.w	r3, r2, r3
 8006e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e72:	f7f9 fa05 	bl	8000280 <__aeabi_uldivmod>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <UART_SetConfig+0x2d4>)
 8006e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	2164      	movs	r1, #100	@ 0x64
 8006e84:	fb01 f303 	mul.w	r3, r1, r3
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	3332      	adds	r3, #50	@ 0x32
 8006e8e:	4a08      	ldr	r2, [pc, #32]	@ (8006eb0 <UART_SetConfig+0x2d4>)
 8006e90:	fba2 2303 	umull	r2, r3, r2, r3
 8006e94:	095b      	lsrs	r3, r3, #5
 8006e96:	f003 0207 	and.w	r2, r3, #7
 8006e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4422      	add	r2, r4
 8006ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ea4:	e106      	b.n	80070b4 <UART_SetConfig+0x4d8>
 8006ea6:	bf00      	nop
 8006ea8:	40011000 	.word	0x40011000
 8006eac:	40011400 	.word	0x40011400
 8006eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	464b      	mov	r3, r9
 8006eca:	1891      	adds	r1, r2, r2
 8006ecc:	6239      	str	r1, [r7, #32]
 8006ece:	415b      	adcs	r3, r3
 8006ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	1854      	adds	r4, r2, r1
 8006eda:	4649      	mov	r1, r9
 8006edc:	eb43 0501 	adc.w	r5, r3, r1
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	00eb      	lsls	r3, r5, #3
 8006eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eee:	00e2      	lsls	r2, r4, #3
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	461d      	mov	r5, r3
 8006ef4:	4643      	mov	r3, r8
 8006ef6:	18e3      	adds	r3, r4, r3
 8006ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006efc:	464b      	mov	r3, r9
 8006efe:	eb45 0303 	adc.w	r3, r5, r3
 8006f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f16:	f04f 0200 	mov.w	r2, #0
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f22:	4629      	mov	r1, r5
 8006f24:	008b      	lsls	r3, r1, #2
 8006f26:	4621      	mov	r1, r4
 8006f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	008a      	lsls	r2, r1, #2
 8006f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f34:	f7f9 f9a4 	bl	8000280 <__aeabi_uldivmod>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4b60      	ldr	r3, [pc, #384]	@ (80070c0 <UART_SetConfig+0x4e4>)
 8006f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	011c      	lsls	r4, r3, #4
 8006f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	1891      	adds	r1, r2, r2
 8006f5e:	61b9      	str	r1, [r7, #24]
 8006f60:	415b      	adcs	r3, r3
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f68:	4641      	mov	r1, r8
 8006f6a:	1851      	adds	r1, r2, r1
 8006f6c:	6139      	str	r1, [r7, #16]
 8006f6e:	4649      	mov	r1, r9
 8006f70:	414b      	adcs	r3, r1
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f80:	4659      	mov	r1, fp
 8006f82:	00cb      	lsls	r3, r1, #3
 8006f84:	4651      	mov	r1, sl
 8006f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f8a:	4651      	mov	r1, sl
 8006f8c:	00ca      	lsls	r2, r1, #3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	4619      	mov	r1, r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	4642      	mov	r2, r8
 8006f96:	189b      	adds	r3, r3, r2
 8006f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f9c:	464b      	mov	r3, r9
 8006f9e:	460a      	mov	r2, r1
 8006fa0:	eb42 0303 	adc.w	r3, r2, r3
 8006fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	008b      	lsls	r3, r1, #2
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fca:	4641      	mov	r1, r8
 8006fcc:	008a      	lsls	r2, r1, #2
 8006fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fd2:	f7f9 f955 	bl	8000280 <__aeabi_uldivmod>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4b38      	ldr	r3, [pc, #224]	@ (80070c0 <UART_SetConfig+0x4e4>)
 8006fde:	fba3 2301 	umull	r2, r3, r3, r1
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	2264      	movs	r2, #100	@ 0x64
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	1acb      	subs	r3, r1, r3
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	3332      	adds	r3, #50	@ 0x32
 8006ff0:	4a33      	ldr	r2, [pc, #204]	@ (80070c0 <UART_SetConfig+0x4e4>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ffc:	441c      	add	r4, r3
 8006ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007002:	2200      	movs	r2, #0
 8007004:	673b      	str	r3, [r7, #112]	@ 0x70
 8007006:	677a      	str	r2, [r7, #116]	@ 0x74
 8007008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	1891      	adds	r1, r2, r2
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	415b      	adcs	r3, r3
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800701c:	4641      	mov	r1, r8
 800701e:	1851      	adds	r1, r2, r1
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	4649      	mov	r1, r9
 8007024:	414b      	adcs	r3, r1
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007034:	4659      	mov	r1, fp
 8007036:	00cb      	lsls	r3, r1, #3
 8007038:	4651      	mov	r1, sl
 800703a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800703e:	4651      	mov	r1, sl
 8007040:	00ca      	lsls	r2, r1, #3
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	4603      	mov	r3, r0
 8007048:	4642      	mov	r2, r8
 800704a:	189b      	adds	r3, r3, r2
 800704c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800704e:	464b      	mov	r3, r9
 8007050:	460a      	mov	r2, r1
 8007052:	eb42 0303 	adc.w	r3, r2, r3
 8007056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	663b      	str	r3, [r7, #96]	@ 0x60
 8007062:	667a      	str	r2, [r7, #100]	@ 0x64
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007070:	4649      	mov	r1, r9
 8007072:	008b      	lsls	r3, r1, #2
 8007074:	4641      	mov	r1, r8
 8007076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800707a:	4641      	mov	r1, r8
 800707c:	008a      	lsls	r2, r1, #2
 800707e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007082:	f7f9 f8fd 	bl	8000280 <__aeabi_uldivmod>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <UART_SetConfig+0x4e4>)
 800708c:	fba3 1302 	umull	r1, r3, r3, r2
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	2164      	movs	r1, #100	@ 0x64
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	3332      	adds	r3, #50	@ 0x32
 800709e:	4a08      	ldr	r2, [pc, #32]	@ (80070c0 <UART_SetConfig+0x4e4>)
 80070a0:	fba2 2303 	umull	r2, r3, r2, r3
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	f003 020f 	and.w	r2, r3, #15
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4422      	add	r2, r4
 80070b2:	609a      	str	r2, [r3, #8]
}
 80070b4:	bf00      	nop
 80070b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070ba:	46bd      	mov	sp, r7
 80070bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c0:	51eb851f 	.word	0x51eb851f

080070c4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070dc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4b20      	ldr	r3, [pc, #128]	@ (8007164 <FSMC_NORSRAM_Init+0xa0>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070ee:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80070f4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80070fa:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007100:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007106:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800710c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007112:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8007118:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800711e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007124:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800712a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8007130:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d103      	bne.n	8007148 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007146:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	fff00080 	.word	0xfff00080

08007168 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800718a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007196:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800719e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80071a6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071b0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	3b02      	subs	r3, #2
 80071b8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80071ba:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071c0:	4313      	orrs	r3, r2
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6979      	ldr	r1, [r7, #20]
 80071d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071fc:	d122      	bne.n	8007244 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007206:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4b15      	ldr	r3, [pc, #84]	@ (8007260 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800720c:	4013      	ands	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800721a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007222:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800722a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007230:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6979      	ldr	r1, [r7, #20]
 800723e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007242:	e005      	b.n	8007250 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800724c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	cff00000 	.word	0xcff00000

08007264 <atoi>:
 8007264:	220a      	movs	r2, #10
 8007266:	2100      	movs	r1, #0
 8007268:	f000 b87a 	b.w	8007360 <strtol>

0800726c <_strtol_l.constprop.0>:
 800726c:	2b24      	cmp	r3, #36	@ 0x24
 800726e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007272:	4686      	mov	lr, r0
 8007274:	4690      	mov	r8, r2
 8007276:	d801      	bhi.n	800727c <_strtol_l.constprop.0+0x10>
 8007278:	2b01      	cmp	r3, #1
 800727a:	d106      	bne.n	800728a <_strtol_l.constprop.0+0x1e>
 800727c:	f000 f8b2 	bl	80073e4 <__errno>
 8007280:	2316      	movs	r3, #22
 8007282:	6003      	str	r3, [r0, #0]
 8007284:	2000      	movs	r0, #0
 8007286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728a:	4834      	ldr	r0, [pc, #208]	@ (800735c <_strtol_l.constprop.0+0xf0>)
 800728c:	460d      	mov	r5, r1
 800728e:	462a      	mov	r2, r5
 8007290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007294:	5d06      	ldrb	r6, [r0, r4]
 8007296:	f016 0608 	ands.w	r6, r6, #8
 800729a:	d1f8      	bne.n	800728e <_strtol_l.constprop.0+0x22>
 800729c:	2c2d      	cmp	r4, #45	@ 0x2d
 800729e:	d12d      	bne.n	80072fc <_strtol_l.constprop.0+0x90>
 80072a0:	782c      	ldrb	r4, [r5, #0]
 80072a2:	2601      	movs	r6, #1
 80072a4:	1c95      	adds	r5, r2, #2
 80072a6:	f033 0210 	bics.w	r2, r3, #16
 80072aa:	d109      	bne.n	80072c0 <_strtol_l.constprop.0+0x54>
 80072ac:	2c30      	cmp	r4, #48	@ 0x30
 80072ae:	d12a      	bne.n	8007306 <_strtol_l.constprop.0+0x9a>
 80072b0:	782a      	ldrb	r2, [r5, #0]
 80072b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072b6:	2a58      	cmp	r2, #88	@ 0x58
 80072b8:	d125      	bne.n	8007306 <_strtol_l.constprop.0+0x9a>
 80072ba:	786c      	ldrb	r4, [r5, #1]
 80072bc:	2310      	movs	r3, #16
 80072be:	3502      	adds	r5, #2
 80072c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072c8:	2200      	movs	r2, #0
 80072ca:	fbbc f9f3 	udiv	r9, ip, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80072d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072d8:	2f09      	cmp	r7, #9
 80072da:	d81b      	bhi.n	8007314 <_strtol_l.constprop.0+0xa8>
 80072dc:	463c      	mov	r4, r7
 80072de:	42a3      	cmp	r3, r4
 80072e0:	dd27      	ble.n	8007332 <_strtol_l.constprop.0+0xc6>
 80072e2:	1c57      	adds	r7, r2, #1
 80072e4:	d007      	beq.n	80072f6 <_strtol_l.constprop.0+0x8a>
 80072e6:	4581      	cmp	r9, r0
 80072e8:	d320      	bcc.n	800732c <_strtol_l.constprop.0+0xc0>
 80072ea:	d101      	bne.n	80072f0 <_strtol_l.constprop.0+0x84>
 80072ec:	45a2      	cmp	sl, r4
 80072ee:	db1d      	blt.n	800732c <_strtol_l.constprop.0+0xc0>
 80072f0:	fb00 4003 	mla	r0, r0, r3, r4
 80072f4:	2201      	movs	r2, #1
 80072f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072fa:	e7eb      	b.n	80072d4 <_strtol_l.constprop.0+0x68>
 80072fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80072fe:	bf04      	itt	eq
 8007300:	782c      	ldrbeq	r4, [r5, #0]
 8007302:	1c95      	addeq	r5, r2, #2
 8007304:	e7cf      	b.n	80072a6 <_strtol_l.constprop.0+0x3a>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1da      	bne.n	80072c0 <_strtol_l.constprop.0+0x54>
 800730a:	2c30      	cmp	r4, #48	@ 0x30
 800730c:	bf0c      	ite	eq
 800730e:	2308      	moveq	r3, #8
 8007310:	230a      	movne	r3, #10
 8007312:	e7d5      	b.n	80072c0 <_strtol_l.constprop.0+0x54>
 8007314:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007318:	2f19      	cmp	r7, #25
 800731a:	d801      	bhi.n	8007320 <_strtol_l.constprop.0+0xb4>
 800731c:	3c37      	subs	r4, #55	@ 0x37
 800731e:	e7de      	b.n	80072de <_strtol_l.constprop.0+0x72>
 8007320:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007324:	2f19      	cmp	r7, #25
 8007326:	d804      	bhi.n	8007332 <_strtol_l.constprop.0+0xc6>
 8007328:	3c57      	subs	r4, #87	@ 0x57
 800732a:	e7d8      	b.n	80072de <_strtol_l.constprop.0+0x72>
 800732c:	f04f 32ff 	mov.w	r2, #4294967295
 8007330:	e7e1      	b.n	80072f6 <_strtol_l.constprop.0+0x8a>
 8007332:	1c53      	adds	r3, r2, #1
 8007334:	d108      	bne.n	8007348 <_strtol_l.constprop.0+0xdc>
 8007336:	2322      	movs	r3, #34	@ 0x22
 8007338:	f8ce 3000 	str.w	r3, [lr]
 800733c:	4660      	mov	r0, ip
 800733e:	f1b8 0f00 	cmp.w	r8, #0
 8007342:	d0a0      	beq.n	8007286 <_strtol_l.constprop.0+0x1a>
 8007344:	1e69      	subs	r1, r5, #1
 8007346:	e006      	b.n	8007356 <_strtol_l.constprop.0+0xea>
 8007348:	b106      	cbz	r6, 800734c <_strtol_l.constprop.0+0xe0>
 800734a:	4240      	negs	r0, r0
 800734c:	f1b8 0f00 	cmp.w	r8, #0
 8007350:	d099      	beq.n	8007286 <_strtol_l.constprop.0+0x1a>
 8007352:	2a00      	cmp	r2, #0
 8007354:	d1f6      	bne.n	8007344 <_strtol_l.constprop.0+0xd8>
 8007356:	f8c8 1000 	str.w	r1, [r8]
 800735a:	e794      	b.n	8007286 <_strtol_l.constprop.0+0x1a>
 800735c:	0800ad61 	.word	0x0800ad61

08007360 <strtol>:
 8007360:	4613      	mov	r3, r2
 8007362:	460a      	mov	r2, r1
 8007364:	4601      	mov	r1, r0
 8007366:	4802      	ldr	r0, [pc, #8]	@ (8007370 <strtol+0x10>)
 8007368:	6800      	ldr	r0, [r0, #0]
 800736a:	f7ff bf7f 	b.w	800726c <_strtol_l.constprop.0>
 800736e:	bf00      	nop
 8007370:	20000044 	.word	0x20000044

08007374 <siprintf>:
 8007374:	b40e      	push	{r1, r2, r3}
 8007376:	b500      	push	{lr}
 8007378:	b09c      	sub	sp, #112	@ 0x70
 800737a:	ab1d      	add	r3, sp, #116	@ 0x74
 800737c:	9002      	str	r0, [sp, #8]
 800737e:	9006      	str	r0, [sp, #24]
 8007380:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007384:	4809      	ldr	r0, [pc, #36]	@ (80073ac <siprintf+0x38>)
 8007386:	9107      	str	r1, [sp, #28]
 8007388:	9104      	str	r1, [sp, #16]
 800738a:	4909      	ldr	r1, [pc, #36]	@ (80073b0 <siprintf+0x3c>)
 800738c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007390:	9105      	str	r1, [sp, #20]
 8007392:	6800      	ldr	r0, [r0, #0]
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	a902      	add	r1, sp, #8
 8007398:	f000 f9a4 	bl	80076e4 <_svfiprintf_r>
 800739c:	9b02      	ldr	r3, [sp, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	b01c      	add	sp, #112	@ 0x70
 80073a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a8:	b003      	add	sp, #12
 80073aa:	4770      	bx	lr
 80073ac:	20000044 	.word	0x20000044
 80073b0:	ffff0208 	.word	0xffff0208

080073b4 <memset>:
 80073b4:	4402      	add	r2, r0
 80073b6:	4603      	mov	r3, r0
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d100      	bne.n	80073be <memset+0xa>
 80073bc:	4770      	bx	lr
 80073be:	f803 1b01 	strb.w	r1, [r3], #1
 80073c2:	e7f9      	b.n	80073b8 <memset+0x4>

080073c4 <strcat>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	4602      	mov	r2, r0
 80073c8:	7814      	ldrb	r4, [r2, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	3201      	adds	r2, #1
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	d1fa      	bne.n	80073c8 <strcat+0x4>
 80073d2:	3b01      	subs	r3, #1
 80073d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073dc:	2a00      	cmp	r2, #0
 80073de:	d1f9      	bne.n	80073d4 <strcat+0x10>
 80073e0:	bd10      	pop	{r4, pc}
	...

080073e4 <__errno>:
 80073e4:	4b01      	ldr	r3, [pc, #4]	@ (80073ec <__errno+0x8>)
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	20000044 	.word	0x20000044

080073f0 <__libc_init_array>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007428 <__libc_init_array+0x38>)
 80073f4:	4c0d      	ldr	r4, [pc, #52]	@ (800742c <__libc_init_array+0x3c>)
 80073f6:	1b64      	subs	r4, r4, r5
 80073f8:	10a4      	asrs	r4, r4, #2
 80073fa:	2600      	movs	r6, #0
 80073fc:	42a6      	cmp	r6, r4
 80073fe:	d109      	bne.n	8007414 <__libc_init_array+0x24>
 8007400:	4d0b      	ldr	r5, [pc, #44]	@ (8007430 <__libc_init_array+0x40>)
 8007402:	4c0c      	ldr	r4, [pc, #48]	@ (8007434 <__libc_init_array+0x44>)
 8007404:	f000 fc66 	bl	8007cd4 <_init>
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	2600      	movs	r6, #0
 800740e:	42a6      	cmp	r6, r4
 8007410:	d105      	bne.n	800741e <__libc_init_array+0x2e>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	f855 3b04 	ldr.w	r3, [r5], #4
 8007418:	4798      	blx	r3
 800741a:	3601      	adds	r6, #1
 800741c:	e7ee      	b.n	80073fc <__libc_init_array+0xc>
 800741e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007422:	4798      	blx	r3
 8007424:	3601      	adds	r6, #1
 8007426:	e7f2      	b.n	800740e <__libc_init_array+0x1e>
 8007428:	0800ae9c 	.word	0x0800ae9c
 800742c:	0800ae9c 	.word	0x0800ae9c
 8007430:	0800ae9c 	.word	0x0800ae9c
 8007434:	0800aea0 	.word	0x0800aea0

08007438 <__retarget_lock_acquire_recursive>:
 8007438:	4770      	bx	lr

0800743a <__retarget_lock_release_recursive>:
 800743a:	4770      	bx	lr

0800743c <_free_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4605      	mov	r5, r0
 8007440:	2900      	cmp	r1, #0
 8007442:	d041      	beq.n	80074c8 <_free_r+0x8c>
 8007444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007448:	1f0c      	subs	r4, r1, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	bfb8      	it	lt
 800744e:	18e4      	addlt	r4, r4, r3
 8007450:	f000 f8e0 	bl	8007614 <__malloc_lock>
 8007454:	4a1d      	ldr	r2, [pc, #116]	@ (80074cc <_free_r+0x90>)
 8007456:	6813      	ldr	r3, [r2, #0]
 8007458:	b933      	cbnz	r3, 8007468 <_free_r+0x2c>
 800745a:	6063      	str	r3, [r4, #4]
 800745c:	6014      	str	r4, [r2, #0]
 800745e:	4628      	mov	r0, r5
 8007460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007464:	f000 b8dc 	b.w	8007620 <__malloc_unlock>
 8007468:	42a3      	cmp	r3, r4
 800746a:	d908      	bls.n	800747e <_free_r+0x42>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	1821      	adds	r1, r4, r0
 8007470:	428b      	cmp	r3, r1
 8007472:	bf01      	itttt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	1809      	addeq	r1, r1, r0
 800747a:	6021      	streq	r1, [r4, #0]
 800747c:	e7ed      	b.n	800745a <_free_r+0x1e>
 800747e:	461a      	mov	r2, r3
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	b10b      	cbz	r3, 8007488 <_free_r+0x4c>
 8007484:	42a3      	cmp	r3, r4
 8007486:	d9fa      	bls.n	800747e <_free_r+0x42>
 8007488:	6811      	ldr	r1, [r2, #0]
 800748a:	1850      	adds	r0, r2, r1
 800748c:	42a0      	cmp	r0, r4
 800748e:	d10b      	bne.n	80074a8 <_free_r+0x6c>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	4401      	add	r1, r0
 8007494:	1850      	adds	r0, r2, r1
 8007496:	4283      	cmp	r3, r0
 8007498:	6011      	str	r1, [r2, #0]
 800749a:	d1e0      	bne.n	800745e <_free_r+0x22>
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	6053      	str	r3, [r2, #4]
 80074a2:	4408      	add	r0, r1
 80074a4:	6010      	str	r0, [r2, #0]
 80074a6:	e7da      	b.n	800745e <_free_r+0x22>
 80074a8:	d902      	bls.n	80074b0 <_free_r+0x74>
 80074aa:	230c      	movs	r3, #12
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	e7d6      	b.n	800745e <_free_r+0x22>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	1821      	adds	r1, r4, r0
 80074b4:	428b      	cmp	r3, r1
 80074b6:	bf04      	itt	eq
 80074b8:	6819      	ldreq	r1, [r3, #0]
 80074ba:	685b      	ldreq	r3, [r3, #4]
 80074bc:	6063      	str	r3, [r4, #4]
 80074be:	bf04      	itt	eq
 80074c0:	1809      	addeq	r1, r1, r0
 80074c2:	6021      	streq	r1, [r4, #0]
 80074c4:	6054      	str	r4, [r2, #4]
 80074c6:	e7ca      	b.n	800745e <_free_r+0x22>
 80074c8:	bd38      	pop	{r3, r4, r5, pc}
 80074ca:	bf00      	nop
 80074cc:	200004e4 	.word	0x200004e4

080074d0 <sbrk_aligned>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	4e0f      	ldr	r6, [pc, #60]	@ (8007510 <sbrk_aligned+0x40>)
 80074d4:	460c      	mov	r4, r1
 80074d6:	6831      	ldr	r1, [r6, #0]
 80074d8:	4605      	mov	r5, r0
 80074da:	b911      	cbnz	r1, 80074e2 <sbrk_aligned+0x12>
 80074dc:	f000 fba6 	bl	8007c2c <_sbrk_r>
 80074e0:	6030      	str	r0, [r6, #0]
 80074e2:	4621      	mov	r1, r4
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 fba1 	bl	8007c2c <_sbrk_r>
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	d103      	bne.n	80074f6 <sbrk_aligned+0x26>
 80074ee:	f04f 34ff 	mov.w	r4, #4294967295
 80074f2:	4620      	mov	r0, r4
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	1cc4      	adds	r4, r0, #3
 80074f8:	f024 0403 	bic.w	r4, r4, #3
 80074fc:	42a0      	cmp	r0, r4
 80074fe:	d0f8      	beq.n	80074f2 <sbrk_aligned+0x22>
 8007500:	1a21      	subs	r1, r4, r0
 8007502:	4628      	mov	r0, r5
 8007504:	f000 fb92 	bl	8007c2c <_sbrk_r>
 8007508:	3001      	adds	r0, #1
 800750a:	d1f2      	bne.n	80074f2 <sbrk_aligned+0x22>
 800750c:	e7ef      	b.n	80074ee <sbrk_aligned+0x1e>
 800750e:	bf00      	nop
 8007510:	200004e0 	.word	0x200004e0

08007514 <_malloc_r>:
 8007514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007518:	1ccd      	adds	r5, r1, #3
 800751a:	f025 0503 	bic.w	r5, r5, #3
 800751e:	3508      	adds	r5, #8
 8007520:	2d0c      	cmp	r5, #12
 8007522:	bf38      	it	cc
 8007524:	250c      	movcc	r5, #12
 8007526:	2d00      	cmp	r5, #0
 8007528:	4606      	mov	r6, r0
 800752a:	db01      	blt.n	8007530 <_malloc_r+0x1c>
 800752c:	42a9      	cmp	r1, r5
 800752e:	d904      	bls.n	800753a <_malloc_r+0x26>
 8007530:	230c      	movs	r3, #12
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	2000      	movs	r0, #0
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007610 <_malloc_r+0xfc>
 800753e:	f000 f869 	bl	8007614 <__malloc_lock>
 8007542:	f8d8 3000 	ldr.w	r3, [r8]
 8007546:	461c      	mov	r4, r3
 8007548:	bb44      	cbnz	r4, 800759c <_malloc_r+0x88>
 800754a:	4629      	mov	r1, r5
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff ffbf 	bl	80074d0 <sbrk_aligned>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	4604      	mov	r4, r0
 8007556:	d158      	bne.n	800760a <_malloc_r+0xf6>
 8007558:	f8d8 4000 	ldr.w	r4, [r8]
 800755c:	4627      	mov	r7, r4
 800755e:	2f00      	cmp	r7, #0
 8007560:	d143      	bne.n	80075ea <_malloc_r+0xd6>
 8007562:	2c00      	cmp	r4, #0
 8007564:	d04b      	beq.n	80075fe <_malloc_r+0xea>
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	4639      	mov	r1, r7
 800756a:	4630      	mov	r0, r6
 800756c:	eb04 0903 	add.w	r9, r4, r3
 8007570:	f000 fb5c 	bl	8007c2c <_sbrk_r>
 8007574:	4581      	cmp	r9, r0
 8007576:	d142      	bne.n	80075fe <_malloc_r+0xea>
 8007578:	6821      	ldr	r1, [r4, #0]
 800757a:	1a6d      	subs	r5, r5, r1
 800757c:	4629      	mov	r1, r5
 800757e:	4630      	mov	r0, r6
 8007580:	f7ff ffa6 	bl	80074d0 <sbrk_aligned>
 8007584:	3001      	adds	r0, #1
 8007586:	d03a      	beq.n	80075fe <_malloc_r+0xea>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	442b      	add	r3, r5
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	f8d8 3000 	ldr.w	r3, [r8]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	bb62      	cbnz	r2, 80075f0 <_malloc_r+0xdc>
 8007596:	f8c8 7000 	str.w	r7, [r8]
 800759a:	e00f      	b.n	80075bc <_malloc_r+0xa8>
 800759c:	6822      	ldr	r2, [r4, #0]
 800759e:	1b52      	subs	r2, r2, r5
 80075a0:	d420      	bmi.n	80075e4 <_malloc_r+0xd0>
 80075a2:	2a0b      	cmp	r2, #11
 80075a4:	d917      	bls.n	80075d6 <_malloc_r+0xc2>
 80075a6:	1961      	adds	r1, r4, r5
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	6025      	str	r5, [r4, #0]
 80075ac:	bf18      	it	ne
 80075ae:	6059      	strne	r1, [r3, #4]
 80075b0:	6863      	ldr	r3, [r4, #4]
 80075b2:	bf08      	it	eq
 80075b4:	f8c8 1000 	streq.w	r1, [r8]
 80075b8:	5162      	str	r2, [r4, r5]
 80075ba:	604b      	str	r3, [r1, #4]
 80075bc:	4630      	mov	r0, r6
 80075be:	f000 f82f 	bl	8007620 <__malloc_unlock>
 80075c2:	f104 000b 	add.w	r0, r4, #11
 80075c6:	1d23      	adds	r3, r4, #4
 80075c8:	f020 0007 	bic.w	r0, r0, #7
 80075cc:	1ac2      	subs	r2, r0, r3
 80075ce:	bf1c      	itt	ne
 80075d0:	1a1b      	subne	r3, r3, r0
 80075d2:	50a3      	strne	r3, [r4, r2]
 80075d4:	e7af      	b.n	8007536 <_malloc_r+0x22>
 80075d6:	6862      	ldr	r2, [r4, #4]
 80075d8:	42a3      	cmp	r3, r4
 80075da:	bf0c      	ite	eq
 80075dc:	f8c8 2000 	streq.w	r2, [r8]
 80075e0:	605a      	strne	r2, [r3, #4]
 80075e2:	e7eb      	b.n	80075bc <_malloc_r+0xa8>
 80075e4:	4623      	mov	r3, r4
 80075e6:	6864      	ldr	r4, [r4, #4]
 80075e8:	e7ae      	b.n	8007548 <_malloc_r+0x34>
 80075ea:	463c      	mov	r4, r7
 80075ec:	687f      	ldr	r7, [r7, #4]
 80075ee:	e7b6      	b.n	800755e <_malloc_r+0x4a>
 80075f0:	461a      	mov	r2, r3
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d1fb      	bne.n	80075f0 <_malloc_r+0xdc>
 80075f8:	2300      	movs	r3, #0
 80075fa:	6053      	str	r3, [r2, #4]
 80075fc:	e7de      	b.n	80075bc <_malloc_r+0xa8>
 80075fe:	230c      	movs	r3, #12
 8007600:	6033      	str	r3, [r6, #0]
 8007602:	4630      	mov	r0, r6
 8007604:	f000 f80c 	bl	8007620 <__malloc_unlock>
 8007608:	e794      	b.n	8007534 <_malloc_r+0x20>
 800760a:	6005      	str	r5, [r0, #0]
 800760c:	e7d6      	b.n	80075bc <_malloc_r+0xa8>
 800760e:	bf00      	nop
 8007610:	200004e4 	.word	0x200004e4

08007614 <__malloc_lock>:
 8007614:	4801      	ldr	r0, [pc, #4]	@ (800761c <__malloc_lock+0x8>)
 8007616:	f7ff bf0f 	b.w	8007438 <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	200004dc 	.word	0x200004dc

08007620 <__malloc_unlock>:
 8007620:	4801      	ldr	r0, [pc, #4]	@ (8007628 <__malloc_unlock+0x8>)
 8007622:	f7ff bf0a 	b.w	800743a <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	200004dc 	.word	0x200004dc

0800762c <__ssputs_r>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	688e      	ldr	r6, [r1, #8]
 8007632:	461f      	mov	r7, r3
 8007634:	42be      	cmp	r6, r7
 8007636:	680b      	ldr	r3, [r1, #0]
 8007638:	4682      	mov	sl, r0
 800763a:	460c      	mov	r4, r1
 800763c:	4690      	mov	r8, r2
 800763e:	d82d      	bhi.n	800769c <__ssputs_r+0x70>
 8007640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007648:	d026      	beq.n	8007698 <__ssputs_r+0x6c>
 800764a:	6965      	ldr	r5, [r4, #20]
 800764c:	6909      	ldr	r1, [r1, #16]
 800764e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007652:	eba3 0901 	sub.w	r9, r3, r1
 8007656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800765a:	1c7b      	adds	r3, r7, #1
 800765c:	444b      	add	r3, r9
 800765e:	106d      	asrs	r5, r5, #1
 8007660:	429d      	cmp	r5, r3
 8007662:	bf38      	it	cc
 8007664:	461d      	movcc	r5, r3
 8007666:	0553      	lsls	r3, r2, #21
 8007668:	d527      	bpl.n	80076ba <__ssputs_r+0x8e>
 800766a:	4629      	mov	r1, r5
 800766c:	f7ff ff52 	bl	8007514 <_malloc_r>
 8007670:	4606      	mov	r6, r0
 8007672:	b360      	cbz	r0, 80076ce <__ssputs_r+0xa2>
 8007674:	6921      	ldr	r1, [r4, #16]
 8007676:	464a      	mov	r2, r9
 8007678:	f000 fae8 	bl	8007c4c <memcpy>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	6126      	str	r6, [r4, #16]
 800768a:	6165      	str	r5, [r4, #20]
 800768c:	444e      	add	r6, r9
 800768e:	eba5 0509 	sub.w	r5, r5, r9
 8007692:	6026      	str	r6, [r4, #0]
 8007694:	60a5      	str	r5, [r4, #8]
 8007696:	463e      	mov	r6, r7
 8007698:	42be      	cmp	r6, r7
 800769a:	d900      	bls.n	800769e <__ssputs_r+0x72>
 800769c:	463e      	mov	r6, r7
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	4632      	mov	r2, r6
 80076a2:	4641      	mov	r1, r8
 80076a4:	f000 faa8 	bl	8007bf8 <memmove>
 80076a8:	68a3      	ldr	r3, [r4, #8]
 80076aa:	1b9b      	subs	r3, r3, r6
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	4433      	add	r3, r6
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	2000      	movs	r0, #0
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	462a      	mov	r2, r5
 80076bc:	f000 fad4 	bl	8007c68 <_realloc_r>
 80076c0:	4606      	mov	r6, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d1e0      	bne.n	8007688 <__ssputs_r+0x5c>
 80076c6:	6921      	ldr	r1, [r4, #16]
 80076c8:	4650      	mov	r0, sl
 80076ca:	f7ff feb7 	bl	800743c <_free_r>
 80076ce:	230c      	movs	r3, #12
 80076d0:	f8ca 3000 	str.w	r3, [sl]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	e7e9      	b.n	80076b6 <__ssputs_r+0x8a>
	...

080076e4 <_svfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4698      	mov	r8, r3
 80076ea:	898b      	ldrh	r3, [r1, #12]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	b09d      	sub	sp, #116	@ 0x74
 80076f0:	4607      	mov	r7, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	4614      	mov	r4, r2
 80076f6:	d510      	bpl.n	800771a <_svfiprintf_r+0x36>
 80076f8:	690b      	ldr	r3, [r1, #16]
 80076fa:	b973      	cbnz	r3, 800771a <_svfiprintf_r+0x36>
 80076fc:	2140      	movs	r1, #64	@ 0x40
 80076fe:	f7ff ff09 	bl	8007514 <_malloc_r>
 8007702:	6028      	str	r0, [r5, #0]
 8007704:	6128      	str	r0, [r5, #16]
 8007706:	b930      	cbnz	r0, 8007716 <_svfiprintf_r+0x32>
 8007708:	230c      	movs	r3, #12
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	b01d      	add	sp, #116	@ 0x74
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	2340      	movs	r3, #64	@ 0x40
 8007718:	616b      	str	r3, [r5, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	9309      	str	r3, [sp, #36]	@ 0x24
 800771e:	2320      	movs	r3, #32
 8007720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007724:	f8cd 800c 	str.w	r8, [sp, #12]
 8007728:	2330      	movs	r3, #48	@ 0x30
 800772a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078c8 <_svfiprintf_r+0x1e4>
 800772e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007732:	f04f 0901 	mov.w	r9, #1
 8007736:	4623      	mov	r3, r4
 8007738:	469a      	mov	sl, r3
 800773a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773e:	b10a      	cbz	r2, 8007744 <_svfiprintf_r+0x60>
 8007740:	2a25      	cmp	r2, #37	@ 0x25
 8007742:	d1f9      	bne.n	8007738 <_svfiprintf_r+0x54>
 8007744:	ebba 0b04 	subs.w	fp, sl, r4
 8007748:	d00b      	beq.n	8007762 <_svfiprintf_r+0x7e>
 800774a:	465b      	mov	r3, fp
 800774c:	4622      	mov	r2, r4
 800774e:	4629      	mov	r1, r5
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ff6b 	bl	800762c <__ssputs_r>
 8007756:	3001      	adds	r0, #1
 8007758:	f000 80a7 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800775c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800775e:	445a      	add	r2, fp
 8007760:	9209      	str	r2, [sp, #36]	@ 0x24
 8007762:	f89a 3000 	ldrb.w	r3, [sl]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 809f 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800776c:	2300      	movs	r3, #0
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007776:	f10a 0a01 	add.w	sl, sl, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007782:	931a      	str	r3, [sp, #104]	@ 0x68
 8007784:	4654      	mov	r4, sl
 8007786:	2205      	movs	r2, #5
 8007788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778c:	484e      	ldr	r0, [pc, #312]	@ (80078c8 <_svfiprintf_r+0x1e4>)
 800778e:	f7f8 fd27 	bl	80001e0 <memchr>
 8007792:	9a04      	ldr	r2, [sp, #16]
 8007794:	b9d8      	cbnz	r0, 80077ce <_svfiprintf_r+0xea>
 8007796:	06d0      	lsls	r0, r2, #27
 8007798:	bf44      	itt	mi
 800779a:	2320      	movmi	r3, #32
 800779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a0:	0711      	lsls	r1, r2, #28
 80077a2:	bf44      	itt	mi
 80077a4:	232b      	movmi	r3, #43	@ 0x2b
 80077a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077aa:	f89a 3000 	ldrb.w	r3, [sl]
 80077ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b0:	d015      	beq.n	80077de <_svfiprintf_r+0xfa>
 80077b2:	9a07      	ldr	r2, [sp, #28]
 80077b4:	4654      	mov	r4, sl
 80077b6:	2000      	movs	r0, #0
 80077b8:	f04f 0c0a 	mov.w	ip, #10
 80077bc:	4621      	mov	r1, r4
 80077be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c2:	3b30      	subs	r3, #48	@ 0x30
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d94b      	bls.n	8007860 <_svfiprintf_r+0x17c>
 80077c8:	b1b0      	cbz	r0, 80077f8 <_svfiprintf_r+0x114>
 80077ca:	9207      	str	r2, [sp, #28]
 80077cc:	e014      	b.n	80077f8 <_svfiprintf_r+0x114>
 80077ce:	eba0 0308 	sub.w	r3, r0, r8
 80077d2:	fa09 f303 	lsl.w	r3, r9, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	46a2      	mov	sl, r4
 80077dc:	e7d2      	b.n	8007784 <_svfiprintf_r+0xa0>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	1d19      	adds	r1, r3, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	9103      	str	r1, [sp, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfbb      	ittet	lt
 80077ea:	425b      	neglt	r3, r3
 80077ec:	f042 0202 	orrlt.w	r2, r2, #2
 80077f0:	9307      	strge	r3, [sp, #28]
 80077f2:	9307      	strlt	r3, [sp, #28]
 80077f4:	bfb8      	it	lt
 80077f6:	9204      	strlt	r2, [sp, #16]
 80077f8:	7823      	ldrb	r3, [r4, #0]
 80077fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80077fc:	d10a      	bne.n	8007814 <_svfiprintf_r+0x130>
 80077fe:	7863      	ldrb	r3, [r4, #1]
 8007800:	2b2a      	cmp	r3, #42	@ 0x2a
 8007802:	d132      	bne.n	800786a <_svfiprintf_r+0x186>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1d1a      	adds	r2, r3, #4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	9203      	str	r2, [sp, #12]
 800780c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007810:	3402      	adds	r4, #2
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80078d8 <_svfiprintf_r+0x1f4>
 8007818:	7821      	ldrb	r1, [r4, #0]
 800781a:	2203      	movs	r2, #3
 800781c:	4650      	mov	r0, sl
 800781e:	f7f8 fcdf 	bl	80001e0 <memchr>
 8007822:	b138      	cbz	r0, 8007834 <_svfiprintf_r+0x150>
 8007824:	9b04      	ldr	r3, [sp, #16]
 8007826:	eba0 000a 	sub.w	r0, r0, sl
 800782a:	2240      	movs	r2, #64	@ 0x40
 800782c:	4082      	lsls	r2, r0
 800782e:	4313      	orrs	r3, r2
 8007830:	3401      	adds	r4, #1
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	4824      	ldr	r0, [pc, #144]	@ (80078cc <_svfiprintf_r+0x1e8>)
 800783a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800783e:	2206      	movs	r2, #6
 8007840:	f7f8 fcce 	bl	80001e0 <memchr>
 8007844:	2800      	cmp	r0, #0
 8007846:	d036      	beq.n	80078b6 <_svfiprintf_r+0x1d2>
 8007848:	4b21      	ldr	r3, [pc, #132]	@ (80078d0 <_svfiprintf_r+0x1ec>)
 800784a:	bb1b      	cbnz	r3, 8007894 <_svfiprintf_r+0x1b0>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	3307      	adds	r3, #7
 8007850:	f023 0307 	bic.w	r3, r3, #7
 8007854:	3308      	adds	r3, #8
 8007856:	9303      	str	r3, [sp, #12]
 8007858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785a:	4433      	add	r3, r6
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	e76a      	b.n	8007736 <_svfiprintf_r+0x52>
 8007860:	fb0c 3202 	mla	r2, ip, r2, r3
 8007864:	460c      	mov	r4, r1
 8007866:	2001      	movs	r0, #1
 8007868:	e7a8      	b.n	80077bc <_svfiprintf_r+0xd8>
 800786a:	2300      	movs	r3, #0
 800786c:	3401      	adds	r4, #1
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	4619      	mov	r1, r3
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4620      	mov	r0, r4
 8007878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787c:	3a30      	subs	r2, #48	@ 0x30
 800787e:	2a09      	cmp	r2, #9
 8007880:	d903      	bls.n	800788a <_svfiprintf_r+0x1a6>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0c6      	beq.n	8007814 <_svfiprintf_r+0x130>
 8007886:	9105      	str	r1, [sp, #20]
 8007888:	e7c4      	b.n	8007814 <_svfiprintf_r+0x130>
 800788a:	fb0c 2101 	mla	r1, ip, r1, r2
 800788e:	4604      	mov	r4, r0
 8007890:	2301      	movs	r3, #1
 8007892:	e7f0      	b.n	8007876 <_svfiprintf_r+0x192>
 8007894:	ab03      	add	r3, sp, #12
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	462a      	mov	r2, r5
 800789a:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <_svfiprintf_r+0x1f0>)
 800789c:	a904      	add	r1, sp, #16
 800789e:	4638      	mov	r0, r7
 80078a0:	f3af 8000 	nop.w
 80078a4:	1c42      	adds	r2, r0, #1
 80078a6:	4606      	mov	r6, r0
 80078a8:	d1d6      	bne.n	8007858 <_svfiprintf_r+0x174>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	065b      	lsls	r3, r3, #25
 80078ae:	f53f af2d 	bmi.w	800770c <_svfiprintf_r+0x28>
 80078b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078b4:	e72c      	b.n	8007710 <_svfiprintf_r+0x2c>
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	462a      	mov	r2, r5
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <_svfiprintf_r+0x1f0>)
 80078be:	a904      	add	r1, sp, #16
 80078c0:	4638      	mov	r0, r7
 80078c2:	f000 f879 	bl	80079b8 <_printf_i>
 80078c6:	e7ed      	b.n	80078a4 <_svfiprintf_r+0x1c0>
 80078c8:	0800ae61 	.word	0x0800ae61
 80078cc:	0800ae6b 	.word	0x0800ae6b
 80078d0:	00000000 	.word	0x00000000
 80078d4:	0800762d 	.word	0x0800762d
 80078d8:	0800ae67 	.word	0x0800ae67

080078dc <_printf_common>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	4616      	mov	r6, r2
 80078e2:	4698      	mov	r8, r3
 80078e4:	688a      	ldr	r2, [r1, #8]
 80078e6:	690b      	ldr	r3, [r1, #16]
 80078e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bfb8      	it	lt
 80078f0:	4613      	movlt	r3, r2
 80078f2:	6033      	str	r3, [r6, #0]
 80078f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078f8:	4607      	mov	r7, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	b10a      	cbz	r2, 8007902 <_printf_common+0x26>
 80078fe:	3301      	adds	r3, #1
 8007900:	6033      	str	r3, [r6, #0]
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	0699      	lsls	r1, r3, #26
 8007906:	bf42      	ittt	mi
 8007908:	6833      	ldrmi	r3, [r6, #0]
 800790a:	3302      	addmi	r3, #2
 800790c:	6033      	strmi	r3, [r6, #0]
 800790e:	6825      	ldr	r5, [r4, #0]
 8007910:	f015 0506 	ands.w	r5, r5, #6
 8007914:	d106      	bne.n	8007924 <_printf_common+0x48>
 8007916:	f104 0a19 	add.w	sl, r4, #25
 800791a:	68e3      	ldr	r3, [r4, #12]
 800791c:	6832      	ldr	r2, [r6, #0]
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc26      	bgt.n	8007972 <_printf_common+0x96>
 8007924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	3b00      	subs	r3, #0
 800792c:	bf18      	it	ne
 800792e:	2301      	movne	r3, #1
 8007930:	0692      	lsls	r2, r2, #26
 8007932:	d42b      	bmi.n	800798c <_printf_common+0xb0>
 8007934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007938:	4641      	mov	r1, r8
 800793a:	4638      	mov	r0, r7
 800793c:	47c8      	blx	r9
 800793e:	3001      	adds	r0, #1
 8007940:	d01e      	beq.n	8007980 <_printf_common+0xa4>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	f003 0306 	and.w	r3, r3, #6
 800794a:	2b04      	cmp	r3, #4
 800794c:	bf02      	ittt	eq
 800794e:	68e5      	ldreq	r5, [r4, #12]
 8007950:	6833      	ldreq	r3, [r6, #0]
 8007952:	1aed      	subeq	r5, r5, r3
 8007954:	68a3      	ldr	r3, [r4, #8]
 8007956:	bf0c      	ite	eq
 8007958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800795c:	2500      	movne	r5, #0
 800795e:	4293      	cmp	r3, r2
 8007960:	bfc4      	itt	gt
 8007962:	1a9b      	subgt	r3, r3, r2
 8007964:	18ed      	addgt	r5, r5, r3
 8007966:	2600      	movs	r6, #0
 8007968:	341a      	adds	r4, #26
 800796a:	42b5      	cmp	r5, r6
 800796c:	d11a      	bne.n	80079a4 <_printf_common+0xc8>
 800796e:	2000      	movs	r0, #0
 8007970:	e008      	b.n	8007984 <_printf_common+0xa8>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4641      	mov	r1, r8
 8007978:	4638      	mov	r0, r7
 800797a:	47c8      	blx	r9
 800797c:	3001      	adds	r0, #1
 800797e:	d103      	bne.n	8007988 <_printf_common+0xac>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007988:	3501      	adds	r5, #1
 800798a:	e7c6      	b.n	800791a <_printf_common+0x3e>
 800798c:	18e1      	adds	r1, r4, r3
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	2030      	movs	r0, #48	@ 0x30
 8007992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007996:	4422      	add	r2, r4
 8007998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800799c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079a0:	3302      	adds	r3, #2
 80079a2:	e7c7      	b.n	8007934 <_printf_common+0x58>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4622      	mov	r2, r4
 80079a8:	4641      	mov	r1, r8
 80079aa:	4638      	mov	r0, r7
 80079ac:	47c8      	blx	r9
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0e6      	beq.n	8007980 <_printf_common+0xa4>
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7d9      	b.n	800796a <_printf_common+0x8e>
	...

080079b8 <_printf_i>:
 80079b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	7e0f      	ldrb	r7, [r1, #24]
 80079be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079c0:	2f78      	cmp	r7, #120	@ 0x78
 80079c2:	4691      	mov	r9, r2
 80079c4:	4680      	mov	r8, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	469a      	mov	sl, r3
 80079ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079ce:	d807      	bhi.n	80079e0 <_printf_i+0x28>
 80079d0:	2f62      	cmp	r7, #98	@ 0x62
 80079d2:	d80a      	bhi.n	80079ea <_printf_i+0x32>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	f000 80d2 	beq.w	8007b7e <_printf_i+0x1c6>
 80079da:	2f58      	cmp	r7, #88	@ 0x58
 80079dc:	f000 80b9 	beq.w	8007b52 <_printf_i+0x19a>
 80079e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079e8:	e03a      	b.n	8007a60 <_printf_i+0xa8>
 80079ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079ee:	2b15      	cmp	r3, #21
 80079f0:	d8f6      	bhi.n	80079e0 <_printf_i+0x28>
 80079f2:	a101      	add	r1, pc, #4	@ (adr r1, 80079f8 <_printf_i+0x40>)
 80079f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a65 	.word	0x08007a65
 8007a00:	080079e1 	.word	0x080079e1
 8007a04:	080079e1 	.word	0x080079e1
 8007a08:	080079e1 	.word	0x080079e1
 8007a0c:	080079e1 	.word	0x080079e1
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	080079e1 	.word	0x080079e1
 8007a18:	080079e1 	.word	0x080079e1
 8007a1c:	080079e1 	.word	0x080079e1
 8007a20:	080079e1 	.word	0x080079e1
 8007a24:	08007b65 	.word	0x08007b65
 8007a28:	08007a8f 	.word	0x08007a8f
 8007a2c:	08007b1f 	.word	0x08007b1f
 8007a30:	080079e1 	.word	0x080079e1
 8007a34:	080079e1 	.word	0x080079e1
 8007a38:	08007b87 	.word	0x08007b87
 8007a3c:	080079e1 	.word	0x080079e1
 8007a40:	08007a8f 	.word	0x08007a8f
 8007a44:	080079e1 	.word	0x080079e1
 8007a48:	080079e1 	.word	0x080079e1
 8007a4c:	08007b27 	.word	0x08007b27
 8007a50:	6833      	ldr	r3, [r6, #0]
 8007a52:	1d1a      	adds	r2, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6032      	str	r2, [r6, #0]
 8007a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a60:	2301      	movs	r3, #1
 8007a62:	e09d      	b.n	8007ba0 <_printf_i+0x1e8>
 8007a64:	6833      	ldr	r3, [r6, #0]
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	1d19      	adds	r1, r3, #4
 8007a6a:	6031      	str	r1, [r6, #0]
 8007a6c:	0606      	lsls	r6, r0, #24
 8007a6e:	d501      	bpl.n	8007a74 <_printf_i+0xbc>
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	e003      	b.n	8007a7c <_printf_i+0xc4>
 8007a74:	0645      	lsls	r5, r0, #25
 8007a76:	d5fb      	bpl.n	8007a70 <_printf_i+0xb8>
 8007a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	da03      	bge.n	8007a88 <_printf_i+0xd0>
 8007a80:	232d      	movs	r3, #45	@ 0x2d
 8007a82:	426d      	negs	r5, r5
 8007a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a88:	4859      	ldr	r0, [pc, #356]	@ (8007bf0 <_printf_i+0x238>)
 8007a8a:	230a      	movs	r3, #10
 8007a8c:	e011      	b.n	8007ab2 <_printf_i+0xfa>
 8007a8e:	6821      	ldr	r1, [r4, #0]
 8007a90:	6833      	ldr	r3, [r6, #0]
 8007a92:	0608      	lsls	r0, r1, #24
 8007a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a98:	d402      	bmi.n	8007aa0 <_printf_i+0xe8>
 8007a9a:	0649      	lsls	r1, r1, #25
 8007a9c:	bf48      	it	mi
 8007a9e:	b2ad      	uxthmi	r5, r5
 8007aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007aa2:	4853      	ldr	r0, [pc, #332]	@ (8007bf0 <_printf_i+0x238>)
 8007aa4:	6033      	str	r3, [r6, #0]
 8007aa6:	bf14      	ite	ne
 8007aa8:	230a      	movne	r3, #10
 8007aaa:	2308      	moveq	r3, #8
 8007aac:	2100      	movs	r1, #0
 8007aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ab2:	6866      	ldr	r6, [r4, #4]
 8007ab4:	60a6      	str	r6, [r4, #8]
 8007ab6:	2e00      	cmp	r6, #0
 8007ab8:	bfa2      	ittt	ge
 8007aba:	6821      	ldrge	r1, [r4, #0]
 8007abc:	f021 0104 	bicge.w	r1, r1, #4
 8007ac0:	6021      	strge	r1, [r4, #0]
 8007ac2:	b90d      	cbnz	r5, 8007ac8 <_printf_i+0x110>
 8007ac4:	2e00      	cmp	r6, #0
 8007ac6:	d04b      	beq.n	8007b60 <_printf_i+0x1a8>
 8007ac8:	4616      	mov	r6, r2
 8007aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ace:	fb03 5711 	mls	r7, r3, r1, r5
 8007ad2:	5dc7      	ldrb	r7, [r0, r7]
 8007ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ad8:	462f      	mov	r7, r5
 8007ada:	42bb      	cmp	r3, r7
 8007adc:	460d      	mov	r5, r1
 8007ade:	d9f4      	bls.n	8007aca <_printf_i+0x112>
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d10b      	bne.n	8007afc <_printf_i+0x144>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	07df      	lsls	r7, r3, #31
 8007ae8:	d508      	bpl.n	8007afc <_printf_i+0x144>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	6861      	ldr	r1, [r4, #4]
 8007aee:	4299      	cmp	r1, r3
 8007af0:	bfde      	ittt	le
 8007af2:	2330      	movle	r3, #48	@ 0x30
 8007af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007afc:	1b92      	subs	r2, r2, r6
 8007afe:	6122      	str	r2, [r4, #16]
 8007b00:	f8cd a000 	str.w	sl, [sp]
 8007b04:	464b      	mov	r3, r9
 8007b06:	aa03      	add	r2, sp, #12
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	f7ff fee6 	bl	80078dc <_printf_common>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d14a      	bne.n	8007baa <_printf_i+0x1f2>
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295
 8007b18:	b004      	add	sp, #16
 8007b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	f043 0320 	orr.w	r3, r3, #32
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	4833      	ldr	r0, [pc, #204]	@ (8007bf4 <_printf_i+0x23c>)
 8007b28:	2778      	movs	r7, #120	@ 0x78
 8007b2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	6831      	ldr	r1, [r6, #0]
 8007b32:	061f      	lsls	r7, r3, #24
 8007b34:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b38:	d402      	bmi.n	8007b40 <_printf_i+0x188>
 8007b3a:	065f      	lsls	r7, r3, #25
 8007b3c:	bf48      	it	mi
 8007b3e:	b2ad      	uxthmi	r5, r5
 8007b40:	6031      	str	r1, [r6, #0]
 8007b42:	07d9      	lsls	r1, r3, #31
 8007b44:	bf44      	itt	mi
 8007b46:	f043 0320 	orrmi.w	r3, r3, #32
 8007b4a:	6023      	strmi	r3, [r4, #0]
 8007b4c:	b11d      	cbz	r5, 8007b56 <_printf_i+0x19e>
 8007b4e:	2310      	movs	r3, #16
 8007b50:	e7ac      	b.n	8007aac <_printf_i+0xf4>
 8007b52:	4827      	ldr	r0, [pc, #156]	@ (8007bf0 <_printf_i+0x238>)
 8007b54:	e7e9      	b.n	8007b2a <_printf_i+0x172>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	f023 0320 	bic.w	r3, r3, #32
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	e7f6      	b.n	8007b4e <_printf_i+0x196>
 8007b60:	4616      	mov	r6, r2
 8007b62:	e7bd      	b.n	8007ae0 <_printf_i+0x128>
 8007b64:	6833      	ldr	r3, [r6, #0]
 8007b66:	6825      	ldr	r5, [r4, #0]
 8007b68:	6961      	ldr	r1, [r4, #20]
 8007b6a:	1d18      	adds	r0, r3, #4
 8007b6c:	6030      	str	r0, [r6, #0]
 8007b6e:	062e      	lsls	r6, r5, #24
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	d501      	bpl.n	8007b78 <_printf_i+0x1c0>
 8007b74:	6019      	str	r1, [r3, #0]
 8007b76:	e002      	b.n	8007b7e <_printf_i+0x1c6>
 8007b78:	0668      	lsls	r0, r5, #25
 8007b7a:	d5fb      	bpl.n	8007b74 <_printf_i+0x1bc>
 8007b7c:	8019      	strh	r1, [r3, #0]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	6123      	str	r3, [r4, #16]
 8007b82:	4616      	mov	r6, r2
 8007b84:	e7bc      	b.n	8007b00 <_printf_i+0x148>
 8007b86:	6833      	ldr	r3, [r6, #0]
 8007b88:	1d1a      	adds	r2, r3, #4
 8007b8a:	6032      	str	r2, [r6, #0]
 8007b8c:	681e      	ldr	r6, [r3, #0]
 8007b8e:	6862      	ldr	r2, [r4, #4]
 8007b90:	2100      	movs	r1, #0
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7f8 fb24 	bl	80001e0 <memchr>
 8007b98:	b108      	cbz	r0, 8007b9e <_printf_i+0x1e6>
 8007b9a:	1b80      	subs	r0, r0, r6
 8007b9c:	6060      	str	r0, [r4, #4]
 8007b9e:	6863      	ldr	r3, [r4, #4]
 8007ba0:	6123      	str	r3, [r4, #16]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ba8:	e7aa      	b.n	8007b00 <_printf_i+0x148>
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	4632      	mov	r2, r6
 8007bae:	4649      	mov	r1, r9
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	47d0      	blx	sl
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d0ad      	beq.n	8007b14 <_printf_i+0x15c>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	079b      	lsls	r3, r3, #30
 8007bbc:	d413      	bmi.n	8007be6 <_printf_i+0x22e>
 8007bbe:	68e0      	ldr	r0, [r4, #12]
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	4298      	cmp	r0, r3
 8007bc4:	bfb8      	it	lt
 8007bc6:	4618      	movlt	r0, r3
 8007bc8:	e7a6      	b.n	8007b18 <_printf_i+0x160>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4632      	mov	r2, r6
 8007bce:	4649      	mov	r1, r9
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	47d0      	blx	sl
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d09d      	beq.n	8007b14 <_printf_i+0x15c>
 8007bd8:	3501      	adds	r5, #1
 8007bda:	68e3      	ldr	r3, [r4, #12]
 8007bdc:	9903      	ldr	r1, [sp, #12]
 8007bde:	1a5b      	subs	r3, r3, r1
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	dcf2      	bgt.n	8007bca <_printf_i+0x212>
 8007be4:	e7eb      	b.n	8007bbe <_printf_i+0x206>
 8007be6:	2500      	movs	r5, #0
 8007be8:	f104 0619 	add.w	r6, r4, #25
 8007bec:	e7f5      	b.n	8007bda <_printf_i+0x222>
 8007bee:	bf00      	nop
 8007bf0:	0800ae72 	.word	0x0800ae72
 8007bf4:	0800ae83 	.word	0x0800ae83

08007bf8 <memmove>:
 8007bf8:	4288      	cmp	r0, r1
 8007bfa:	b510      	push	{r4, lr}
 8007bfc:	eb01 0402 	add.w	r4, r1, r2
 8007c00:	d902      	bls.n	8007c08 <memmove+0x10>
 8007c02:	4284      	cmp	r4, r0
 8007c04:	4623      	mov	r3, r4
 8007c06:	d807      	bhi.n	8007c18 <memmove+0x20>
 8007c08:	1e43      	subs	r3, r0, #1
 8007c0a:	42a1      	cmp	r1, r4
 8007c0c:	d008      	beq.n	8007c20 <memmove+0x28>
 8007c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c16:	e7f8      	b.n	8007c0a <memmove+0x12>
 8007c18:	4402      	add	r2, r0
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	428a      	cmp	r2, r1
 8007c1e:	d100      	bne.n	8007c22 <memmove+0x2a>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2a:	e7f7      	b.n	8007c1c <memmove+0x24>

08007c2c <_sbrk_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d06      	ldr	r5, [pc, #24]	@ (8007c48 <_sbrk_r+0x1c>)
 8007c30:	2300      	movs	r3, #0
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7fa fbde 	bl	80023f8 <_sbrk>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_sbrk_r+0x1a>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_sbrk_r+0x1a>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	200004d8 	.word	0x200004d8

08007c4c <memcpy>:
 8007c4c:	440a      	add	r2, r1
 8007c4e:	4291      	cmp	r1, r2
 8007c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c54:	d100      	bne.n	8007c58 <memcpy+0xc>
 8007c56:	4770      	bx	lr
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c62:	4291      	cmp	r1, r2
 8007c64:	d1f9      	bne.n	8007c5a <memcpy+0xe>
 8007c66:	bd10      	pop	{r4, pc}

08007c68 <_realloc_r>:
 8007c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	4615      	mov	r5, r2
 8007c70:	460c      	mov	r4, r1
 8007c72:	b921      	cbnz	r1, 8007c7e <_realloc_r+0x16>
 8007c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	4611      	mov	r1, r2
 8007c7a:	f7ff bc4b 	b.w	8007514 <_malloc_r>
 8007c7e:	b92a      	cbnz	r2, 8007c8c <_realloc_r+0x24>
 8007c80:	f7ff fbdc 	bl	800743c <_free_r>
 8007c84:	2400      	movs	r4, #0
 8007c86:	4620      	mov	r0, r4
 8007c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c8c:	f000 f81a 	bl	8007cc4 <_malloc_usable_size_r>
 8007c90:	4285      	cmp	r5, r0
 8007c92:	4606      	mov	r6, r0
 8007c94:	d802      	bhi.n	8007c9c <_realloc_r+0x34>
 8007c96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c9a:	d8f4      	bhi.n	8007c86 <_realloc_r+0x1e>
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	f7ff fc38 	bl	8007514 <_malloc_r>
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d0ec      	beq.n	8007c84 <_realloc_r+0x1c>
 8007caa:	42b5      	cmp	r5, r6
 8007cac:	462a      	mov	r2, r5
 8007cae:	4621      	mov	r1, r4
 8007cb0:	bf28      	it	cs
 8007cb2:	4632      	movcs	r2, r6
 8007cb4:	f7ff ffca 	bl	8007c4c <memcpy>
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f7ff fbbe 	bl	800743c <_free_r>
 8007cc0:	463c      	mov	r4, r7
 8007cc2:	e7e0      	b.n	8007c86 <_realloc_r+0x1e>

08007cc4 <_malloc_usable_size_r>:
 8007cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc8:	1f18      	subs	r0, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbc      	itt	lt
 8007cce:	580b      	ldrlt	r3, [r1, r0]
 8007cd0:	18c0      	addlt	r0, r0, r3
 8007cd2:	4770      	bx	lr

08007cd4 <_init>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr

08007ce0 <_fini>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr
