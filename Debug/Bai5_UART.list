
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030ec  08007864  08007864  00008864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a950  0800a950  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a950  0800a950  0000b950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a958  0800a958  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a958  0800a958  0000b958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a95c  0800a95c  0000b95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a960  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000450  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001842a  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004008  00000000  00000000  000244d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  000284e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c0  00000000  00000000  00029a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002492c  00000000  00000000  0002ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f5e7  00000000  00000000  0004f454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3617  00000000  00000000  0006ea3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142052  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ddc  00000000  00000000  00142098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00147e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800784c 	.word	0x0800784c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800784c 	.word	0x0800784c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2108      	movs	r1, #8
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <button_init+0x14>)
 800057a:	f002 fbf1 	bl	8002d60 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40020c00 	.word	0x40020c00

08000588 <button_Scan>:

void button_Scan(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	482f      	ldr	r0, [pc, #188]	@ (8000650 <button_Scan+0xc8>)
 8000594:	f002 fbe4 	bl	8002d60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	482c      	ldr	r0, [pc, #176]	@ (8000650 <button_Scan+0xc8>)
 800059e:	f002 fbdf 	bl	8002d60 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2202      	movs	r2, #2
 80005a6:	492b      	ldr	r1, [pc, #172]	@ (8000654 <button_Scan+0xcc>)
 80005a8:	482b      	ldr	r0, [pc, #172]	@ (8000658 <button_Scan+0xd0>)
 80005aa:	f004 fa10 	bl	80049ce <HAL_SPI_Receive>
	  int button_index = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005b6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e03f      	b.n	800063e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db06      	blt.n	80005d2 <button_Scan+0x4a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	dc03      	bgt.n	80005d2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3304      	adds	r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e018      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	dd07      	ble.n	80005e8 <button_Scan+0x60>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dc04      	bgt.n	80005e8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f1c3 0307 	rsb	r3, r3, #7
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e00d      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	dd06      	ble.n	80005fc <button_Scan+0x74>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0b      	cmp	r3, #11
 80005f2:	dc03      	bgt.n	80005fc <button_Scan+0x74>
			  button_index = i + 4;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3304      	adds	r3, #4
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e003      	b.n	8000604 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f1c3 0317 	rsb	r3, r3, #23
 8000602:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <button_Scan+0xcc>)
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	897b      	ldrh	r3, [r7, #10]
 800060a:	4013      	ands	r3, r2
 800060c:	b29b      	uxth	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <button_Scan+0x96>
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <button_Scan+0xd4>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2100      	movs	r1, #0
 8000618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800061c:	e009      	b.n	8000632 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <button_Scan+0xd4>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	3301      	adds	r3, #1
 8000628:	b299      	uxth	r1, r3
 800062a:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <button_Scan+0xd4>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000632:	897b      	ldrh	r3, [r7, #10]
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	ddbc      	ble.n	80005be <button_Scan+0x36>
	  }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020c00 	.word	0x40020c00
 8000654:	200000b8 	.word	0x200000b8
 8000658:	200001a8 	.word	0x200001a8
 800065c:	20000098 	.word	0x20000098

08000660 <displayTime>:
	cal_day=ds3231_day;
	cal_date=ds3231_date;
	cal_month=ds3231_month;
	cal_year=ds3231_year;
}
void displayTime(){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <displayTime+0xe0>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	2318      	movs	r3, #24
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2302      	movs	r3, #2
 800067c:	2164      	movs	r1, #100	@ 0x64
 800067e:	2046      	movs	r0, #70	@ 0x46
 8000680:	f000 fee0 	bl	8001444 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8000684:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <displayTime+0xe4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2318      	movs	r3, #24
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2302      	movs	r3, #2
 800069a:	2164      	movs	r1, #100	@ 0x64
 800069c:	206e      	movs	r0, #110	@ 0x6e
 800069e:	f000 fed1 	bl	8001444 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80006a2:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <displayTime+0xe8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2318      	movs	r3, #24
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	2300      	movs	r3, #0
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2302      	movs	r3, #2
 80006b8:	2164      	movs	r1, #100	@ 0x64
 80006ba:	2096      	movs	r0, #150	@ 0x96
 80006bc:	f000 fec2 	bl	8001444 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <displayTime+0xec>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	2318      	movs	r3, #24
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2302      	movs	r3, #2
 80006d6:	2182      	movs	r1, #130	@ 0x82
 80006d8:	2014      	movs	r0, #20
 80006da:	f000 feb3 	bl	8001444 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <displayTime+0xf0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	2318      	movs	r3, #24
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2300      	movs	r3, #0
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2302      	movs	r3, #2
 80006f4:	2182      	movs	r1, #130	@ 0x82
 80006f6:	2046      	movs	r0, #70	@ 0x46
 80006f8:	f000 fea4 	bl	8001444 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <displayTime+0xf4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	2318      	movs	r3, #24
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	2300      	movs	r3, #0
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2302      	movs	r3, #2
 8000712:	2182      	movs	r1, #130	@ 0x82
 8000714:	206e      	movs	r0, #110	@ 0x6e
 8000716:	f000 fe95 	bl	8001444 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <displayTime+0xf8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	2318      	movs	r3, #24
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2300      	movs	r3, #0
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2302      	movs	r3, #2
 8000730:	2182      	movs	r1, #130	@ 0x82
 8000732:	2096      	movs	r0, #150	@ 0x96
 8000734:	f000 fe86 	bl	8001444 <lcd_ShowIntNum>
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000d3 	.word	0x200000d3
 8000744:	200000d4 	.word	0x200000d4
 8000748:	200000d5 	.word	0x200000d5
 800074c:	200000d7 	.word	0x200000d7
 8000750:	200000d6 	.word	0x200000d6
 8000754:	200000d8 	.word	0x200000d8
 8000758:	200000d9 	.word	0x200000d9

0800075c <ChangeValue>:

void ChangeValue(int val){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	switch(val){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b05      	cmp	r3, #5
 8000768:	f200 809e 	bhi.w	80008a8 <ChangeValue+0x14c>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <ChangeValue+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	0800078d 	.word	0x0800078d
 8000778:	080007ab 	.word	0x080007ab
 800077c:	080007c7 	.word	0x080007c7
 8000780:	080007e3 	.word	0x080007e3
 8000784:	0800087f 	.word	0x0800087f
 8000788:	0800089b 	.word	0x0800089b
	case 0:
		cal_sec++;
 800078c:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <ChangeValue+0x170>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b4d      	ldr	r3, [pc, #308]	@ (80008cc <ChangeValue+0x170>)
 8000796:	701a      	strb	r2, [r3, #0]
		if(cal_sec > 59) cal_sec=0;
 8000798:	4b4c      	ldr	r3, [pc, #304]	@ (80008cc <ChangeValue+0x170>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b3b      	cmp	r3, #59	@ 0x3b
 800079e:	f240 8085 	bls.w	80008ac <ChangeValue+0x150>
 80007a2:	4b4a      	ldr	r3, [pc, #296]	@ (80008cc <ChangeValue+0x170>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
		break;
 80007a8:	e080      	b.n	80008ac <ChangeValue+0x150>
	case 1:
		cal_min++;
 80007aa:	4b49      	ldr	r3, [pc, #292]	@ (80008d0 <ChangeValue+0x174>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b47      	ldr	r3, [pc, #284]	@ (80008d0 <ChangeValue+0x174>)
 80007b4:	701a      	strb	r2, [r3, #0]
		if(cal_min > 59) cal_min=0;
 80007b6:	4b46      	ldr	r3, [pc, #280]	@ (80008d0 <ChangeValue+0x174>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80007bc:	d978      	bls.n	80008b0 <ChangeValue+0x154>
 80007be:	4b44      	ldr	r3, [pc, #272]	@ (80008d0 <ChangeValue+0x174>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e074      	b.n	80008b0 <ChangeValue+0x154>
	case 2:
		cal_hour++;
 80007c6:	4b43      	ldr	r3, [pc, #268]	@ (80008d4 <ChangeValue+0x178>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <ChangeValue+0x178>)
 80007d0:	701a      	strb	r2, [r3, #0]
		if(cal_hour > 23) cal_hour =0;
 80007d2:	4b40      	ldr	r3, [pc, #256]	@ (80008d4 <ChangeValue+0x178>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b17      	cmp	r3, #23
 80007d8:	d96c      	bls.n	80008b4 <ChangeValue+0x158>
 80007da:	4b3e      	ldr	r3, [pc, #248]	@ (80008d4 <ChangeValue+0x178>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		break;
 80007e0:	e068      	b.n	80008b4 <ChangeValue+0x158>
	case 3:
		cal_day++;
 80007e2:	4b3d      	ldr	r3, [pc, #244]	@ (80008d8 <ChangeValue+0x17c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b3b      	ldr	r3, [pc, #236]	@ (80008d8 <ChangeValue+0x17c>)
 80007ec:	701a      	strb	r2, [r3, #0]
		cal_date++;
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <ChangeValue+0x180>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b39      	ldr	r3, [pc, #228]	@ (80008dc <ChangeValue+0x180>)
 80007f8:	701a      	strb	r2, [r3, #0]
		if(cal_day >28){
 80007fa:	4b37      	ldr	r3, [pc, #220]	@ (80008d8 <ChangeValue+0x17c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b1c      	cmp	r3, #28
 8000800:	d916      	bls.n	8000830 <ChangeValue+0xd4>
			if(cal_month ==2){
 8000802:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <ChangeValue+0x184>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d131      	bne.n	800086e <ChangeValue+0x112>
				if(cal_year%4 !=0){
 800080a:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <ChangeValue+0x188>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f003 0303 	and.w	r3, r3, #3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <ChangeValue+0xc4>
					cal_day=1;
 8000818:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <ChangeValue+0x17c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e026      	b.n	800086e <ChangeValue+0x112>
				}
				else{
					if(cal_day >29) cal_day=0;
 8000820:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <ChangeValue+0x17c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b1d      	cmp	r3, #29
 8000826:	d922      	bls.n	800086e <ChangeValue+0x112>
 8000828:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <ChangeValue+0x17c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e01e      	b.n	800086e <ChangeValue+0x112>
				}
			}
		}
		else if(cal_month==4 || cal_month==6 || cal_month==9 || cal_month==11){
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <ChangeValue+0x184>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d00b      	beq.n	8000850 <ChangeValue+0xf4>
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <ChangeValue+0x184>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b06      	cmp	r3, #6
 800083e:	d007      	beq.n	8000850 <ChangeValue+0xf4>
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <ChangeValue+0x184>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b09      	cmp	r3, #9
 8000846:	d003      	beq.n	8000850 <ChangeValue+0xf4>
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <ChangeValue+0x184>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b0b      	cmp	r3, #11
 800084e:	d107      	bne.n	8000860 <ChangeValue+0x104>
			if(cal_day > 30) cal_day=0;
 8000850:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <ChangeValue+0x17c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b1e      	cmp	r3, #30
 8000856:	d90a      	bls.n	800086e <ChangeValue+0x112>
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <ChangeValue+0x17c>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e006      	b.n	800086e <ChangeValue+0x112>
		}
		else{
			if(cal_day>31) cal_day=0;
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <ChangeValue+0x17c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b1f      	cmp	r3, #31
 8000866:	d902      	bls.n	800086e <ChangeValue+0x112>
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <ChangeValue+0x17c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
		}
		if(cal_date>8) cal_date=2;
 800086e:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <ChangeValue+0x180>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b08      	cmp	r3, #8
 8000874:	d920      	bls.n	80008b8 <ChangeValue+0x15c>
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <ChangeValue+0x180>)
 8000878:	2202      	movs	r2, #2
 800087a:	701a      	strb	r2, [r3, #0]

		break;
 800087c:	e01c      	b.n	80008b8 <ChangeValue+0x15c>
	case 4:
		cal_month++;
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <ChangeValue+0x184>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <ChangeValue+0x184>)
 8000888:	701a      	strb	r2, [r3, #0]
		if(cal_month>12) cal_month=1;
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <ChangeValue+0x184>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b0c      	cmp	r3, #12
 8000890:	d914      	bls.n	80008bc <ChangeValue+0x160>
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <ChangeValue+0x184>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
		break;
 8000898:	e010      	b.n	80008bc <ChangeValue+0x160>
	case 5:
		cal_year++;
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <ChangeValue+0x188>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <ChangeValue+0x188>)
 80008a4:	701a      	strb	r2, [r3, #0]
		break;
 80008a6:	e00a      	b.n	80008be <ChangeValue+0x162>
	default:
		break;
 80008a8:	bf00      	nop
 80008aa:	e008      	b.n	80008be <ChangeValue+0x162>
		break;
 80008ac:	bf00      	nop
 80008ae:	e006      	b.n	80008be <ChangeValue+0x162>
		break;
 80008b0:	bf00      	nop
 80008b2:	e004      	b.n	80008be <ChangeValue+0x162>
		break;
 80008b4:	bf00      	nop
 80008b6:	e002      	b.n	80008be <ChangeValue+0x162>
		break;
 80008b8:	bf00      	nop
 80008ba:	e000      	b.n	80008be <ChangeValue+0x162>
		break;
 80008bc:	bf00      	nop
	}
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	200000c6 	.word	0x200000c6
 80008d0:	200000c5 	.word	0x200000c5
 80008d4:	200000c4 	.word	0x200000c4
 80008d8:	200000c8 	.word	0x200000c8
 80008dc:	200000c7 	.word	0x200000c7
 80008e0:	200000c9 	.word	0x200000c9
 80008e4:	200000ca 	.word	0x200000ca

080008e8 <ApplyChange>:

void ApplyChange(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
		ds3231_Write(ADDRESS_SEC, cal_sec);
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <ApplyChange+0x5c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f926 	bl	8000b44 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, cal_min);
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <ApplyChange+0x60>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 f920 	bl	8000b44 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, cal_hour);
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <ApplyChange+0x64>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	2002      	movs	r0, #2
 800090c:	f000 f91a 	bl	8000b44 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, cal_day);
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <ApplyChange+0x68>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	2003      	movs	r0, #3
 8000918:	f000 f914 	bl	8000b44 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, cal_date);
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <ApplyChange+0x6c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	2004      	movs	r0, #4
 8000924:	f000 f90e 	bl	8000b44 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, cal_month);
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <ApplyChange+0x70>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	2005      	movs	r0, #5
 8000930:	f000 f908 	bl	8000b44 <ds3231_Write>
		ds3231_Write(ADDRESS_YEAR, cal_year);
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <ApplyChange+0x74>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	2006      	movs	r0, #6
 800093c:	f000 f902 	bl	8000b44 <ds3231_Write>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000c6 	.word	0x200000c6
 8000948:	200000c5 	.word	0x200000c5
 800094c:	200000c4 	.word	0x200000c4
 8000950:	200000c8 	.word	0x200000c8
 8000954:	200000c7 	.word	0x200000c7
 8000958:	200000c9 	.word	0x200000c9
 800095c:	200000ca 	.word	0x200000ca

08000960 <fsm>:



}

void fsm(uint16_t status){
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	@ 0x50
 8000964:	af04      	add	r7, sp, #16
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
	switch(status){
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2b0b      	cmp	r3, #11
 800096e:	d019      	beq.n	80009a4 <fsm+0x44>
 8000970:	2b0b      	cmp	r3, #11
 8000972:	f300 80c9 	bgt.w	8000b08 <fsm+0x1a8>
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <fsm+0x20>
 800097a:	2b01      	cmp	r3, #1
 800097c:	d04d      	beq.n	8000a1a <fsm+0xba>
			counter++;
		}

		break;
	default:
		break;
 800097e:	e0c3      	b.n	8000b08 <fsm+0x1a8>
			ds3231_ReadTime();
 8000980:	f000 f902 	bl	8000b88 <ds3231_ReadTime>
			displayTime();
 8000984:	f7ff fe6c 	bl	8000660 <displayTime>
			lcd_StrCenter(10, 20, "NORMAL", BLUE, YELLOW, 16, 0);
 8000988:	2300      	movs	r3, #0
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2310      	movs	r3, #16
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	231f      	movs	r3, #31
 8000998:	4a5f      	ldr	r2, [pc, #380]	@ (8000b18 <fsm+0x1b8>)
 800099a:	2114      	movs	r1, #20
 800099c:	200a      	movs	r0, #10
 800099e:	f000 ffb7 	bl	8001910 <lcd_StrCenter>
			break;
 80009a2:	e0b4      	b.n	8000b0e <fsm+0x1ae>
			if (button_count[3] == 1) {
 80009a4:	4b5d      	ldr	r3, [pc, #372]	@ (8000b1c <fsm+0x1bc>)
 80009a6:	88db      	ldrh	r3, [r3, #6]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d104      	bne.n	80009b6 <fsm+0x56>
				ChangeValue(counter);
 80009ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000b20 <fsm+0x1c0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fed3 	bl	800075c <ChangeValue>
			if (button_count[3] == 40) {
 80009b6:	4b59      	ldr	r3, [pc, #356]	@ (8000b1c <fsm+0x1bc>)
 80009b8:	88db      	ldrh	r3, [r3, #6]
 80009ba:	2b28      	cmp	r3, #40	@ 0x28
 80009bc:	d107      	bne.n	80009ce <fsm+0x6e>
				setTimer3(200);
 80009be:	20c8      	movs	r0, #200	@ 0xc8
 80009c0:	f001 f9a2 	bl	8001d08 <setTimer3>
				ChangeValue(counter);
 80009c4:	4b56      	ldr	r3, [pc, #344]	@ (8000b20 <fsm+0x1c0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fec7 	bl	800075c <ChangeValue>
			if (flag_timer3 && button_count[3] > 40) {
 80009ce:	4b55      	ldr	r3, [pc, #340]	@ (8000b24 <fsm+0x1c4>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00b      	beq.n	80009ee <fsm+0x8e>
 80009d6:	4b51      	ldr	r3, [pc, #324]	@ (8000b1c <fsm+0x1bc>)
 80009d8:	88db      	ldrh	r3, [r3, #6]
 80009da:	2b28      	cmp	r3, #40	@ 0x28
 80009dc:	d907      	bls.n	80009ee <fsm+0x8e>
				setTimer3(200);
 80009de:	20c8      	movs	r0, #200	@ 0xc8
 80009e0:	f001 f992 	bl	8001d08 <setTimer3>
				ChangeValue(counter);
 80009e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000b20 <fsm+0x1c0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff feb7 	bl	800075c <ChangeValue>
			if(button_count[12] == 1){
 80009ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000b1c <fsm+0x1bc>)
 80009f0:	8b1b      	ldrh	r3, [r3, #24]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	f040 808a 	bne.w	8000b0c <fsm+0x1ac>
				ApplyChange();
 80009f8:	f7ff ff76 	bl	80008e8 <ApplyChange>
				counter++;
 80009fc:	4b48      	ldr	r3, [pc, #288]	@ (8000b20 <fsm+0x1c0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a47      	ldr	r2, [pc, #284]	@ (8000b20 <fsm+0x1c0>)
 8000a04:	6013      	str	r3, [r2, #0]
				ds3231_ReadTime();
 8000a06:	f000 f8bf 	bl	8000b88 <ds3231_ReadTime>
				if(counter>5) counter =0;
 8000a0a:	4b45      	ldr	r3, [pc, #276]	@ (8000b20 <fsm+0x1c0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b05      	cmp	r3, #5
 8000a10:	dd7c      	ble.n	8000b0c <fsm+0x1ac>
 8000a12:	4b43      	ldr	r3, [pc, #268]	@ (8000b20 <fsm+0x1c0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
			break;
 8000a18:	e078      	b.n	8000b0c <fsm+0x1ac>
		char title[50] ="Updating ";
 8000a1a:	4a43      	ldr	r2, [pc, #268]	@ (8000b28 <fsm+0x1c8>)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	6810      	ldr	r0, [r2, #0]
 8000a22:	6851      	ldr	r1, [r2, #4]
 8000a24:	c303      	stmia	r3!, {r0, r1}
 8000a26:	8912      	ldrh	r2, [r2, #8]
 8000a28:	801a      	strh	r2, [r3, #0]
 8000a2a:	f107 0316 	add.w	r3, r7, #22
 8000a2e:	2228      	movs	r2, #40	@ 0x28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f006 fa7a 	bl	8006f2c <memset>
					strcat(title, update_value[counter]);
 8000a38:	4b39      	ldr	r3, [pc, #228]	@ (8000b20 <fsm+0x1c0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b2c <fsm+0x1cc>)
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f006 fa77 	bl	8006f3c <strcat>
					strcat(title,"...");
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbbc 	bl	80001d0 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4413      	add	r3, r2
 8000a62:	4a33      	ldr	r2, [pc, #204]	@ (8000b30 <fsm+0x1d0>)
 8000a64:	6810      	ldr	r0, [r2, #0]
 8000a66:	6018      	str	r0, [r3, #0]
		lcd_StrCenter(10, 20, title, BLUE, YELLOW, 16, 0);
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2310      	movs	r3, #16
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	231f      	movs	r3, #31
 8000a7c:	2114      	movs	r1, #20
 8000a7e:	200a      	movs	r0, #10
 8000a80:	f000 ff46 	bl	8001910 <lcd_StrCenter>
		ds3231_ReadTime();
 8000a84:	f000 f880 	bl	8000b88 <ds3231_ReadTime>
		displayTime();
 8000a88:	f7ff fdea 	bl	8000660 <displayTime>
		if(flag_timer5){
 8000a8c:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <fsm+0x1d4>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d033      	beq.n	8000afc <fsm+0x19c>
			if(dataReady){
 8000a94:	4b28      	ldr	r3, [pc, #160]	@ (8000b38 <fsm+0x1d8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d012      	beq.n	8000ac2 <fsm+0x162>
				if(counter ==5){
 8000a9c:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <fsm+0x1c0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d105      	bne.n	8000ab0 <fsm+0x150>
					status=NORMAL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	80fb      	strh	r3, [r7, #6]
					counter=0;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <fsm+0x1c0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	e004      	b.n	8000aba <fsm+0x15a>
					counter++;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <fsm+0x1c0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b20 <fsm+0x1c0>)
 8000ab8:	6013      	str	r3, [r2, #0]
				try_count =0;
 8000aba:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <fsm+0x1dc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e004      	b.n	8000acc <fsm+0x16c>
				try_count++;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <fsm+0x1dc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b3c <fsm+0x1dc>)
 8000aca:	6013      	str	r3, [r2, #0]
			if(try_count >=4) {
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <fsm+0x1dc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dd0f      	ble.n	8000af4 <fsm+0x194>
				lcd_StrCenter(10, 110, "TIME OUT", RED, YELLOW, 12, 0);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	230c      	movs	r3, #12
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <fsm+0x1e0>)
 8000ae8:	216e      	movs	r1, #110	@ 0x6e
 8000aea:	200a      	movs	r0, #10
 8000aec:	f000 ff10 	bl	8001910 <lcd_StrCenter>
				status=NORMAL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	80fb      	strh	r3, [r7, #6]
			flag_timer5=1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <fsm+0x1d4>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	801a      	strh	r2, [r3, #0]
		break;
 8000afa:	e008      	b.n	8000b0e <fsm+0x1ae>
			counter++;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <fsm+0x1c0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <fsm+0x1c0>)
 8000b04:	6013      	str	r3, [r2, #0]
		break;
 8000b06:	e002      	b.n	8000b0e <fsm+0x1ae>
		break;
 8000b08:	bf00      	nop
 8000b0a:	e000      	b.n	8000b0e <fsm+0x1ae>
			break;
 8000b0c:	bf00      	nop
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3740      	adds	r7, #64	@ 0x40
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	080078f0 	.word	0x080078f0
 8000b1c:	20000098 	.word	0x20000098
 8000b20:	200000bc 	.word	0x200000bc
 8000b24:	20000196 	.word	0x20000196
 8000b28:	08007908 	.word	0x08007908
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	080078f8 	.word	0x080078f8
 8000b34:	200001a2 	.word	0x200001a2
 8000b38:	20000338 	.word	0x20000338
 8000b3c:	200000c0 	.word	0x200000c0
 8000b40:	080078fc 	.word	0x080078fc

08000b44 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af04      	add	r7, sp, #16
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fcde 	bl	8002518 <DEC2BCD>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	230a      	movs	r3, #10
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	f107 030f 	add.w	r3, r7, #15
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	21d0      	movs	r1, #208	@ 0xd0
 8000b76:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <ds3231_Write+0x40>)
 8000b78:	f002 fa50 	bl	800301c <HAL_I2C_Mem_Write>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000130 	.word	0x20000130

08000b88 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000b8e:	230a      	movs	r3, #10
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2307      	movs	r3, #7
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	21d0      	movs	r1, #208	@ 0xd0
 8000ba0:	4823      	ldr	r0, [pc, #140]	@ (8000c30 <ds3231_ReadTime+0xa8>)
 8000ba2:	f002 fb35 	bl	8003210 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fc9a 	bl	80024e4 <BCD2DEC>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <ds3231_ReadTime+0xac>)
 8000bb6:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fc91 	bl	80024e4 <BCD2DEC>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <ds3231_ReadTime+0xb0>)
 8000bc8:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fc88 	bl	80024e4 <BCD2DEC>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <ds3231_ReadTime+0xb4>)
 8000bda:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000bde:	78db      	ldrb	r3, [r3, #3]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fc7f 	bl	80024e4 <BCD2DEC>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <ds3231_ReadTime+0xb8>)
 8000bec:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000bf0:	791b      	ldrb	r3, [r3, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fc76 	bl	80024e4 <BCD2DEC>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <ds3231_ReadTime+0xbc>)
 8000bfe:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000c02:	795b      	ldrb	r3, [r3, #5]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fc6d 	bl	80024e4 <BCD2DEC>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <ds3231_ReadTime+0xc0>)
 8000c10:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <ds3231_ReadTime+0xa4>)
 8000c14:	799b      	ldrb	r3, [r3, #6]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 fc64 	bl	80024e4 <BCD2DEC>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <ds3231_ReadTime+0xc4>)
 8000c22:	701a      	strb	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000cc 	.word	0x200000cc
 8000c30:	20000130 	.word	0x20000130
 8000c34:	200000d5 	.word	0x200000d5
 8000c38:	200000d4 	.word	0x200000d4
 8000c3c:	200000d3 	.word	0x200000d3
 8000c40:	200000d7 	.word	0x200000d7
 8000c44:	200000d6 	.word	0x200000d6
 8000c48:	200000d8 	.word	0x200000d8
 8000c4c:	200000d9 	.word	0x200000d9

08000c50 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	@ 0x38
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	615a      	str	r2, [r3, #20]
 8000c68:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000c7e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000c82:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000c86:	4a2e      	ldr	r2, [pc, #184]	@ (8000d40 <MX_FSMC_Init+0xf0>)
 8000c88:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c96:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000cae:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000cea:	233c      	movs	r3, #60	@ 0x3c
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000cf6:	2311      	movs	r3, #17
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000cfe:	2308      	movs	r3, #8
 8000d00:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d02:	230f      	movs	r3, #15
 8000d04:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000d06:	2309      	movs	r3, #9
 8000d08:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d12:	2311      	movs	r3, #17
 8000d14:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d1a:	463a      	mov	r2, r7
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <MX_FSMC_Init+0xec>)
 8000d24:	f004 fa36 	bl	8005194 <HAL_SRAM_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d2e:	f000 ffbf 	bl	8001cb0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	@ 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000dc 	.word	0x200000dc
 8000d40:	a0000104 	.word	0xa0000104

08000d44 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_FSMC_MspInit+0x88>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d131      	bne.n	8000dc4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <HAL_FSMC_MspInit+0x88>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_FSMC_MspInit+0x8c>)
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d6e:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <HAL_FSMC_MspInit+0x8c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_FSMC_MspInit+0x8c>)
 8000d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d82:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000d86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d94:	230c      	movs	r3, #12
 8000d96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <HAL_FSMC_MspInit+0x90>)
 8000d9e:	f001 fe43 	bl	8002a28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000da2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000da6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000db4:	230c      	movs	r3, #12
 8000db6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <HAL_FSMC_MspInit+0x94>)
 8000dbe:	f001 fe33 	bl	8002a28 <HAL_GPIO_Init>
 8000dc2:	e000      	b.n	8000dc6 <HAL_FSMC_MspInit+0x82>
    return;
 8000dc4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000012c 	.word	0x2000012c
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40020c00 	.word	0x40020c00

08000ddc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000de4:	f7ff ffae 	bl	8000d44 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a6e      	ldr	r2, [pc, #440]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b6c      	ldr	r3, [pc, #432]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	4b68      	ldr	r3, [pc, #416]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a67      	ldr	r2, [pc, #412]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b65      	ldr	r3, [pc, #404]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b61      	ldr	r3, [pc, #388]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a60      	ldr	r2, [pc, #384]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a59      	ldr	r2, [pc, #356]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b57      	ldr	r3, [pc, #348]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b53      	ldr	r3, [pc, #332]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a52      	ldr	r2, [pc, #328]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b50      	ldr	r3, [pc, #320]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b49      	ldr	r3, [pc, #292]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a44      	ldr	r2, [pc, #272]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2170      	movs	r1, #112	@ 0x70
 8000ece:	483f      	ldr	r0, [pc, #252]	@ (8000fcc <MX_GPIO_Init+0x1dc>)
 8000ed0:	f001 ff46 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eda:	483d      	ldr	r0, [pc, #244]	@ (8000fd0 <MX_GPIO_Init+0x1e0>)
 8000edc:	f001 ff40 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2140      	movs	r1, #64	@ 0x40
 8000ee4:	483b      	ldr	r0, [pc, #236]	@ (8000fd4 <MX_GPIO_Init+0x1e4>)
 8000ee6:	f001 ff3b 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef0:	4839      	ldr	r0, [pc, #228]	@ (8000fd8 <MX_GPIO_Init+0x1e8>)
 8000ef2:	f001 ff35 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4838      	ldr	r0, [pc, #224]	@ (8000fdc <MX_GPIO_Init+0x1ec>)
 8000efc:	f001 ff30 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000f00:	2370      	movs	r3, #112	@ 0x70
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	482d      	ldr	r0, [pc, #180]	@ (8000fcc <MX_GPIO_Init+0x1dc>)
 8000f18:	f001 fd86 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4826      	ldr	r0, [pc, #152]	@ (8000fd0 <MX_GPIO_Init+0x1e0>)
 8000f36:	f001 fd77 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000f3a:	23c0      	movs	r3, #192	@ 0xc0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4822      	ldr	r0, [pc, #136]	@ (8000fd8 <MX_GPIO_Init+0x1e8>)
 8000f4e:	f001 fd6b 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000f52:	2330      	movs	r3, #48	@ 0x30
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	481a      	ldr	r0, [pc, #104]	@ (8000fd0 <MX_GPIO_Init+0x1e0>)
 8000f66:	f001 fd5f 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000f6a:	2340      	movs	r3, #64	@ 0x40
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	@ (8000fd4 <MX_GPIO_Init+0x1e4>)
 8000f82:	f001 fd51 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000f86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480e      	ldr	r0, [pc, #56]	@ (8000fd8 <MX_GPIO_Init+0x1e8>)
 8000fa0:	f001 fd42 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <MX_GPIO_Init+0x1ec>)
 8000fbc:	f001 fd34 	bl	8002a28 <HAL_GPIO_Init>

}
 8000fc0:	bf00      	nop
 8000fc2:	3730      	adds	r7, #48	@ 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <MX_I2C1_Init+0x50>)
 8000fe6:	4a13      	ldr	r2, [pc, #76]	@ (8001034 <MX_I2C1_Init+0x54>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_I2C1_Init+0x50>)
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <MX_I2C1_Init+0x58>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_I2C1_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_I2C1_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_I2C1_Init+0x50>)
 8000ffe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <MX_I2C1_Init+0x50>)
 800101e:	f001 feb9 	bl	8002d94 <HAL_I2C_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001028:	f000 fe42 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000130 	.word	0x20000130
 8001034:	40005400 	.word	0x40005400
 8001038:	000186a0 	.word	0x000186a0

0800103c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a19      	ldr	r2, [pc, #100]	@ (80010c0 <HAL_I2C_MspInit+0x84>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12b      	bne.n	80010b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <HAL_I2C_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <HAL_I2C_MspInit+0x88>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_I2C_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107a:	23c0      	movs	r3, #192	@ 0xc0
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107e:	2312      	movs	r3, #18
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108a:	2304      	movs	r3, #4
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <HAL_I2C_MspInit+0x8c>)
 8001096:	f001 fcc7 	bl	8002a28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_I2C_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_I2C_MspInit+0x88>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_I2C_MspInit+0x88>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020400 	.word	0x40020400

080010cc <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <LCD_WR_REG+0x1c>)
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	8013      	strh	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	600ffffe 	.word	0x600ffffe

080010ec <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <LCD_WR_DATA+0x1c>)
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	8053      	strh	r3, [r2, #2]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	600ffffe 	.word	0x600ffffe

0800110c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <LCD_RD_DATA+0x20>)
 8001114:	885b      	ldrh	r3, [r3, #2]
 8001116:	b29b      	uxth	r3, r3
 8001118:	80fb      	strh	r3, [r7, #6]
	return ram;
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	b29b      	uxth	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	600ffffe 	.word	0x600ffffe

08001130 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800114e:	202a      	movs	r0, #42	@ 0x2a
 8001150:	f7ff ffbc 	bl	80010cc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffc6 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ffc0 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ffba 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffb4 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001184:	202b      	movs	r0, #43	@ 0x2b
 8001186:	f7ff ffa1 	bl	80010cc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffab 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffa5 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80011a2:	883b      	ldrh	r3, [r7, #0]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff9f 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80011ae:	883b      	ldrh	r3, [r7, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff99 	bl	80010ec <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80011ba:	202c      	movs	r0, #44	@ 0x2c
 80011bc:	f7ff ff86 	bl	80010cc <LCD_WR_REG>
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}

080011c8 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <lcd_Clear+0x70>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <lcd_Clear+0x70>)
 80011ec:	885b      	ldrh	r3, [r3, #2]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ff9b 	bl	8001130 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	81fb      	strh	r3, [r7, #14]
 80011fe:	e011      	b.n	8001224 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001200:	2300      	movs	r3, #0
 8001202:	81bb      	strh	r3, [r7, #12]
 8001204:	e006      	b.n	8001214 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff6f 	bl	80010ec <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800120e:	89bb      	ldrh	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	81bb      	strh	r3, [r7, #12]
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <lcd_Clear+0x70>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	89ba      	ldrh	r2, [r7, #12]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3f3      	bcc.n	8001206 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	81fb      	strh	r3, [r7, #14]
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <lcd_Clear+0x70>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	89fa      	ldrh	r2, [r7, #14]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3e8      	bcc.n	8001200 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000184 	.word	0x20000184

0800123c <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	88fa      	ldrh	r2, [r7, #6]
 8001252:	88b9      	ldrh	r1, [r7, #4]
 8001254:	88f8      	ldrh	r0, [r7, #6]
 8001256:	f7ff ff6b 	bl	8001130 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff45 	bl	80010ec <LCD_WR_DATA>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	80fb      	strh	r3, [r7, #6]
 800127e:	4603      	mov	r3, r0
 8001280:	80bb      	strh	r3, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	70fb      	strb	r3, [r7, #3]
 8001286:	4613      	mov	r3, r2
 8001288:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800128a:	2300      	movs	r3, #0
 800128c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001292:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012bc:	b29b      	uxth	r3, r3
 80012be:	fb12 f303 	smulbb	r3, r2, r3
 80012c2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	3b20      	subs	r3, #32
 80012c8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	4413      	add	r3, r2
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29c      	uxth	r4, r3
 80012d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012dc:	b29a      	uxth	r2, r3
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	88b9      	ldrh	r1, [r7, #4]
 80012ea:	88f8      	ldrh	r0, [r7, #6]
 80012ec:	4622      	mov	r2, r4
 80012ee:	f7ff ff1f 	bl	8001130 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	827b      	strh	r3, [r7, #18]
 80012f6:	e07a      	b.n	80013ee <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80012f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d028      	beq.n	8001352 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001300:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001304:	2b10      	cmp	r3, #16
 8001306:	d108      	bne.n	800131a <lcd_ShowChar+0xae>
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	8a7b      	ldrh	r3, [r7, #18]
 800130c:	493c      	ldr	r1, [pc, #240]	@ (8001400 <lcd_ShowChar+0x194>)
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	440a      	add	r2, r1
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	75fb      	strb	r3, [r7, #23]
 8001318:	e01b      	b.n	8001352 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 800131a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800131e:	2b18      	cmp	r3, #24
 8001320:	d10b      	bne.n	800133a <lcd_ShowChar+0xce>
 8001322:	78fa      	ldrb	r2, [r7, #3]
 8001324:	8a79      	ldrh	r1, [r7, #18]
 8001326:	4837      	ldr	r0, [pc, #220]	@ (8001404 <lcd_ShowChar+0x198>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4403      	add	r3, r0
 8001332:	440b      	add	r3, r1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	75fb      	strb	r3, [r7, #23]
 8001338:	e00b      	b.n	8001352 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 800133a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800133e:	2b20      	cmp	r3, #32
 8001340:	d15a      	bne.n	80013f8 <lcd_ShowChar+0x18c>
 8001342:	78fa      	ldrb	r2, [r7, #3]
 8001344:	8a7b      	ldrh	r3, [r7, #18]
 8001346:	4930      	ldr	r1, [pc, #192]	@ (8001408 <lcd_ShowChar+0x19c>)
 8001348:	0192      	lsls	r2, r2, #6
 800134a:	440a      	add	r2, r1
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001352:	2300      	movs	r3, #0
 8001354:	75bb      	strb	r3, [r7, #22]
 8001356:	e044      	b.n	80013e2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001358:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800135c:	2b00      	cmp	r3, #0
 800135e:	d120      	bne.n	80013a2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001360:	7dfa      	ldrb	r2, [r7, #23]
 8001362:	7dbb      	ldrb	r3, [r7, #22]
 8001364:	fa42 f303 	asr.w	r3, r2, r3
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <lcd_ShowChar+0x10e>
 8001370:	883b      	ldrh	r3, [r7, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff feba 	bl	80010ec <LCD_WR_DATA>
 8001378:	e003      	b.n	8001382 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800137a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff feb5 	bl	80010ec <LCD_WR_DATA>
				m++;
 8001382:	7d7b      	ldrb	r3, [r7, #21]
 8001384:	3301      	adds	r3, #1
 8001386:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001388:	7d7b      	ldrb	r3, [r7, #21]
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001390:	fb01 f202 	mul.w	r2, r1, r2
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d11f      	bne.n	80013dc <lcd_ShowChar+0x170>
				{
					m=0;
 800139c:	2300      	movs	r3, #0
 800139e:	757b      	strb	r3, [r7, #21]
					break;
 80013a0:	e022      	b.n	80013e8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80013a2:	7dfa      	ldrb	r2, [r7, #23]
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	fa42 f303 	asr.w	r3, r2, r3
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <lcd_ShowChar+0x152>
 80013b2:	883a      	ldrh	r2, [r7, #0]
 80013b4:	88b9      	ldrh	r1, [r7, #4]
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff3f 	bl	800123c <lcd_DrawPoint>
				x++;
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	3301      	adds	r3, #1
 80013c2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80013c4:	88fa      	ldrh	r2, [r7, #6]
 80013c6:	8a3b      	ldrh	r3, [r7, #16]
 80013c8:	1ad2      	subs	r2, r2, r3
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d105      	bne.n	80013dc <lcd_ShowChar+0x170>
				{
					x=x0;
 80013d0:	8a3b      	ldrh	r3, [r7, #16]
 80013d2:	80fb      	strh	r3, [r7, #6]
					y++;
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	80bb      	strh	r3, [r7, #4]
					break;
 80013da:	e005      	b.n	80013e8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80013dc:	7dbb      	ldrb	r3, [r7, #22]
 80013de:	3301      	adds	r3, #1
 80013e0:	75bb      	strb	r3, [r7, #22]
 80013e2:	7dbb      	ldrb	r3, [r7, #22]
 80013e4:	2b07      	cmp	r3, #7
 80013e6:	d9b7      	bls.n	8001358 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80013e8:	8a7b      	ldrh	r3, [r7, #18]
 80013ea:	3301      	adds	r3, #1
 80013ec:	827b      	strh	r3, [r7, #18]
 80013ee:	8a7a      	ldrh	r2, [r7, #18]
 80013f0:	89bb      	ldrh	r3, [r7, #12]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d380      	bcc.n	80012f8 <lcd_ShowChar+0x8c>
 80013f6:	e000      	b.n	80013fa <lcd_ShowChar+0x18e>
		else return;
 80013f8:	bf00      	nop
				}
			}
		}
	}
}
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	08007984 	.word	0x08007984
 8001404:	08007f74 	.word	0x08007f74
 8001408:	08009144 	.word	0x08009144

0800140c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	460a      	mov	r2, r1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	4613      	mov	r3, r2
 800141a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001420:	e004      	b.n	800142c <mypow+0x20>
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	71ba      	strb	r2, [r7, #6]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f5      	bne.n	8001422 <mypow+0x16>
	return result;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af04      	add	r7, sp, #16
 800144a:	4604      	mov	r4, r0
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4623      	mov	r3, r4
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	4603      	mov	r3, r0
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]
 800145e:	4613      	mov	r3, r2
 8001460:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001462:	2300      	movs	r3, #0
 8001464:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e059      	b.n	8001528 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001474:	887c      	ldrh	r4, [r7, #2]
 8001476:	787a      	ldrb	r2, [r7, #1]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	3b01      	subs	r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	200a      	movs	r0, #10
 8001486:	f7ff ffc1 	bl	800140c <mypow>
 800148a:	4603      	mov	r3, r0
 800148c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <lcd_ShowIntNum+0xf8>)
 8001492:	fba3 2301 	umull	r2, r3, r3, r1
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	1aca      	subs	r2, r1, r3
 80014a2:	4613      	mov	r3, r2
 80014a4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d121      	bne.n	80014f0 <lcd_ShowIntNum+0xac>
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	429a      	cmp	r2, r3
 80014b4:	da1c      	bge.n	80014f0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d117      	bne.n	80014ec <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	fb12 f303 	smulbb	r3, r2, r3
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	4413      	add	r3, r2
 80014ce:	b298      	uxth	r0, r3
 80014d0:	8c3a      	ldrh	r2, [r7, #32]
 80014d2:	88b9      	ldrh	r1, [r7, #4]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	2220      	movs	r2, #32
 80014e6:	f7ff fec1 	bl	800126c <lcd_ShowChar>
				continue;
 80014ea:	e01a      	b.n	8001522 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	fb12 f303 	smulbb	r3, r2, r3
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4413      	add	r3, r2
 8001502:	b298      	uxth	r0, r3
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	3330      	adds	r3, #48	@ 0x30
 8001508:	b2da      	uxtb	r2, r3
 800150a:	8c3c      	ldrh	r4, [r7, #32]
 800150c:	88b9      	ldrh	r1, [r7, #4]
 800150e:	2300      	movs	r3, #0
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	4623      	mov	r3, r4
 800151e:	f7ff fea5 	bl	800126c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	787b      	ldrb	r3, [r7, #1]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3a1      	bcc.n	8001474 <lcd_ShowIntNum+0x30>
	}
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	cccccccd 	.word	0xcccccccd

08001540 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <lcd_SetDir+0x44>)
 800155c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001560:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <lcd_SetDir+0x44>)
 8001564:	22f0      	movs	r2, #240	@ 0xf0
 8001566:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001568:	e006      	b.n	8001578 <lcd_SetDir+0x38>
		lcddev.width=240;
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <lcd_SetDir+0x44>)
 800156c:	22f0      	movs	r2, #240	@ 0xf0
 800156e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <lcd_SetDir+0x44>)
 8001572:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001576:	805a      	strh	r2, [r3, #2]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20000184 	.word	0x20000184

08001588 <lcd_init>:


void lcd_init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001592:	48aa      	ldr	r0, [pc, #680]	@ (800183c <lcd_init+0x2b4>)
 8001594:	f001 fbe4 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001598:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800159c:	f001 f87c 	bl	8002698 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a6:	48a5      	ldr	r0, [pc, #660]	@ (800183c <lcd_init+0x2b4>)
 80015a8:	f001 fbda 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015b0:	f001 f872 	bl	8002698 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ffc3 	bl	8001540 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80015ba:	20d3      	movs	r0, #211	@ 0xd3
 80015bc:	f7ff fd86 	bl	80010cc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80015c0:	f7ff fda4 	bl	800110c <LCD_RD_DATA>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001840 <lcd_init+0x2b8>)
 80015ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80015cc:	f7ff fd9e 	bl	800110c <LCD_RD_DATA>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001840 <lcd_init+0x2b8>)
 80015d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80015d8:	f7ff fd98 	bl	800110c <LCD_RD_DATA>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	4b97      	ldr	r3, [pc, #604]	@ (8001840 <lcd_init+0x2b8>)
 80015e2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80015e4:	4b96      	ldr	r3, [pc, #600]	@ (8001840 <lcd_init+0x2b8>)
 80015e6:	889b      	ldrh	r3, [r3, #4]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b94      	ldr	r3, [pc, #592]	@ (8001840 <lcd_init+0x2b8>)
 80015ee:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80015f0:	f7ff fd8c 	bl	800110c <LCD_RD_DATA>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b91      	ldr	r3, [pc, #580]	@ (8001840 <lcd_init+0x2b8>)
 80015fa:	889b      	ldrh	r3, [r3, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b8f      	ldr	r3, [pc, #572]	@ (8001840 <lcd_init+0x2b8>)
 8001602:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001604:	20cf      	movs	r0, #207	@ 0xcf
 8001606:	f7ff fd61 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fd6e 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001610:	20c1      	movs	r0, #193	@ 0xc1
 8001612:	f7ff fd6b 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001616:	2030      	movs	r0, #48	@ 0x30
 8001618:	f7ff fd68 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800161c:	20ed      	movs	r0, #237	@ 0xed
 800161e:	f7ff fd55 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001622:	2064      	movs	r0, #100	@ 0x64
 8001624:	f7ff fd62 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001628:	2003      	movs	r0, #3
 800162a:	f7ff fd5f 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800162e:	2012      	movs	r0, #18
 8001630:	f7ff fd5c 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001634:	2081      	movs	r0, #129	@ 0x81
 8001636:	f7ff fd59 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800163a:	20e8      	movs	r0, #232	@ 0xe8
 800163c:	f7ff fd46 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001640:	2085      	movs	r0, #133	@ 0x85
 8001642:	f7ff fd53 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001646:	2010      	movs	r0, #16
 8001648:	f7ff fd50 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800164c:	207a      	movs	r0, #122	@ 0x7a
 800164e:	f7ff fd4d 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001652:	20cb      	movs	r0, #203	@ 0xcb
 8001654:	f7ff fd3a 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001658:	2039      	movs	r0, #57	@ 0x39
 800165a:	f7ff fd47 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800165e:	202c      	movs	r0, #44	@ 0x2c
 8001660:	f7ff fd44 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fd41 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800166a:	2034      	movs	r0, #52	@ 0x34
 800166c:	f7ff fd3e 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff fd3b 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001676:	20f7      	movs	r0, #247	@ 0xf7
 8001678:	f7ff fd28 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800167c:	2020      	movs	r0, #32
 800167e:	f7ff fd35 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001682:	20ea      	movs	r0, #234	@ 0xea
 8001684:	f7ff fd22 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fd2f 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fd2c 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001694:	20c0      	movs	r0, #192	@ 0xc0
 8001696:	f7ff fd19 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800169a:	201b      	movs	r0, #27
 800169c:	f7ff fd26 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80016a0:	20c1      	movs	r0, #193	@ 0xc1
 80016a2:	f7ff fd13 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fd20 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80016ac:	20c5      	movs	r0, #197	@ 0xc5
 80016ae:	f7ff fd0d 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80016b2:	2030      	movs	r0, #48	@ 0x30
 80016b4:	f7ff fd1a 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80016b8:	2030      	movs	r0, #48	@ 0x30
 80016ba:	f7ff fd17 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80016be:	20c7      	movs	r0, #199	@ 0xc7
 80016c0:	f7ff fd04 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80016c4:	20b7      	movs	r0, #183	@ 0xb7
 80016c6:	f7ff fd11 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80016ca:	2036      	movs	r0, #54	@ 0x36
 80016cc:	f7ff fcfe 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80016d0:	2008      	movs	r0, #8
 80016d2:	f7ff fd0b 	bl	80010ec <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80016d6:	203a      	movs	r0, #58	@ 0x3a
 80016d8:	f7ff fcf8 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80016dc:	2055      	movs	r0, #85	@ 0x55
 80016de:	f7ff fd05 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80016e2:	20b1      	movs	r0, #177	@ 0xb1
 80016e4:	f7ff fcf2 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff fcff 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80016ee:	201a      	movs	r0, #26
 80016f0:	f7ff fcfc 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80016f4:	20b6      	movs	r0, #182	@ 0xb6
 80016f6:	f7ff fce9 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f7ff fcf6 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001700:	20a2      	movs	r0, #162	@ 0xa2
 8001702:	f7ff fcf3 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001706:	20f2      	movs	r0, #242	@ 0xf2
 8001708:	f7ff fce0 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fced 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001712:	2026      	movs	r0, #38	@ 0x26
 8001714:	f7ff fcda 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fce7 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800171e:	20e0      	movs	r0, #224	@ 0xe0
 8001720:	f7ff fcd4 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001724:	200f      	movs	r0, #15
 8001726:	f7ff fce1 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800172a:	202a      	movs	r0, #42	@ 0x2a
 800172c:	f7ff fcde 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001730:	2028      	movs	r0, #40	@ 0x28
 8001732:	f7ff fcdb 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001736:	2008      	movs	r0, #8
 8001738:	f7ff fcd8 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800173c:	200e      	movs	r0, #14
 800173e:	f7ff fcd5 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001742:	2008      	movs	r0, #8
 8001744:	f7ff fcd2 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001748:	2054      	movs	r0, #84	@ 0x54
 800174a:	f7ff fccf 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800174e:	20a9      	movs	r0, #169	@ 0xa9
 8001750:	f7ff fccc 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001754:	2043      	movs	r0, #67	@ 0x43
 8001756:	f7ff fcc9 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800175a:	200a      	movs	r0, #10
 800175c:	f7ff fcc6 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001760:	200f      	movs	r0, #15
 8001762:	f7ff fcc3 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fcc0 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fcbd 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fcba 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fcb7 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800177e:	20e1      	movs	r0, #225	@ 0xe1
 8001780:	f7ff fca4 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fcb1 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800178a:	2015      	movs	r0, #21
 800178c:	f7ff fcae 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001790:	2017      	movs	r0, #23
 8001792:	f7ff fcab 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001796:	2007      	movs	r0, #7
 8001798:	f7ff fca8 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800179c:	2011      	movs	r0, #17
 800179e:	f7ff fca5 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80017a2:	2006      	movs	r0, #6
 80017a4:	f7ff fca2 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80017a8:	202b      	movs	r0, #43	@ 0x2b
 80017aa:	f7ff fc9f 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80017ae:	2056      	movs	r0, #86	@ 0x56
 80017b0:	f7ff fc9c 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80017b4:	203c      	movs	r0, #60	@ 0x3c
 80017b6:	f7ff fc99 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80017ba:	2005      	movs	r0, #5
 80017bc:	f7ff fc96 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80017c0:	2010      	movs	r0, #16
 80017c2:	f7ff fc93 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017c6:	200f      	movs	r0, #15
 80017c8:	f7ff fc90 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017cc:	203f      	movs	r0, #63	@ 0x3f
 80017ce:	f7ff fc8d 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017d2:	203f      	movs	r0, #63	@ 0x3f
 80017d4:	f7ff fc8a 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017d8:	200f      	movs	r0, #15
 80017da:	f7ff fc87 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80017de:	202b      	movs	r0, #43	@ 0x2b
 80017e0:	f7ff fc74 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fc81 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fc7e 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fc7b 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80017f6:	203f      	movs	r0, #63	@ 0x3f
 80017f8:	f7ff fc78 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80017fc:	202a      	movs	r0, #42	@ 0x2a
 80017fe:	f7ff fc65 	bl	80010cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fc72 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fc6f 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fc6c 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001814:	20ef      	movs	r0, #239	@ 0xef
 8001816:	f7ff fc69 	bl	80010ec <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800181a:	2011      	movs	r0, #17
 800181c:	f7ff fc56 	bl	80010cc <LCD_WR_REG>
	HAL_Delay(120);
 8001820:	2078      	movs	r0, #120	@ 0x78
 8001822:	f000 ff39 	bl	8002698 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001826:	2029      	movs	r0, #41	@ 0x29
 8001828:	f7ff fc50 	bl	80010cc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001832:	4804      	ldr	r0, [pc, #16]	@ (8001844 <lcd_init+0x2bc>)
 8001834:	f001 fa94 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020800 	.word	0x40020800
 8001840:	20000184 	.word	0x20000184
 8001844:	40020000 	.word	0x40020000

08001848 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b08b      	sub	sp, #44	@ 0x2c
 800184c:	af04      	add	r7, sp, #16
 800184e:	60ba      	str	r2, [r7, #8]
 8001850:	461a      	mov	r2, r3
 8001852:	4603      	mov	r3, r0
 8001854:	81fb      	strh	r3, [r7, #14]
 8001856:	460b      	mov	r3, r1
 8001858:	81bb      	strh	r3, [r7, #12]
 800185a:	4613      	mov	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800185e:	89fb      	ldrh	r3, [r7, #14]
 8001860:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001866:	e048      	b.n	80018fa <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d145      	bne.n	80018fa <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800186e:	89fa      	ldrh	r2, [r7, #14]
 8001870:	4b26      	ldr	r3, [pc, #152]	@ (800190c <lcd_ShowStr+0xc4>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	429a      	cmp	r2, r3
 8001882:	dc3f      	bgt.n	8001904 <lcd_ShowStr+0xbc>
 8001884:	89ba      	ldrh	r2, [r7, #12]
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <lcd_ShowStr+0xc4>)
 8001888:	885b      	ldrh	r3, [r3, #2]
 800188a:	4619      	mov	r1, r3
 800188c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001890:	1acb      	subs	r3, r1, r3
 8001892:	429a      	cmp	r2, r3
 8001894:	dc36      	bgt.n	8001904 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b80      	cmp	r3, #128	@ 0x80
 800189c:	d902      	bls.n	80018a4 <lcd_ShowStr+0x5c>
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
 80018a2:	e02a      	b.n	80018fa <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b0d      	cmp	r3, #13
 80018aa:	d10b      	bne.n	80018c4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80018ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80018b8:	8abb      	ldrh	r3, [r7, #20]
 80018ba:	81fb      	strh	r3, [r7, #14]
					str++;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3301      	adds	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	e017      	b.n	80018f4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	88fc      	ldrh	r4, [r7, #6]
 80018ca:	89b9      	ldrh	r1, [r7, #12]
 80018cc:	89f8      	ldrh	r0, [r7, #14]
 80018ce:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4623      	mov	r3, r4
 80018e0:	f7ff fcc4 	bl	800126c <lcd_ShowChar>
					x+=sizey/2;
 80018e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	89fb      	ldrh	r3, [r7, #14]
 80018f0:	4413      	add	r3, r2
 80018f2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1b2      	bne.n	8001868 <lcd_ShowStr+0x20>
 8001902:	e000      	b.n	8001906 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001904:	bf00      	nop
			}
		}
	}
}
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd90      	pop	{r4, r7, pc}
 800190c:	20000184 	.word	0x20000184

08001910 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af04      	add	r7, sp, #16
 8001916:	60ba      	str	r2, [r7, #8]
 8001918:	461a      	mov	r2, r3
 800191a:	4603      	mov	r3, r0
 800191c:	81fb      	strh	r3, [r7, #14]
 800191e:	460b      	mov	r3, r1
 8001920:	81bb      	strh	r3, [r7, #12]
 8001922:	4613      	mov	r3, r2
 8001924:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001926:	68b8      	ldr	r0, [r7, #8]
 8001928:	f7fe fc52 	bl	80001d0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <lcd_StrCenter+0x60>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	8afb      	ldrh	r3, [r7, #22]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	0fda      	lsrs	r2, r3, #31
 800193e:	4413      	add	r3, r2
 8001940:	105b      	asrs	r3, r3, #1
 8001942:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001944:	89fa      	ldrh	r2, [r7, #14]
 8001946:	8abb      	ldrh	r3, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	b298      	uxth	r0, r3
 800194c:	88fa      	ldrh	r2, [r7, #6]
 800194e:	89b9      	ldrh	r1, [r7, #12]
 8001950:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	8c3b      	ldrh	r3, [r7, #32]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f7ff ff70 	bl	8001848 <lcd_ShowStr>
}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000184 	.word	0x20000184

08001974 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	2140      	movs	r1, #64	@ 0x40
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <led7_init+0x14>)
 800197e:	f001 f9ef 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40021800 	.word	0x40021800

0800198c <led7_Scan>:

void led7_Scan(){
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001990:	4b3f      	ldr	r3, [pc, #252]	@ (8001a90 <led7_Scan+0x104>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	b29a      	uxth	r2, r3
 8001998:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <led7_Scan+0x104>)
 800199a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800199c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <led7_Scan+0x108>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001a98 <led7_Scan+0x10c>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <led7_Scan+0x104>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b36      	ldr	r3, [pc, #216]	@ (8001a90 <led7_Scan+0x104>)
 80019b6:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80019b8:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <led7_Scan+0x108>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d847      	bhi.n	8001a50 <led7_Scan+0xc4>
 80019c0:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <led7_Scan+0x3c>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019f7 	.word	0x080019f7
 80019d0:	08001a15 	.word	0x08001a15
 80019d4:	08001a33 	.word	0x08001a33
	case 0:
		spi_buffer |= 0x00b0;
 80019d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <led7_Scan+0x104>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <led7_Scan+0x104>)
 80019e4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <led7_Scan+0x104>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <led7_Scan+0x104>)
 80019f2:	801a      	strh	r2, [r3, #0]
		break;
 80019f4:	e02d      	b.n	8001a52 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <led7_Scan+0x104>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <led7_Scan+0x104>)
 8001a02:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001a04:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <led7_Scan+0x104>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	f023 0320 	bic.w	r3, r3, #32
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <led7_Scan+0x104>)
 8001a10:	801a      	strh	r2, [r3, #0]
		break;
 8001a12:	e01e      	b.n	8001a52 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <led7_Scan+0x104>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <led7_Scan+0x104>)
 8001a20:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <led7_Scan+0x104>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	f023 0310 	bic.w	r3, r3, #16
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <led7_Scan+0x104>)
 8001a2e:	801a      	strh	r2, [r3, #0]
		break;
 8001a30:	e00f      	b.n	8001a52 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <led7_Scan+0x104>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <led7_Scan+0x104>)
 8001a3e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <led7_Scan+0x104>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <led7_Scan+0x104>)
 8001a4c:	801a      	strh	r2, [r3, #0]
		break;
 8001a4e:	e000      	b.n	8001a52 <led7_Scan+0xc6>
	default:
		break;
 8001a50:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <led7_Scan+0x108>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	425a      	negs	r2, r3
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	f002 0203 	and.w	r2, r2, #3
 8001a62:	bf58      	it	pl
 8001a64:	4253      	negpl	r3, r2
 8001a66:	4a0b      	ldr	r2, [pc, #44]	@ (8001a94 <led7_Scan+0x108>)
 8001a68:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2140      	movs	r1, #64	@ 0x40
 8001a6e:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <led7_Scan+0x110>)
 8001a70:	f001 f976 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001a74:	2301      	movs	r3, #1
 8001a76:	2202      	movs	r2, #2
 8001a78:	4905      	ldr	r1, [pc, #20]	@ (8001a90 <led7_Scan+0x104>)
 8001a7a:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <led7_Scan+0x114>)
 8001a7c:	f002 fe6b 	bl	8004756 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2140      	movs	r1, #64	@ 0x40
 8001a84:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <led7_Scan+0x110>)
 8001a86:	f001 f96b 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000001c 	.word	0x2000001c
 8001a94:	2000018c 	.word	0x2000018c
 8001a98:	20000018 	.word	0x20000018
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	200001a8 	.word	0x200001a8

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int status =0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
int sta=1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	623b      	str	r3, [r7, #32]
char* update_request[6] = {"Seconds?", "Minutes?", "Hours?", "Days?", "Months?", "Years?"};
 8001ab2:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <main+0xdc>)
 8001ab4:	f107 0408 	add.w	r4, r7, #8
 8001ab8:	461d      	mov	r5, r3
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ac2:	e884 0003 	stmia.w	r4, {r0, r1}
uint8_t response[2] = {0};
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aca:	f000 fd73 	bl	80025b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ace:	f000 f863 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad2:	f7ff f98d 	bl	8000df0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ad6:	f000 fb1b 	bl	8002110 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001ada:	f000 f9e7 	bl	8001eac <MX_SPI1_Init>
  MX_FSMC_Init();
 8001ade:	f7ff f8b7 	bl	8000c50 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001ae2:	f7ff fa7d 	bl	8000fe0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ae6:	f000 fc83 	bl	80023f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001aea:	f000 f8bf 	bl	8001c6c <system_init>
//		}
//		if (status == 2) {
//			Flashing_alarm(sta);
//		}

	  if (flag_timer2){
 8001aee:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <main+0xe0>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d031      	beq.n	8001b5a <main+0xb6>
		  setTimer2(50);
 8001af6:	2032      	movs	r0, #50	@ 0x32
 8001af8:	f000 f8ea 	bl	8001cd0 <setTimer2>
		  button_Scan();
 8001afc:	f7fe fd44 	bl	8000588 <button_Scan>
//		  ds3231_ReadTime();
//		  if(status == NORMAL)
			  fsm(status);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ff2b 	bl	8000960 <fsm>
			if (button_count[1] == 1) {
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <main+0xe4>)
 8001b0c:	885b      	ldrh	r3, [r3, #2]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d119      	bne.n	8001b46 <main+0xa2>
				lcd_Clear(BLACK);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fb58 	bl	80011c8 <lcd_Clear>
				status++;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
				if (status > UART_UPDATING)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	dd01      	ble.n	8001b28 <main+0x84>
					status = NORMAL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24

				if (status == UART_UPDATING) {
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d103      	bne.n	8001b36 <main+0x92>
//					CalibrateInit();
					setTimer5(10000);
 8001b2e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001b32:	f000 f921 	bl	8001d78 <setTimer5>
				}
				counter = 0;
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <main+0xe8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
				setTimer4(250);
 8001b3c:	20fa      	movs	r0, #250	@ 0xfa
 8001b3e:	f000 f8ff 	bl	8001d40 <setTimer4>
				sta = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	623b      	str	r3, [r7, #32]
			}
			if (dataReady && button_count[0] == 1) {
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <main+0xec>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <main+0xb6>
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <main+0xe4>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <main+0xb6>
				BufferReading();
 8001b56:	f000 fb71 	bl	800223c <BufferReading>
//				fsm(status);
//				for ( attempt = 0; attempt < 3; attempt++) {
//					uart_Rs232SendString(update_request[counter]);
//					HAL_StatusTypeDef s=HAL_UART_Receive(&huart1, response, sizeof(response),
//							10000);
		if (button_count[15] == 1) {
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <main+0xe4>)
 8001b5c:	8bdb      	ldrh	r3, [r3, #30]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d1c5      	bne.n	8001aee <main+0x4a>
			if (HAL_UART_Receive(&huart1, response, sizeof(response), 10000)
 8001b62:	1d39      	adds	r1, r7, #4
 8001b64:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b68:	2202      	movs	r2, #2
 8001b6a:	480a      	ldr	r0, [pc, #40]	@ (8001b94 <main+0xf0>)
 8001b6c:	f004 f8b7 	bl	8005cde <HAL_UART_Receive>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1bb      	bne.n	8001aee <main+0x4a>
					== HAL_OK) {
				uart_Rs232SendNum(response);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fbc1 	bl	8002300 <uart_Rs232SendNum>
	  if (flag_timer2){
 8001b7e:	e7b6      	b.n	8001aee <main+0x4a>
 8001b80:	0800794c 	.word	0x0800794c
 8001b84:	20000190 	.word	0x20000190
 8001b88:	20000098 	.word	0x20000098
 8001b8c:	200000bc 	.word	0x200000bc
 8001b90:	20000338 	.word	0x20000338
 8001b94:	2000033c 	.word	0x2000033c

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b094      	sub	sp, #80	@ 0x50
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	2230      	movs	r2, #48	@ 0x30
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 f9c0 	bl	8006f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <SystemClock_Config+0xcc>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	4a27      	ldr	r2, [pc, #156]	@ (8001c64 <SystemClock_Config+0xcc>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <SystemClock_Config+0xd0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a21      	ldr	r2, [pc, #132]	@ (8001c68 <SystemClock_Config+0xd0>)
 8001be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <SystemClock_Config+0xd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c00:	2302      	movs	r3, #2
 8001c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c0c:	23a8      	movs	r3, #168	@ 0xa8
 8001c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c14:	2304      	movs	r3, #4
 8001c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 f879 	bl	8003d14 <HAL_RCC_OscConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c28:	f000 f842 	bl	8001cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2105      	movs	r1, #5
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fada 	bl	8004204 <HAL_RCC_ClockConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c56:	f000 f82b 	bl	8001cb0 <Error_Handler>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	3750      	adds	r7, #80	@ 0x50
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40007000 	.word	0x40007000

08001c6c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2120      	movs	r1, #32
 8001c74:	480d      	ldr	r0, [pc, #52]	@ (8001cac <system_init+0x40>)
 8001c76:	f001 f873 	bl	8002d60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2140      	movs	r1, #64	@ 0x40
 8001c7e:	480b      	ldr	r0, [pc, #44]	@ (8001cac <system_init+0x40>)
 8001c80:	f001 f86e 	bl	8002d60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2110      	movs	r1, #16
 8001c88:	4808      	ldr	r0, [pc, #32]	@ (8001cac <system_init+0x40>)
 8001c8a:	f001 f869 	bl	8002d60 <HAL_GPIO_WritePin>
	  timer_init();
 8001c8e:	f000 f815 	bl	8001cbc <timer_init>
	  led7_init();
 8001c92:	f7ff fe6f 	bl	8001974 <led7_init>
	  button_init();
 8001c96:	f7fe fc6b 	bl	8000570 <button_init>
	  lcd_init();
 8001c9a:	f7ff fc75 	bl	8001588 <lcd_init>
//	  ds3231_init();
	  uart_init_rs232();
 8001c9e:	f000 fb07 	bl	80022b0 <uart_init_rs232>
	  setTimer2(50);
 8001ca2:	2032      	movs	r0, #50	@ 0x32
 8001ca4:	f000 f814 	bl	8001cd0 <setTimer2>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>

08001cbc <timer_init>:
uint16_t timer4_counter = 0;
uint16_t timer4_MUL = 0;
uint16_t flag_timer5 = 0;
uint16_t timer5_counter = 0;
uint16_t timer5_MUL = 0;
void timer_init(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <timer_init+0x10>)
 8001cc2:	f003 fafb 	bl	80052bc <HAL_TIM_Base_Start_IT>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000204 	.word	0x20000204

08001cd0 <setTimer2>:

void setTimer2(uint16_t duration){
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <setTimer2+0x2c>)
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <setTimer2+0x2c>)
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <setTimer2+0x30>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <setTimer2+0x34>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	801a      	strh	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000194 	.word	0x20000194
 8001d00:	20000192 	.word	0x20000192
 8001d04:	20000190 	.word	0x20000190

08001d08 <setTimer3>:
void setTimer3(uint16_t duration){
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8001d12:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <setTimer3+0x2c>)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <setTimer3+0x2c>)
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <setTimer3+0x30>)
 8001d1e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <setTimer3+0x34>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	801a      	strh	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000019a 	.word	0x2000019a
 8001d38:	20000198 	.word	0x20000198
 8001d3c:	20000196 	.word	0x20000196

08001d40 <setTimer4>:
void setTimer4(uint16_t duration){
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8001d4a:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <setTimer4+0x2c>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <setTimer4+0x2c>)
 8001d52:	881a      	ldrh	r2, [r3, #0]
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <setTimer4+0x30>)
 8001d56:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <setTimer4+0x34>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200001a0 	.word	0x200001a0
 8001d70:	2000019e 	.word	0x2000019e
 8001d74:	2000019c 	.word	0x2000019c

08001d78 <setTimer5>:
void setTimer5(uint16_t duration){
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 8001d82:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <setTimer5+0x2c>)
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer4_MUL;
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <setTimer5+0x30>)
 8001d8a:	881a      	ldrh	r2, [r3, #0]
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <setTimer5+0x34>)
 8001d8e:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <setTimer5+0x38>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	801a      	strh	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	200001a6 	.word	0x200001a6
 8001da8:	200001a0 	.word	0x200001a0
 8001dac:	200001a4 	.word	0x200001a4
 8001db0:	200001a2 	.word	0x200001a2

08001db4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc4:	d155      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if (timer2_counter > 0) {
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d010      	beq.n	8001df0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001dce:	4b2b      	ldr	r3, [pc, #172]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001dd8:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8001dda:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001de2:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001de8:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001dea:	881a      	ldrh	r2, [r3, #0]
 8001dec:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001dee:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer3_counter > 0) {
 8001df0:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d010      	beq.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8001df8:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b21      	ldr	r3, [pc, #132]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001e02:	801a      	strh	r2, [r3, #0]
			if (timer3_counter == 0) {
 8001e04:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001e18:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer4_counter > 0) {
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e2c:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8001e3c:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e3e:	881a      	ldrh	r2, [r3, #0]
 8001e40:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e42:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer5_counter > 0) {
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0xba>
					timer5_counter--;
 8001e4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e56:	801a      	strh	r2, [r3, #0]
					if (timer5_counter == 0) {
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0xba>
						flag_timer5 = 1;
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	801a      	strh	r2, [r3, #0]
						timer5_counter = timer5_MUL;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001e68:	881a      	ldrh	r2, [r3, #0]
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e6c:	801a      	strh	r2, [r3, #0]
					}
				}
		led7_Scan();
 8001e6e:	f7ff fd8d 	bl	800198c <led7_Scan>
	}
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000192 	.word	0x20000192
 8001e80:	20000190 	.word	0x20000190
 8001e84:	20000194 	.word	0x20000194
 8001e88:	20000198 	.word	0x20000198
 8001e8c:	20000196 	.word	0x20000196
 8001e90:	2000019a 	.word	0x2000019a
 8001e94:	2000019e 	.word	0x2000019e
 8001e98:	2000019c 	.word	0x2000019c
 8001e9c:	200001a0 	.word	0x200001a0
 8001ea0:	200001a4 	.word	0x200001a4
 8001ea4:	200001a2 	.word	0x200001a2
 8001ea8:	200001a6 	.word	0x200001a6

08001eac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <MX_SPI1_Init+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001eb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ebe:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001edc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001ef8:	220a      	movs	r2, #10
 8001efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	@ (8001f10 <MX_SPI1_Init+0x64>)
 8001efe:	f002 fba1 	bl	8004644 <HAL_SPI_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f08:	f7ff fed2 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200001a8 	.word	0x200001a8
 8001f14:	40013000 	.word	0x40013000

08001f18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_SPI_MspInit+0x84>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d12b      	bne.n	8001f92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_SPI_MspInit+0x88>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_SPI_MspInit+0x88>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_SPI_MspInit+0x88>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_SPI_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <HAL_SPI_MspInit+0x88>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_SPI_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f72:	2338      	movs	r3, #56	@ 0x38
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f82:	2305      	movs	r3, #5
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <HAL_SPI_MspInit+0x8c>)
 8001f8e:	f000 fd4b 	bl	8002a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	@ 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40013000 	.word	0x40013000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020400 	.word	0x40020400

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	4a08      	ldr	r2, [pc, #32]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <NMI_Handler+0x4>

08002000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <UsageFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204e:	f000 fb03 	bl	8002658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM2_IRQHandler+0x10>)
 800205e:	f003 f99d 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000204 	.word	0x20000204

0800206c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <USART1_IRQHandler+0x10>)
 8002072:	f003 ff07 	bl	8005e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000033c 	.word	0x2000033c

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f004 ff54 	bl	8006f5c <__errno>
 80020b4:	4603      	mov	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <_sbrk+0x64>)
 80020d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20020000 	.word	0x20020000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	20000200 	.word	0x20000200
 80020e8:	200004d0 	.word	0x200004d0

080020ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <SystemInit+0x20>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	4a05      	ldr	r2, [pc, #20]	@ (800210c <SystemInit+0x20>)
 80020f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	463b      	mov	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800212c:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <MX_TIM2_Init+0x94>)
 800212e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <MX_TIM2_Init+0x94>)
 8002136:	f240 3247 	movw	r2, #839	@ 0x347
 800213a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <MX_TIM2_Init+0x94>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002142:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <MX_TIM2_Init+0x94>)
 8002144:	2263      	movs	r2, #99	@ 0x63
 8002146:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <MX_TIM2_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <MX_TIM2_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002154:	4813      	ldr	r0, [pc, #76]	@ (80021a4 <MX_TIM2_Init+0x94>)
 8002156:	f003 f861 	bl	800521c <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002160:	f7ff fda6 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	4619      	mov	r1, r3
 8002170:	480c      	ldr	r0, [pc, #48]	@ (80021a4 <MX_TIM2_Init+0x94>)
 8002172:	f003 fa1b 	bl	80055ac <HAL_TIM_ConfigClockSource>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800217c:	f7ff fd98 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002188:	463b      	mov	r3, r7
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_TIM2_Init+0x94>)
 800218e:	f003 fc37 	bl	8005a00 <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002198:	f7ff fd8a 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000204 	.word	0x20000204

080021a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d115      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	4a0b      	ldr	r2, [pc, #44]	@ (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	201c      	movs	r0, #28
 80021dc:	f000 fb5b 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021e0:	201c      	movs	r0, #28
 80021e2:	f000 fb74 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <BufferWrite>:
//bool BufferFull(){
//	return Full;
//}

// Function to add data to the buffer
void BufferWrite(uint8_t data) {
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]

    RingBuffer[head] = data;
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <BufferWrite+0x40>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4619      	mov	r1, r3
 8002206:	4a0c      	ldr	r2, [pc, #48]	@ (8002238 <BufferWrite+0x44>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	5453      	strb	r3, [r2, r1]
    head = (head + 1) % BUFFER_SIZE;
 800220c:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <BufferWrite+0x40>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	3301      	adds	r3, #1
 8002214:	425a      	negs	r2, r3
 8002216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800221a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800221e:	bf58      	it	pl
 8002220:	4253      	negpl	r3, r2
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <BufferWrite+0x40>)
 8002226:	801a      	strh	r2, [r3, #0]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	20000334 	.word	0x20000334
 8002238:	200002b4 	.word	0x200002b4

0800223c <BufferReading>:
void BufferReading(){
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
	while(pointer != head){
 8002242:	e01c      	b.n	800227e <BufferReading+0x42>
		uint8_t data = RingBuffer[pointer];
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <BufferReading+0x60>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <BufferReading+0x64>)
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	71fb      	strb	r3, [r7, #7]
		pointer=(pointer+1) % BUFFER_SIZE;
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <BufferReading+0x60>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	3301      	adds	r3, #1
 800225a:	425a      	negs	r2, r3
 800225c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002260:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002264:	bf58      	it	pl
 8002266:	4253      	negpl	r3, r2
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <BufferReading+0x60>)
 800226c:	801a      	strh	r2, [r3, #0]
		uart_Rs232SendNum(data-48);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	3b30      	subs	r3, #48	@ 0x30
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f844 	bl	8002300 <uart_Rs232SendNum>
		uart_Rs232SendString("	");
 8002278:	480a      	ldr	r0, [pc, #40]	@ (80022a4 <BufferReading+0x68>)
 800227a:	f000 f827 	bl	80022cc <uart_Rs232SendString>
	while(pointer != head){
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <BufferReading+0x60>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <BufferReading+0x6c>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	429a      	cmp	r2, r3
 800228c:	d1da      	bne.n	8002244 <BufferReading+0x8>
	}
	dataReady=0;
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <BufferReading+0x70>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000336 	.word	0x20000336
 80022a0:	200002b4 	.word	0x200002b4
 80022a4:	0800796c 	.word	0x0800796c
 80022a8:	20000334 	.word	0x20000334
 80022ac:	20000338 	.word	0x20000338

080022b0 <uart_init_rs232>:
void uart_init_rs232(){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80022b4:	2201      	movs	r2, #1
 80022b6:	4903      	ldr	r1, [pc, #12]	@ (80022c4 <uart_init_rs232+0x14>)
 80022b8:	4803      	ldr	r0, [pc, #12]	@ (80022c8 <uart_init_rs232+0x18>)
 80022ba:	f003 fdb2 	bl	8005e22 <HAL_UART_Receive_IT>
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000024c 	.word	0x2000024c
 80022c8:	2000033c 	.word	0x2000033c

080022cc <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <uart_Rs232SendString+0x28>)
 80022d8:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <uart_Rs232SendString+0x2c>)
 80022da:	f004 fe07 	bl	8006eec <siprintf>
 80022de:	4603      	mov	r3, r0
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	230a      	movs	r3, #10
 80022e4:	4904      	ldr	r1, [pc, #16]	@ (80022f8 <uart_Rs232SendString+0x2c>)
 80022e6:	4805      	ldr	r0, [pc, #20]	@ (80022fc <uart_Rs232SendString+0x30>)
 80022e8:	f003 fc67 	bl	8005bba <HAL_UART_Transmit>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	08007970 	.word	0x08007970
 80022f8:	20000250 	.word	0x20000250
 80022fc:	2000033c 	.word	0x2000033c

08002300 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 800230e:	4824      	ldr	r0, [pc, #144]	@ (80023a0 <uart_Rs232SendNum+0xa0>)
 8002310:	f7ff ffdc 	bl	80022cc <uart_Rs232SendString>
		return;
 8002314:	e040      	b.n	8002398 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 800231a:	230a      	movs	r3, #10
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	e038      	b.n	8002392 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3b01      	subs	r3, #1
 8002324:	4619      	mov	r1, r3
 8002326:	200a      	movs	r0, #10
 8002328:	f7ff f870 	bl	800140c <mypow>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4293      	cmp	r3, r2
 8002334:	d315      	bcc.n	8002362 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	4619      	mov	r1, r3
 8002340:	200a      	movs	r0, #10
 8002342:	f7ff f863 	bl	800140c <mypow>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4914      	ldr	r1, [pc, #80]	@ (80023a4 <uart_Rs232SendNum+0xa4>)
 8002354:	4814      	ldr	r0, [pc, #80]	@ (80023a8 <uart_Rs232SendNum+0xa8>)
 8002356:	f004 fdc9 	bl	8006eec <siprintf>
            uart_Rs232SendString(msg);
 800235a:	4813      	ldr	r0, [pc, #76]	@ (80023a8 <uart_Rs232SendNum+0xa8>)
 800235c:	f7ff ffb6 	bl	80022cc <uart_Rs232SendString>
 8002360:	e005      	b.n	800236e <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8002368:	480d      	ldr	r0, [pc, #52]	@ (80023a0 <uart_Rs232SendNum+0xa0>)
 800236a:	f7ff ffaf 	bl	80022cc <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3b01      	subs	r3, #1
 8002372:	4619      	mov	r1, r3
 8002374:	200a      	movs	r0, #10
 8002376:	f7ff f849 	bl	800140c <mypow>
 800237a:	4603      	mov	r3, r0
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	fbb3 f1f2 	udiv	r1, r3, r2
 8002384:	fb01 f202 	mul.w	r2, r1, r2
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3b01      	subs	r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	dcc3      	bgt.n	8002320 <uart_Rs232SendNum+0x20>
    }
}
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	08007974 	.word	0x08007974
 80023a4:	08007978 	.word	0x08007978
 80023a8:	20000250 	.word	0x20000250

080023ac <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a09      	ldr	r2, [pc, #36]	@ (80023e0 <HAL_UART_RxCpltCallback+0x34>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10c      	bne.n	80023d8 <HAL_UART_RxCpltCallback+0x2c>
		// rs232 isr
		// Store received data in ring buffer
		BufferWrite (receive_buffer1);
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_UART_RxCpltCallback+0x38>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff16 	bl	80021f4 <BufferWrite>
		dataReady = 1; // Set flag to indicate new data
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <HAL_UART_RxCpltCallback+0x3c>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]



		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	4904      	ldr	r1, [pc, #16]	@ (80023e4 <HAL_UART_RxCpltCallback+0x38>)
 80023d2:	4806      	ldr	r0, [pc, #24]	@ (80023ec <HAL_UART_RxCpltCallback+0x40>)
 80023d4:	f003 fd25 	bl	8005e22 <HAL_UART_Receive_IT>
	}
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40011000 	.word	0x40011000
 80023e4:	2000024c 	.word	0x2000024c
 80023e8:	20000338 	.word	0x20000338
 80023ec:	2000033c 	.word	0x2000033c

080023f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <MX_USART1_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002428:	f003 fb7a 	bl	8005b20 <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f7ff fc3d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000033c 	.word	0x2000033c
 8002440:	40011000 	.word	0x40011000

08002444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1d      	ldr	r2, [pc, #116]	@ (80024d8 <HAL_UART_MspInit+0x94>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d134      	bne.n	80024d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <HAL_UART_MspInit+0x98>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a1b      	ldr	r2, [pc, #108]	@ (80024dc <HAL_UART_MspInit+0x98>)
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_UART_MspInit+0x98>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_UART_MspInit+0x98>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <HAL_UART_MspInit+0x98>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_UART_MspInit+0x98>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800249e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b0:	2307      	movs	r3, #7
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	4809      	ldr	r0, [pc, #36]	@ (80024e0 <HAL_UART_MspInit+0x9c>)
 80024bc:	f000 fab4 	bl	8002a28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2025      	movs	r0, #37	@ 0x25
 80024c6:	f000 f9e6 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ca:	2025      	movs	r0, #37	@ 0x25
 80024cc:	f000 f9ff 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	@ 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020000 	.word	0x40020000

080024e4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	b2db      	uxtb	r3, r3
 8002506:	4413      	add	r3, r2
 8002508:	b2db      	uxtb	r3, r3
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <DEC2BCD+0x44>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	08db      	lsrs	r3, r3, #3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	b258      	sxtb	r0, r3
 8002532:	79fa      	ldrb	r2, [r7, #7]
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <DEC2BCD+0x44>)
 8002536:	fba3 1302 	umull	r1, r3, r3, r2
 800253a:	08d9      	lsrs	r1, r3, #3
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	b25b      	sxtb	r3, r3
 800254a:	4303      	orrs	r3, r0
 800254c:	b25b      	sxtb	r3, r3
 800254e:	b2db      	uxtb	r3, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	cccccccd 	.word	0xcccccccd

08002560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002564:	480d      	ldr	r0, [pc, #52]	@ (800259c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002566:	490e      	ldr	r1, [pc, #56]	@ (80025a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002568:	4a0e      	ldr	r2, [pc, #56]	@ (80025a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800256c:	e002      	b.n	8002574 <LoopCopyDataInit>

0800256e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002572:	3304      	adds	r3, #4

08002574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002578:	d3f9      	bcc.n	800256e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257a:	4a0b      	ldr	r2, [pc, #44]	@ (80025a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800257c:	4c0b      	ldr	r4, [pc, #44]	@ (80025ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002580:	e001      	b.n	8002586 <LoopFillZerobss>

08002582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002584:	3204      	adds	r2, #4

08002586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002588:	d3fb      	bcc.n	8002582 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800258a:	f7ff fdaf 	bl	80020ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800258e:	f004 fceb 	bl	8006f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002592:	f7ff fa87 	bl	8001aa4 <main>
  bx  lr    
 8002596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80025a4:	0800a960 	.word	0x0800a960
  ldr r2, =_sbss
 80025a8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80025ac:	200004cc 	.word	0x200004cc

080025b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC_IRQHandler>
	...

080025b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <HAL_Init+0x40>)
 80025be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_Init+0x40>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	@ (80025f4 <HAL_Init+0x40>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f94f 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	200f      	movs	r0, #15
 80025e4:	f000 f808 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7ff fcde 	bl	8001fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_InitTick+0x54>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_InitTick+0x58>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800260e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f967 	bl	80028ea <HAL_SYSTICK_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d80a      	bhi.n	8002642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f000 f92f 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002638:	4a06      	ldr	r2, [pc, #24]	@ (8002654 <HAL_InitTick+0x5c>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000020 	.word	0x20000020
 8002650:	20000028 	.word	0x20000028
 8002654:	20000024 	.word	0x20000024

08002658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_IncTick+0x20>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_IncTick+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a04      	ldr	r2, [pc, #16]	@ (800267c <HAL_IncTick+0x24>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000028 	.word	0x20000028
 800267c:	20000380 	.word	0x20000380

08002680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTick;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_GetTick+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000380 	.word	0x20000380

08002698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff ffee 	bl	8002680 <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d005      	beq.n	80026be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <HAL_Delay+0x44>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026be:	bf00      	nop
 80026c0:	f7ff ffde 	bl	8002680 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d8f7      	bhi.n	80026c0 <HAL_Delay+0x28>
  {
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000028 	.word	0x20000028

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4907      	ldr	r1, [pc, #28]	@ (800277c <__NVIC_EnableIRQ+0x38>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	@ (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	@ (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	@ 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	@ 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	@ (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff29 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff3e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff31 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffa2 	bl	800283c <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff feb6 	bl	8002680 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d008      	beq.n	8002934 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2280      	movs	r2, #128	@ 0x80
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e052      	b.n	80029da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0216 	bic.w	r2, r2, #22
 8002942:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002952:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d103      	bne.n	8002964 <HAL_DMA_Abort+0x62>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0208 	bic.w	r2, r2, #8
 8002972:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002984:	e013      	b.n	80029ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002986:	f7ff fe7b 	bl	8002680 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b05      	cmp	r3, #5
 8002992:	d90c      	bls.n	80029ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2203      	movs	r2, #3
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e015      	b.n	80029da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e4      	bne.n	8002986 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	223f      	movs	r2, #63	@ 0x3f
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d004      	beq.n	8002a00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2280      	movs	r2, #128	@ 0x80
 80029fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e00c      	b.n	8002a1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2205      	movs	r2, #5
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	@ 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e16b      	b.n	8002d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 815a 	bne.w	8002d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d005      	beq.n	8002a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d130      	bne.n	8002adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 0201 	and.w	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d017      	beq.n	8002b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d123      	bne.n	8002b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	08da      	lsrs	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80b4 	beq.w	8002d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b60      	ldr	r3, [pc, #384]	@ (8002d34 <HAL_GPIO_Init+0x30c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d34 <HAL_GPIO_Init+0x30c>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002d34 <HAL_GPIO_Init+0x30c>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bca:	4a5b      	ldr	r2, [pc, #364]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	@ (8002d3c <HAL_GPIO_Init+0x314>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02b      	beq.n	8002c4e <HAL_GPIO_Init+0x226>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a51      	ldr	r2, [pc, #324]	@ (8002d40 <HAL_GPIO_Init+0x318>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d025      	beq.n	8002c4a <HAL_GPIO_Init+0x222>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a50      	ldr	r2, [pc, #320]	@ (8002d44 <HAL_GPIO_Init+0x31c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01f      	beq.n	8002c46 <HAL_GPIO_Init+0x21e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4f      	ldr	r2, [pc, #316]	@ (8002d48 <HAL_GPIO_Init+0x320>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <HAL_GPIO_Init+0x21a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4e      	ldr	r2, [pc, #312]	@ (8002d4c <HAL_GPIO_Init+0x324>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x216>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4d      	ldr	r2, [pc, #308]	@ (8002d50 <HAL_GPIO_Init+0x328>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_Init+0x212>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4c      	ldr	r2, [pc, #304]	@ (8002d54 <HAL_GPIO_Init+0x32c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_Init+0x20e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4b      	ldr	r2, [pc, #300]	@ (8002d58 <HAL_GPIO_Init+0x330>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_Init+0x20a>
 8002c2e:	2307      	movs	r3, #7
 8002c30:	e00e      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c32:	2308      	movs	r3, #8
 8002c34:	e00c      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c36:	2306      	movs	r3, #6
 8002c38:	e00a      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x228>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	@ (8002d38 <HAL_GPIO_Init+0x310>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c92:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c98:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cbc:	4a27      	ldr	r2, [pc, #156]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc2:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d10:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <HAL_GPIO_Init+0x334>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	f67f ae90 	bls.w	8002a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021800 	.word	0x40021800
 8002d58:	40021c00 	.word	0x40021c00
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e12b      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe f93e 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	@ 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df8:	f001 fbfc 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a81      	ldr	r2, [pc, #516]	@ (8003008 <HAL_I2C_Init+0x274>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d807      	bhi.n	8002e18 <HAL_I2C_Init+0x84>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a80      	ldr	r2, [pc, #512]	@ (800300c <HAL_I2C_Init+0x278>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e006      	b.n	8002e26 <HAL_I2C_Init+0x92>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003010 <HAL_I2C_Init+0x27c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0e7      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a78      	ldr	r2, [pc, #480]	@ (8003014 <HAL_I2C_Init+0x280>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003008 <HAL_I2C_Init+0x274>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <HAL_I2C_Init+0xd4>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e009      	b.n	8002e7c <HAL_I2C_Init+0xe8>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a69      	ldr	r2, [pc, #420]	@ (8003018 <HAL_I2C_Init+0x284>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	495c      	ldr	r1, [pc, #368]	@ (8003008 <HAL_I2C_Init+0x274>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d819      	bhi.n	8002ed0 <HAL_I2C_Init+0x13c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_I2C_Init+0x138>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e59      	subs	r1, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	e051      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e04f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <HAL_I2C_Init+0x168>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e58      	subs	r0, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e012      	b.n	8002f22 <HAL_I2C_Init+0x18e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Init+0x196>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e022      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10e      	bne.n	8002f50 <HAL_I2C_Init+0x1bc>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e58      	subs	r0, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	440b      	add	r3, r1
 8002f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f4e:	e00f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	6809      	ldr	r1, [r1, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6911      	ldr	r1, [r2, #16]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	000186a0 	.word	0x000186a0
 800300c:	001e847f 	.word	0x001e847f
 8003010:	003d08ff 	.word	0x003d08ff
 8003014:	431bde83 	.word	0x431bde83
 8003018:	10624dd3 	.word	0x10624dd3

0800301c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003036:	f7ff fb23 	bl	8002680 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b20      	cmp	r3, #32
 8003046:	f040 80d9 	bne.w	80031fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2319      	movs	r3, #25
 8003050:	2201      	movs	r2, #1
 8003052:	496d      	ldr	r1, [pc, #436]	@ (8003208 <HAL_I2C_Mem_Write+0x1ec>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fc7f 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	e0cc      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Mem_Write+0x56>
 800306e:	2302      	movs	r3, #2
 8003070:	e0c5      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d007      	beq.n	8003098 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2221      	movs	r2, #33	@ 0x21
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2240      	movs	r2, #64	@ 0x40
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a3a      	ldr	r2, [r7, #32]
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a4d      	ldr	r2, [pc, #308]	@ (800320c <HAL_I2C_Mem_Write+0x1f0>)
 80030d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030da:	88f8      	ldrh	r0, [r7, #6]
 80030dc:	893a      	ldrh	r2, [r7, #8]
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4603      	mov	r3, r0
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fab6 	bl	800365c <I2C_RequestMemoryWrite>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d052      	beq.n	800319c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e081      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fd00 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	2b04      	cmp	r3, #4
 8003110:	d107      	bne.n	8003122 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003120:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06b      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11b      	bne.n	800319c <HAL_I2C_Mem_Write+0x180>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d017      	beq.n	800319c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1aa      	bne.n	80030fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fcec 	bl	8003b86 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d107      	bne.n	80031cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e016      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	00100002 	.word	0x00100002
 800320c:	ffff0000 	.word	0xffff0000

08003210 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	@ 0x30
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322a:	f7ff fa29 	bl	8002680 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b20      	cmp	r3, #32
 800323a:	f040 8208 	bne.w	800364e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2319      	movs	r3, #25
 8003244:	2201      	movs	r2, #1
 8003246:	497b      	ldr	r1, [pc, #492]	@ (8003434 <HAL_I2C_Mem_Read+0x224>)
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fb85 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
 8003256:	e1fb      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Mem_Read+0x56>
 8003262:	2302      	movs	r3, #2
 8003264:	e1f4      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d007      	beq.n	800328c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2222      	movs	r2, #34	@ 0x22
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2240      	movs	r2, #64	@ 0x40
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003438 <HAL_I2C_Mem_Read+0x228>)
 80032cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ce:	88f8      	ldrh	r0, [r7, #6]
 80032d0:	893a      	ldrh	r2, [r7, #8]
 80032d2:	8979      	ldrh	r1, [r7, #10]
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4603      	mov	r3, r0
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa52 	bl	8003788 <I2C_RequestMemoryRead>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1b0      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d113      	bne.n	800331e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	623b      	str	r3, [r7, #32]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e184      	b.n	8003628 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003322:	2b01      	cmp	r3, #1
 8003324:	d11b      	bne.n	800335e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e164      	b.n	8003628 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003362:	2b02      	cmp	r3, #2
 8003364:	d11b      	bne.n	800339e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003374:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	e144      	b.n	8003628 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033b4:	e138      	b.n	8003628 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	f200 80f1 	bhi.w	80035a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d123      	bne.n	8003410 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fc1b 	bl	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e139      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800340e:	e10b      	b.n	8003628 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003414:	2b02      	cmp	r3, #2
 8003416:	d14e      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341e:	2200      	movs	r2, #0
 8003420:	4906      	ldr	r1, [pc, #24]	@ (800343c <HAL_I2C_Mem_Read+0x22c>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa98 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e10e      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
 8003432:	bf00      	nop
 8003434:	00100002 	.word	0x00100002
 8003438:	ffff0000 	.word	0xffff0000
 800343c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034b4:	e0b8      	b.n	8003628 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034bc:	2200      	movs	r2, #0
 80034be:	4966      	ldr	r1, [pc, #408]	@ (8003658 <HAL_I2C_Mem_Read+0x448>)
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fa49 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0bf      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003518:	2200      	movs	r2, #0
 800351a:	494f      	ldr	r1, [pc, #316]	@ (8003658 <HAL_I2C_Mem_Read+0x448>)
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fa1b 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e091      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a0:	e042      	b.n	8003628 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb2e 	bl	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e04c      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d118      	bne.n	8003628 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f aec2 	bne.w	80033b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	3728      	adds	r7, #40	@ 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	00010004 	.word	0x00010004

0800365c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003684:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	2200      	movs	r2, #0
 800368e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f960 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ac:	d103      	bne.n	80036b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e05f      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	492d      	ldr	r1, [pc, #180]	@ (8003784 <I2C_RequestMemoryWrite+0x128>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f998 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04c      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa02 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e02b      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e021      	b.n	8003778 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f9dc 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	2b04      	cmp	r3, #4
 8003758:	d107      	bne.n	800376a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003768:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e005      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376e:	893b      	ldrh	r3, [r7, #8]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	00010002 	.word	0x00010002

08003788 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f8c2 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e8:	d103      	bne.n	80037f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0aa      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003804:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	4952      	ldr	r1, [pc, #328]	@ (8003954 <I2C_RequestMemoryRead+0x1cc>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8fa 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e097      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003834:	6a39      	ldr	r1, [r7, #32]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f964 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	2b04      	cmp	r3, #4
 8003848:	d107      	bne.n	800385a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003858:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e076      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]
 800386e:	e021      	b.n	80038b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	b29b      	uxth	r3, r3
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003880:	6a39      	ldr	r1, [r7, #32]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f93e 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	2b04      	cmp	r3, #4
 8003894:	d107      	bne.n	80038a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e050      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038aa:	893b      	ldrh	r3, [r7, #8]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b6:	6a39      	ldr	r1, [r7, #32]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f923 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d107      	bne.n	80038dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e035      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f82b 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003916:	d103      	bne.n	8003920 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e013      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	4906      	ldr	r1, [pc, #24]	@ (8003954 <I2C_RequestMemoryRead+0x1cc>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f863 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010002 	.word	0x00010002

08003958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003968:	e025      	b.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d021      	beq.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe fe85 	bl	8002680 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e023      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10d      	bne.n	80039dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	e00c      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d0b6      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a14:	e051      	b.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a24:	d123      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e046      	b.n	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d021      	beq.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe fe03 	bl	8002680 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e020      	b.n	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10c      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e00b      	b.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d18d      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b10:	e02d      	b.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f8ce 	bl	8003cb4 <I2C_IsAcknowledgeFailed>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e02d      	b.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d021      	beq.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fe fda9 	bl	8002680 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d116      	bne.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b78:	2b80      	cmp	r3, #128	@ 0x80
 8003b7a:	d1ca      	bne.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b92:	e02d      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f88d 	bl	8003cb4 <I2C_IsAcknowledgeFailed>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e02d      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d021      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7fe fd68 	bl	8002680 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d1ca      	bne.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c14:	e042      	b.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d119      	bne.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e029      	b.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fe fd12 	bl	8002680 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e007      	b.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca6:	2b40      	cmp	r3, #64	@ 0x40
 8003ca8:	d1b5      	bne.n	8003c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cca:	d11b      	bne.n	8003d04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e267      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d075      	beq.n	8003e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d32:	4b88      	ldr	r3, [pc, #544]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d00c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b85      	ldr	r3, [pc, #532]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d112      	bne.n	8003d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4a:	4b82      	ldr	r3, [pc, #520]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d56:	d10b      	bne.n	8003d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	4b7e      	ldr	r3, [pc, #504]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05b      	beq.n	8003e1c <HAL_RCC_OscConfig+0x108>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d157      	bne.n	8003e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e242      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d78:	d106      	bne.n	8003d88 <HAL_RCC_OscConfig+0x74>
 8003d7a:	4b76      	ldr	r3, [pc, #472]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a75      	ldr	r2, [pc, #468]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e01d      	b.n	8003dc4 <HAL_RCC_OscConfig+0xb0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0x98>
 8003d92:	4b70      	ldr	r3, [pc, #448]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6f      	ldr	r2, [pc, #444]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6c      	ldr	r2, [pc, #432]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_OscConfig+0xb0>
 8003dac:	4b69      	ldr	r3, [pc, #420]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a68      	ldr	r2, [pc, #416]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b66      	ldr	r3, [pc, #408]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a65      	ldr	r2, [pc, #404]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fc58 	bl	8002680 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fe fc54 	bl	8002680 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	@ 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e207      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xc0>
 8003df2:	e014      	b.n	8003e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fc44 	bl	8002680 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fc40 	bl	8002680 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	@ 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1f3      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	4b51      	ldr	r3, [pc, #324]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0xe8>
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d063      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b47      	ldr	r3, [pc, #284]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d11c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e42:	4b44      	ldr	r3, [pc, #272]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	4b41      	ldr	r3, [pc, #260]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_OscConfig+0x152>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e1c7      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b3b      	ldr	r3, [pc, #236]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4937      	ldr	r1, [pc, #220]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	e03a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e84:	4b34      	ldr	r3, [pc, #208]	@ (8003f58 <HAL_RCC_OscConfig+0x244>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fe fbf9 	bl	8002680 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fe fbf5 	bl	8002680 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e1a8      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb0:	4b28      	ldr	r3, [pc, #160]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4925      	ldr	r1, [pc, #148]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	600b      	str	r3, [r1, #0]
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec6:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <HAL_RCC_OscConfig+0x244>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fe fbd8 	bl	8002680 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed4:	f7fe fbd4 	bl	8002680 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e187      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d036      	beq.n	8003f6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d016      	beq.n	8003f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <HAL_RCC_OscConfig+0x248>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fbb8 	bl	8002680 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f14:	f7fe fbb4 	bl	8002680 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e167      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_RCC_OscConfig+0x240>)
 8003f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x200>
 8003f32:	e01b      	b.n	8003f6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <HAL_RCC_OscConfig+0x248>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3a:	f7fe fba1 	bl	8002680 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	e00e      	b.n	8003f60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f42:	f7fe fb9d 	bl	8002680 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d907      	bls.n	8003f60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e150      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
 8003f54:	40023800 	.word	0x40023800
 8003f58:	42470000 	.word	0x42470000
 8003f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b88      	ldr	r3, [pc, #544]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ea      	bne.n	8003f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8097 	beq.w	80040a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7e:	4b81      	ldr	r3, [pc, #516]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	4a7c      	ldr	r2, [pc, #496]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8003f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	4b77      	ldr	r3, [pc, #476]	@ (8004188 <HAL_RCC_OscConfig+0x474>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d118      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb6:	4b74      	ldr	r3, [pc, #464]	@ (8004188 <HAL_RCC_OscConfig+0x474>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a73      	ldr	r2, [pc, #460]	@ (8004188 <HAL_RCC_OscConfig+0x474>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fb5d 	bl	8002680 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7fe fb59 	bl	8002680 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e10c      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8004188 <HAL_RCC_OscConfig+0x474>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x2ea>
 8003ff0:	4b64      	ldr	r3, [pc, #400]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff4:	4a63      	ldr	r2, [pc, #396]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffc:	e01c      	b.n	8004038 <HAL_RCC_OscConfig+0x324>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b05      	cmp	r3, #5
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0x30c>
 8004006:	4b5f      	ldr	r3, [pc, #380]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	4a5e      	ldr	r2, [pc, #376]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 0304 	orr.w	r3, r3, #4
 8004010:	6713      	str	r3, [r2, #112]	@ 0x70
 8004012:	4b5c      	ldr	r3, [pc, #368]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004016:	4a5b      	ldr	r2, [pc, #364]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6713      	str	r3, [r2, #112]	@ 0x70
 800401e:	e00b      	b.n	8004038 <HAL_RCC_OscConfig+0x324>
 8004020:	4b58      	ldr	r3, [pc, #352]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	4a57      	ldr	r2, [pc, #348]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	6713      	str	r3, [r2, #112]	@ 0x70
 800402c:	4b55      	ldr	r3, [pc, #340]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	4a54      	ldr	r2, [pc, #336]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004032:	f023 0304 	bic.w	r3, r3, #4
 8004036:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d015      	beq.n	800406c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fe fb1e 	bl	8002680 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	e00a      	b.n	800405e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe fb1a 	bl	8002680 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0cb      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405e:	4b49      	ldr	r3, [pc, #292]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ee      	beq.n	8004048 <HAL_RCC_OscConfig+0x334>
 800406a:	e014      	b.n	8004096 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406c:	f7fe fb08 	bl	8002680 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004072:	e00a      	b.n	800408a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fe fb04 	bl	8002680 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e0b5      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408a:	4b3e      	ldr	r3, [pc, #248]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ee      	bne.n	8004074 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d105      	bne.n	80040a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409c:	4b39      	ldr	r3, [pc, #228]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	4a38      	ldr	r2, [pc, #224]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 80040a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80a1 	beq.w	80041f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b2:	4b34      	ldr	r3, [pc, #208]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d05c      	beq.n	8004178 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d141      	bne.n	800414a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b31      	ldr	r3, [pc, #196]	@ (800418c <HAL_RCC_OscConfig+0x478>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fad8 	bl	8002680 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fe fad4 	bl	8002680 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e087      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	4b27      	ldr	r3, [pc, #156]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	3b01      	subs	r3, #1
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	491b      	ldr	r1, [pc, #108]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411c:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x478>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fe faad 	bl	8002680 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412a:	f7fe faa9 	bl	8002680 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e05c      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413c:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x416>
 8004148:	e054      	b.n	80041f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <HAL_RCC_OscConfig+0x478>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fa96 	bl	8002680 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe fa92 	bl	8002680 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e045      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_RCC_OscConfig+0x470>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x444>
 8004176:	e03d      	b.n	80041f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e038      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
 800418c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004190:	4b1b      	ldr	r3, [pc, #108]	@ (8004200 <HAL_RCC_OscConfig+0x4ec>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d028      	beq.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d121      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d11a      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d111      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	3b01      	subs	r3, #1
 80041da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800

08004204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0cc      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004218:	4b68      	ldr	r3, [pc, #416]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d90c      	bls.n	8004240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b63      	ldr	r3, [pc, #396]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0b8      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004258:	4b59      	ldr	r3, [pc, #356]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a58      	ldr	r2, [pc, #352]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004270:	4b53      	ldr	r3, [pc, #332]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a52      	ldr	r2, [pc, #328]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800427a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800427c:	4b50      	ldr	r3, [pc, #320]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	494d      	ldr	r1, [pc, #308]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d044      	beq.n	8004324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	4b47      	ldr	r3, [pc, #284]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d119      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e07f      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d003      	beq.n	80042c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c2:	4b3f      	ldr	r3, [pc, #252]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e06f      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d2:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e067      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e2:	4b37      	ldr	r3, [pc, #220]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0203 	bic.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4934      	ldr	r1, [pc, #208]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f4:	f7fe f9c4 	bl	8002680 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fc:	f7fe f9c0 	bl	8002680 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e04f      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 020c 	and.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	429a      	cmp	r2, r3
 8004322:	d1eb      	bne.n	80042fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004324:	4b25      	ldr	r3, [pc, #148]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d20c      	bcs.n	800434c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b22      	ldr	r3, [pc, #136]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	4b20      	ldr	r3, [pc, #128]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e032      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004358:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4916      	ldr	r1, [pc, #88]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004376:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	490e      	ldr	r1, [pc, #56]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800438a:	f000 f821 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 800438e:	4602      	mov	r2, r0
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	490a      	ldr	r1, [pc, #40]	@ (80043c4 <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	5ccb      	ldrb	r3, [r1, r3]
 800439e:	fa22 f303 	lsr.w	r3, r2, r3
 80043a2:	4a09      	ldr	r2, [pc, #36]	@ (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043a6:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe f924 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023c00 	.word	0x40023c00
 80043c0:	40023800 	.word	0x40023800
 80043c4:	0800a904 	.word	0x0800a904
 80043c8:	20000020 	.word	0x20000020
 80043cc:	20000024 	.word	0x20000024

080043d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d4:	b094      	sub	sp, #80	@ 0x50
 80043d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	647b      	str	r3, [r7, #68]	@ 0x44
 80043dc:	2300      	movs	r3, #0
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e0:	2300      	movs	r3, #0
 80043e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043e8:	4b79      	ldr	r3, [pc, #484]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d00d      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x40>
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	f200 80e1 	bhi.w	80045bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x34>
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d003      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x3a>
 8004402:	e0db      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b73      	ldr	r3, [pc, #460]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004406:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004408:	e0db      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800440a:	4b73      	ldr	r3, [pc, #460]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800440c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800440e:	e0d8      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004410:	4b6f      	ldr	r3, [pc, #444]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441a:	4b6d      	ldr	r3, [pc, #436]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d063      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004426:	4b6a      	ldr	r3, [pc, #424]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	2200      	movs	r2, #0
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004430:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
 800443a:	2300      	movs	r3, #0
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
 800443e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004442:	4622      	mov	r2, r4
 8004444:	462b      	mov	r3, r5
 8004446:	f04f 0000 	mov.w	r0, #0
 800444a:	f04f 0100 	mov.w	r1, #0
 800444e:	0159      	lsls	r1, r3, #5
 8004450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004454:	0150      	lsls	r0, r2, #5
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4621      	mov	r1, r4
 800445c:	1a51      	subs	r1, r2, r1
 800445e:	6139      	str	r1, [r7, #16]
 8004460:	4629      	mov	r1, r5
 8004462:	eb63 0301 	sbc.w	r3, r3, r1
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004474:	4659      	mov	r1, fp
 8004476:	018b      	lsls	r3, r1, #6
 8004478:	4651      	mov	r1, sl
 800447a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800447e:	4651      	mov	r1, sl
 8004480:	018a      	lsls	r2, r1, #6
 8004482:	4651      	mov	r1, sl
 8004484:	ebb2 0801 	subs.w	r8, r2, r1
 8004488:	4659      	mov	r1, fp
 800448a:	eb63 0901 	sbc.w	r9, r3, r1
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800449e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a2:	4690      	mov	r8, r2
 80044a4:	4699      	mov	r9, r3
 80044a6:	4623      	mov	r3, r4
 80044a8:	eb18 0303 	adds.w	r3, r8, r3
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	462b      	mov	r3, r5
 80044b0:	eb49 0303 	adc.w	r3, r9, r3
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044c2:	4629      	mov	r1, r5
 80044c4:	024b      	lsls	r3, r1, #9
 80044c6:	4621      	mov	r1, r4
 80044c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044cc:	4621      	mov	r1, r4
 80044ce:	024a      	lsls	r2, r1, #9
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044d6:	2200      	movs	r2, #0
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044e0:	f7fb fece 	bl	8000280 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4613      	mov	r3, r2
 80044ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ec:	e058      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ee:	4b38      	ldr	r3, [pc, #224]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	2200      	movs	r2, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	4611      	mov	r1, r2
 80044fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	2300      	movs	r3, #0
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
 8004504:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	f04f 0000 	mov.w	r0, #0
 8004510:	f04f 0100 	mov.w	r1, #0
 8004514:	0159      	lsls	r1, r3, #5
 8004516:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451a:	0150      	lsls	r0, r2, #5
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4641      	mov	r1, r8
 8004522:	ebb2 0a01 	subs.w	sl, r2, r1
 8004526:	4649      	mov	r1, r9
 8004528:	eb63 0b01 	sbc.w	fp, r3, r1
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004538:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800453c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004540:	ebb2 040a 	subs.w	r4, r2, sl
 8004544:	eb63 050b 	sbc.w	r5, r3, fp
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	00eb      	lsls	r3, r5, #3
 8004552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004556:	00e2      	lsls	r2, r4, #3
 8004558:	4614      	mov	r4, r2
 800455a:	461d      	mov	r5, r3
 800455c:	4643      	mov	r3, r8
 800455e:	18e3      	adds	r3, r4, r3
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	464b      	mov	r3, r9
 8004564:	eb45 0303 	adc.w	r3, r5, r3
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004576:	4629      	mov	r1, r5
 8004578:	028b      	lsls	r3, r1, #10
 800457a:	4621      	mov	r1, r4
 800457c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004580:	4621      	mov	r1, r4
 8004582:	028a      	lsls	r2, r1, #10
 8004584:	4610      	mov	r0, r2
 8004586:	4619      	mov	r1, r3
 8004588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458a:	2200      	movs	r2, #0
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	61fa      	str	r2, [r7, #28]
 8004590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004594:	f7fb fe74 	bl	8000280 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4613      	mov	r3, r2
 800459e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80045b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ba:	e002      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3750      	adds	r7, #80	@ 0x50
 80045c8:	46bd      	mov	sp, r7
 80045ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	007a1200 	.word	0x007a1200

080045dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e0:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000020 	.word	0x20000020

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045f8:	f7ff fff0 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0a9b      	lsrs	r3, r3, #10
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40023800 	.word	0x40023800
 8004618:	0800a914 	.word	0x0800a914

0800461c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004620:	f7ff ffdc 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	0b5b      	lsrs	r3, r3, #13
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	@ (8004640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40023800 	.word	0x40023800
 8004640:	0800a914 	.word	0x0800a914

08004644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07b      	b.n	800474e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004666:	d009      	beq.n	800467c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
 800466e:	e005      	b.n	800467c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd fc3e 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004700:	ea42 0103 	orr.w	r1, r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0104 	and.w	r1, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	f003 0210 	and.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800473c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b088      	sub	sp, #32
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_SPI_Transmit+0x22>
 8004774:	2302      	movs	r3, #2
 8004776:	e126      	b.n	80049c6 <HAL_SPI_Transmit+0x270>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004780:	f7fd ff7e 	bl	8002680 <HAL_GetTick>
 8004784:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d002      	beq.n	800479c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	77fb      	strb	r3, [r7, #31]
    goto error;
 800479a:	e10b      	b.n	80049b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_SPI_Transmit+0x52>
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ac:	e102      	b.n	80049b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2203      	movs	r2, #3
 80047b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f4:	d10f      	bne.n	8004816 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004804:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004814:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d007      	beq.n	8004834 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483c:	d14b      	bne.n	80048d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_Transmit+0xf6>
 8004846:	8afb      	ldrh	r3, [r7, #22]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d13e      	bne.n	80048ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004870:	e02b      	b.n	80048ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d112      	bne.n	80048a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	881a      	ldrh	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048a4:	e011      	b.n	80048ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a6:	f7fd feeb 	bl	8002680 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d803      	bhi.n	80048be <HAL_SPI_Transmit+0x168>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d102      	bne.n	80048c4 <HAL_SPI_Transmit+0x16e>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048c8:	e074      	b.n	80049b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1ce      	bne.n	8004872 <HAL_SPI_Transmit+0x11c>
 80048d4:	e04c      	b.n	8004970 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_SPI_Transmit+0x18e>
 80048de:	8afb      	ldrh	r3, [r7, #22]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d140      	bne.n	8004966 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	7812      	ldrb	r2, [r2, #0]
 80048f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800490a:	e02c      	b.n	8004966 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d113      	bne.n	8004942 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004940:	e011      	b.n	8004966 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004942:	f7fd fe9d 	bl	8002680 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d803      	bhi.n	800495a <HAL_SPI_Transmit+0x204>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d102      	bne.n	8004960 <HAL_SPI_Transmit+0x20a>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004964:	e026      	b.n	80049b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1cd      	bne.n	800490c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	6839      	ldr	r1, [r7, #0]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fbcb 	bl	8005110 <SPI_EndRxTxTransaction>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e000      	b.n	80049b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b088      	sub	sp, #32
 80049d2:	af02      	add	r7, sp, #8
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ea:	d112      	bne.n	8004a12 <HAL_SPI_Receive+0x44>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10e      	bne.n	8004a12 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2204      	movs	r2, #4
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049fc:	88fa      	ldrh	r2, [r7, #6]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f8f1 	bl	8004bf0 <HAL_SPI_TransmitReceive>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	e0ea      	b.n	8004be8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_SPI_Receive+0x52>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e0e3      	b.n	8004be8 <HAL_SPI_Receive+0x21a>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a28:	f7fd fe2a 	bl	8002680 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a3e:	e0ca      	b.n	8004bd6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_SPI_Receive+0x7e>
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a50:	e0c1      	b.n	8004bd6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2204      	movs	r2, #4
 8004a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a98:	d10f      	bne.n	8004aba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b40      	cmp	r3, #64	@ 0x40
 8004ac6:	d007      	beq.n	8004ad8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d162      	bne.n	8004ba6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ae0:	e02e      	b.n	8004b40 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d115      	bne.n	8004b1c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f103 020c 	add.w	r2, r3, #12
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b1a:	e011      	b.n	8004b40 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b1c:	f7fd fdb0 	bl	8002680 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d803      	bhi.n	8004b34 <HAL_SPI_Receive+0x166>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d102      	bne.n	8004b3a <HAL_SPI_Receive+0x16c>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b3e:	e04a      	b.n	8004bd6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1cb      	bne.n	8004ae2 <HAL_SPI_Receive+0x114>
 8004b4a:	e031      	b.n	8004bb0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d113      	bne.n	8004b82 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	b292      	uxth	r2, r2
 8004b66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	1c9a      	adds	r2, r3, #2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b80:	e011      	b.n	8004ba6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b82:	f7fd fd7d 	bl	8002680 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d803      	bhi.n	8004b9a <HAL_SPI_Receive+0x1cc>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d102      	bne.n	8004ba0 <HAL_SPI_Receive+0x1d2>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ba4:	e017      	b.n	8004bd6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1cd      	bne.n	8004b4c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	6839      	ldr	r1, [r7, #0]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fa45 	bl	8005044 <SPI_EndRxTransaction>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	75fb      	strb	r3, [r7, #23]
 8004bd2:	e000      	b.n	8004bd6 <HAL_SPI_Receive+0x208>
  }

error :
 8004bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	@ 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x26>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e18a      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x33c>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1e:	f7fd fd2f 	bl	8002680 <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d00f      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x70>
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c46:	d107      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x68>
 8004c50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d003      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c5e:	e15b      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x82>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x82>
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c78:	e14e      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d003      	beq.n	8004c8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2205      	movs	r2, #5
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	887a      	ldrh	r2, [r7, #2]
 8004c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	887a      	ldrh	r2, [r7, #2]
 8004ca4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cce:	2b40      	cmp	r3, #64	@ 0x40
 8004cd0:	d007      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cea:	d178      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x10a>
 8004cf4:	8b7b      	ldrh	r3, [r7, #26]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d166      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfe:	881a      	ldrh	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1e:	e053      	b.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d11b      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x176>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x176>
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d113      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d42:	881a      	ldrh	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	1c9a      	adds	r2, r3, #2
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d119      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x1b8>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d014      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	1c9a      	adds	r2, r3, #2
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004da4:	2301      	movs	r3, #1
 8004da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004da8:	f7fd fc6a 	bl	8002680 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d807      	bhi.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d003      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004dc6:	e0a7      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1a6      	bne.n	8004d20 <HAL_SPI_TransmitReceive+0x130>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1a1      	bne.n	8004d20 <HAL_SPI_TransmitReceive+0x130>
 8004ddc:	e07c      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x1fc>
 8004de6:	8b7b      	ldrh	r3, [r7, #26]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d16b      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	7812      	ldrb	r2, [r2, #0]
 8004df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e12:	e057      	b.n	8004ec4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d11c      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x26c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x26c>
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d114      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d119      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x2ae>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d014      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e9e:	f7fd fbef 	bl	8002680 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d803      	bhi.n	8004eb6 <HAL_SPI_TransmitReceive+0x2c6>
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d102      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x2cc>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004ec2:	e029      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1a2      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x224>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d19d      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f917 	bl	8005110 <SPI_EndRxTxTransaction>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004ef4:	e010      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	e000      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3730      	adds	r7, #48	@ 0x30
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f44:	f7fd fb9c 	bl	8002680 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	4413      	add	r3, r2
 8004f52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f54:	f7fd fb94 	bl	8002680 <HAL_GetTick>
 8004f58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f5a:	4b39      	ldr	r3, [pc, #228]	@ (8005040 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	015b      	lsls	r3, r3, #5
 8004f60:	0d1b      	lsrs	r3, r3, #20
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	e054      	b.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d050      	beq.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f74:	f7fd fb84 	bl	8002680 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d902      	bls.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d13d      	bne.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fa2:	d111      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fac:	d004      	beq.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb6:	d107      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd0:	d10f      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e017      	b.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3b01      	subs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	429a      	cmp	r2, r3
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	429a      	cmp	r2, r3
 8005032:	d19b      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000020 	.word	0x20000020

08005044 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005058:	d111      	bne.n	800507e <SPI_EndRxTransaction+0x3a>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005062:	d004      	beq.n	800506e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506c:	d107      	bne.n	800507e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800507c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005086:	d12a      	bne.n	80050de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005090:	d012      	beq.n	80050b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	2180      	movs	r1, #128	@ 0x80
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff ff49 	bl	8004f34 <SPI_WaitFlagStateUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02d      	beq.n	8005104 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e026      	b.n	8005106 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	2101      	movs	r1, #1
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7ff ff36 	bl	8004f34 <SPI_WaitFlagStateUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01a      	beq.n	8005104 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	f043 0220 	orr.w	r2, r3, #32
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e013      	b.n	8005106 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2101      	movs	r1, #1
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff23 	bl	8004f34 <SPI_WaitFlagStateUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e000      	b.n	8005106 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800511c:	4b1b      	ldr	r3, [pc, #108]	@ (800518c <SPI_EndRxTxTransaction+0x7c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <SPI_EndRxTxTransaction+0x80>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	0d5b      	lsrs	r3, r3, #21
 8005128:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800513a:	d112      	bne.n	8005162 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2200      	movs	r2, #0
 8005144:	2180      	movs	r1, #128	@ 0x80
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fef4 	bl	8004f34 <SPI_WaitFlagStateUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e00f      	b.n	8005182 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3b01      	subs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005178:	2b80      	cmp	r3, #128	@ 0x80
 800517a:	d0f2      	beq.n	8005162 <SPI_EndRxTxTransaction+0x52>
 800517c:	e000      	b.n	8005180 <SPI_EndRxTxTransaction+0x70>
        break;
 800517e:	bf00      	nop
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000020 	.word	0x20000020
 8005190:	165e9f81 	.word	0x165e9f81

08005194 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e034      	b.n	8005214 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7fb fe0c 	bl	8000ddc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3308      	adds	r3, #8
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f001 fdbc 	bl	8006d4c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	461a      	mov	r2, r3
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	f001 fe06 	bl	8006df0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6858      	ldr	r0, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	f001 fe3b 	bl	8006e6c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	6892      	ldr	r2, [r2, #8]
 80051fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	f041 0101 	orr.w	r1, r1, #1
 800520e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e041      	b.n	80052b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc ffb0 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fa96 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e04e      	b.n	8005372 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a23      	ldr	r2, [pc, #140]	@ (8005380 <HAL_TIM_Base_Start_IT+0xc4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fe:	d01d      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1f      	ldr	r2, [pc, #124]	@ (8005384 <HAL_TIM_Base_Start_IT+0xc8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <HAL_TIM_Base_Start_IT+0xcc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1c      	ldr	r2, [pc, #112]	@ (800538c <HAL_TIM_Base_Start_IT+0xd0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <HAL_TIM_Base_Start_IT+0xd4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a19      	ldr	r2, [pc, #100]	@ (8005394 <HAL_TIM_Base_Start_IT+0xd8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_TIM_Base_Start_IT+0xdc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b06      	cmp	r3, #6
 800534c:	d010      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	e007      	b.n	8005370 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40010400 	.word	0x40010400
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0202 	mvn.w	r2, #2
 80053c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f9b5 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9a7 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f9b8 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b04      	cmp	r3, #4
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b04      	cmp	r3, #4
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0204 	mvn.w	r2, #4
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f98b 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f97d 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f98e 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b08      	cmp	r3, #8
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b08      	cmp	r3, #8
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0208 	mvn.w	r2, #8
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2204      	movs	r2, #4
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f961 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f953 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f964 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0210 	mvn.w	r2, #16
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2208      	movs	r2, #8
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f937 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f929 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f93a 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0201 	mvn.w	r2, #1
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc fc4a 	bl	8001db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552a:	2b80      	cmp	r3, #128	@ 0x80
 800552c:	d10e      	bne.n	800554c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b80      	cmp	r3, #128	@ 0x80
 800553a:	d107      	bne.n	800554c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fae0 	bl	8005b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005556:	2b40      	cmp	r3, #64	@ 0x40
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005564:	2b40      	cmp	r3, #64	@ 0x40
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f8ff 	bl	8005776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b20      	cmp	r3, #32
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b20      	cmp	r3, #32
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0220 	mvn.w	r2, #32
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 faaa 	bl	8005af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIM_ConfigClockSource+0x1c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e0b4      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x186>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005600:	d03e      	beq.n	8005680 <HAL_TIM_ConfigClockSource+0xd4>
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005606:	f200 8087 	bhi.w	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560e:	f000 8086 	beq.w	800571e <HAL_TIM_ConfigClockSource+0x172>
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005616:	d87f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b70      	cmp	r3, #112	@ 0x70
 800561a:	d01a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0xa6>
 800561c:	2b70      	cmp	r3, #112	@ 0x70
 800561e:	d87b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b60      	cmp	r3, #96	@ 0x60
 8005622:	d050      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005624:	2b60      	cmp	r3, #96	@ 0x60
 8005626:	d877      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b50      	cmp	r3, #80	@ 0x50
 800562a:	d03c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xfa>
 800562c:	2b50      	cmp	r3, #80	@ 0x50
 800562e:	d873      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d058      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	d86f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b30      	cmp	r3, #48	@ 0x30
 800563a:	d064      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b30      	cmp	r3, #48	@ 0x30
 800563e:	d86b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d060      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d867      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d05c      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 800564c:	2b10      	cmp	r3, #16
 800564e:	d05a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 8005650:	e062      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6899      	ldr	r1, [r3, #8]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f000 f9ad 	bl	80059c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	609a      	str	r2, [r3, #8]
      break;
 800567e:	e04f      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6899      	ldr	r1, [r3, #8]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f000 f996 	bl	80059c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a2:	609a      	str	r2, [r3, #8]
      break;
 80056a4:	e03c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 f90a 	bl	80058cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2150      	movs	r1, #80	@ 0x50
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f963 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 80056c4:	e02c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 f929 	bl	800592a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2160      	movs	r1, #96	@ 0x60
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f953 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 80056e4:	e01c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f000 f8ea 	bl	80058cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2140      	movs	r1, #64	@ 0x40
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f943 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 8005704:	e00c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f000 f93a 	bl	800598a <TIM_ITRx_SetConfig>
      break;
 8005716:	e003      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e000      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800571e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a40      	ldr	r2, [pc, #256]	@ (80058a0 <TIM_Base_SetConfig+0x114>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057aa:	d00f      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a3d      	ldr	r2, [pc, #244]	@ (80058a4 <TIM_Base_SetConfig+0x118>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00b      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a3c      	ldr	r2, [pc, #240]	@ (80058a8 <TIM_Base_SetConfig+0x11c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d007      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3b      	ldr	r2, [pc, #236]	@ (80058ac <TIM_Base_SetConfig+0x120>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3a      	ldr	r2, [pc, #232]	@ (80058b0 <TIM_Base_SetConfig+0x124>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d108      	bne.n	80057de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2f      	ldr	r2, [pc, #188]	@ (80058a0 <TIM_Base_SetConfig+0x114>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d02b      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ec:	d027      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <TIM_Base_SetConfig+0x118>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d023      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	@ (80058a8 <TIM_Base_SetConfig+0x11c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01f      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2a      	ldr	r2, [pc, #168]	@ (80058ac <TIM_Base_SetConfig+0x120>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01b      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a29      	ldr	r2, [pc, #164]	@ (80058b0 <TIM_Base_SetConfig+0x124>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d017      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a28      	ldr	r2, [pc, #160]	@ (80058b4 <TIM_Base_SetConfig+0x128>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a27      	ldr	r2, [pc, #156]	@ (80058b8 <TIM_Base_SetConfig+0x12c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00f      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a26      	ldr	r2, [pc, #152]	@ (80058bc <TIM_Base_SetConfig+0x130>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00b      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a25      	ldr	r2, [pc, #148]	@ (80058c0 <TIM_Base_SetConfig+0x134>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a24      	ldr	r2, [pc, #144]	@ (80058c4 <TIM_Base_SetConfig+0x138>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a23      	ldr	r2, [pc, #140]	@ (80058c8 <TIM_Base_SetConfig+0x13c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d108      	bne.n	8005850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a0a      	ldr	r2, [pc, #40]	@ (80058a0 <TIM_Base_SetConfig+0x114>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_Base_SetConfig+0xf8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a0c      	ldr	r2, [pc, #48]	@ (80058b0 <TIM_Base_SetConfig+0x124>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d103      	bne.n	800588c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	615a      	str	r2, [r3, #20]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40010400 	.word	0x40010400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800
 80058c0:	40001800 	.word	0x40001800
 80058c4:	40001c00 	.word	0x40001c00
 80058c8:	40002000 	.word	0x40002000

080058cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f023 0201 	bic.w	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 030a 	bic.w	r3, r3, #10
 8005908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800592a:	b480      	push	{r7}
 800592c:	b087      	sub	sp, #28
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f023 0210 	bic.w	r2, r3, #16
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	031b      	lsls	r3, r3, #12
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f043 0307 	orr.w	r3, r3, #7
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	021a      	lsls	r2, r3, #8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e05a      	b.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a21      	ldr	r2, [pc, #132]	@ (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a64:	d01d      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a17      	ldr	r2, [pc, #92]	@ (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a15      	ldr	r2, [pc, #84]	@ (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10c      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40010400 	.word	0x40010400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40001800 	.word	0x40001800

08005af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e03f      	b.n	8005bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc fc7c 	bl	8002444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2224      	movs	r2, #36	@ 0x24
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fe7d 	bl	8006864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b08a      	sub	sp, #40	@ 0x28
 8005bbe:	af02      	add	r7, sp, #8
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d17c      	bne.n	8005cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_UART_Transmit+0x2c>
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e075      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Transmit+0x3e>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e06e      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2221      	movs	r2, #33	@ 0x21
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c0e:	f7fc fd37 	bl	8002680 <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c28:	d108      	bne.n	8005c3c <HAL_UART_Transmit+0x82>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d104      	bne.n	8005c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	e003      	b.n	8005c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005c4c:	e02a      	b.n	8005ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2180      	movs	r1, #128	@ 0x80
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fbc1 	bl	80063e0 <UART_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e036      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	3302      	adds	r3, #2
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	e007      	b.n	8005c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	781a      	ldrb	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3301      	adds	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1cf      	bne.n	8005c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2140      	movs	r1, #64	@ 0x40
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fb91 	bl	80063e0 <UART_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e006      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b08a      	sub	sp, #40	@ 0x28
 8005ce2:	af02      	add	r7, sp, #8
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	f040 808c 	bne.w	8005e18 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_UART_Receive+0x2e>
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e084      	b.n	8005e1a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Receive+0x40>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e07d      	b.n	8005e1a <HAL_UART_Receive+0x13c>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2222      	movs	r2, #34	@ 0x22
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d3a:	f7fc fca1 	bl	8002680 <HAL_GetTick>
 8005d3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	88fa      	ldrh	r2, [r7, #6]
 8005d44:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	88fa      	ldrh	r2, [r7, #6]
 8005d4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d108      	bne.n	8005d68 <HAL_UART_Receive+0x8a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e003      	b.n	8005d70 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005d78:	e043      	b.n	8005e02 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2120      	movs	r1, #32
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fb2b 	bl	80063e0 <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e042      	b.n	8005e1a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10c      	bne.n	8005db4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	3302      	adds	r3, #2
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e01f      	b.n	8005df4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dbc:	d007      	beq.n	8005dce <HAL_UART_Receive+0xf0>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <HAL_UART_Receive+0xfe>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e008      	b.n	8005dee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3301      	adds	r3, #1
 8005df2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1b6      	bne.n	8005d7a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e000      	b.n	8005e1a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d11d      	bne.n	8005e78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_UART_Receive_IT+0x26>
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e016      	b.n	8005e7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Receive_IT+0x38>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e00f      	b.n	8005e7a <HAL_UART_Receive_IT+0x58>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fb24 	bl	80064bc <UART_Start_Receive_IT>
 8005e74:	4603      	mov	r3, r0
 8005e76:	e000      	b.n	8005e7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e78:	2302      	movs	r3, #2
  }
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b0ba      	sub	sp, #232	@ 0xe8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_UART_IRQHandler+0x66>
 8005ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fc03 	bl	80066ee <UART_Receive_IT>
      return;
 8005ee8:	e256      	b.n	8006398 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80de 	beq.w	80060b0 <HAL_UART_IRQHandler+0x22c>
 8005ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80d1 	beq.w	80060b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <HAL_UART_IRQHandler+0xae>
 8005f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	f043 0201 	orr.w	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_UART_IRQHandler+0xd2>
 8005f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4e:	f043 0202 	orr.w	r2, r3, #2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <HAL_UART_IRQHandler+0xf6>
 8005f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f043 0204 	orr.w	r2, r3, #4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d011      	beq.n	8005faa <HAL_UART_IRQHandler+0x126>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	f043 0208 	orr.w	r2, r3, #8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 81ed 	beq.w	800638e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x14e>
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb8e 	bl	80066ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	bf0c      	ite	eq
 8005fe0:	2301      	moveq	r3, #1
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <HAL_UART_IRQHandler+0x17a>
 8005ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d04f      	beq.n	800609e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa96 	bl	8006530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600e:	2b40      	cmp	r3, #64	@ 0x40
 8006010:	d141      	bne.n	8006096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800602c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3314      	adds	r3, #20
 800603a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800603e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800604a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1d9      	bne.n	8006012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d013      	beq.n	800608e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606a:	4a7d      	ldr	r2, [pc, #500]	@ (8006260 <HAL_UART_IRQHandler+0x3dc>)
 800606c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006072:	4618      	mov	r0, r3
 8006074:	f7fc fcb5 	bl	80029e2 <HAL_DMA_Abort_IT>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d016      	beq.n	80060ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	e00e      	b.n	80060ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f990 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	e00a      	b.n	80060ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f98c 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	e006      	b.n	80060ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f988 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80060aa:	e170      	b.n	800638e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	bf00      	nop
    return;
 80060ae:	e16e      	b.n	800638e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	f040 814a 	bne.w	800634e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8143 	beq.w	800634e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 813c 	beq.w	800634e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f6:	2b40      	cmp	r3, #64	@ 0x40
 80060f8:	f040 80b4 	bne.w	8006264 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8140 	beq.w	8006392 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800611a:	429a      	cmp	r2, r3
 800611c:	f080 8139 	bcs.w	8006392 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006126:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006132:	f000 8088 	beq.w	8006246 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800614c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006162:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800616e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800617a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1d9      	bne.n	8006136 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3314      	adds	r3, #20
 8006188:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006194:	f023 0301 	bic.w	r3, r3, #1
 8006198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3314      	adds	r3, #20
 80061a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e1      	bne.n	8006182 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3314      	adds	r3, #20
 80061c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3314      	adds	r3, #20
 80061de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e3      	bne.n	80061be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	330c      	adds	r3, #12
 800620a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006216:	f023 0310 	bic.w	r3, r3, #16
 800621a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006228:	65ba      	str	r2, [r7, #88]	@ 0x58
 800622a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800622e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e3      	bne.n	8006204 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006240:	4618      	mov	r0, r3
 8006242:	f7fc fb5e 	bl	8002902 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800624e:	b29b      	uxth	r3, r3
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	b29b      	uxth	r3, r3
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f8b6 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800625c:	e099      	b.n	8006392 <HAL_UART_IRQHandler+0x50e>
 800625e:	bf00      	nop
 8006260:	080065f7 	.word	0x080065f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800626c:	b29b      	uxth	r3, r3
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 808b 	beq.w	8006396 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8086 	beq.w	8006396 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	330c      	adds	r3, #12
 8006290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800629a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80062ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80062b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e3      	bne.n	800628a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	623b      	str	r3, [r7, #32]
   return(result);
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3314      	adds	r3, #20
 80062e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80062e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e3      	bne.n	80062c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	60fb      	str	r3, [r7, #12]
   return(result);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0310 	bic.w	r3, r3, #16
 800631e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800632c:	61fa      	str	r2, [r7, #28]
 800632e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	617b      	str	r3, [r7, #20]
   return(result);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e3      	bne.n	8006308 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f83e 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800634c:	e023      	b.n	8006396 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <HAL_UART_IRQHandler+0x4ea>
 800635a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f959 	bl	800661e <UART_Transmit_IT>
    return;
 800636c:	e014      	b.n	8006398 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00e      	beq.n	8006398 <HAL_UART_IRQHandler+0x514>
 800637a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d008      	beq.n	8006398 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f999 	bl	80066be <UART_EndTransmit_IT>
    return;
 800638c:	e004      	b.n	8006398 <HAL_UART_IRQHandler+0x514>
    return;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <HAL_UART_IRQHandler+0x514>
      return;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_UART_IRQHandler+0x514>
      return;
 8006396:	bf00      	nop
  }
}
 8006398:	37e8      	adds	r7, #232	@ 0xe8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b090      	sub	sp, #64	@ 0x40
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f0:	e050      	b.n	8006494 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d04c      	beq.n	8006494 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <UART_WaitOnFlagUntilTimeout+0x30>
 8006400:	f7fc f93e 	bl	8002680 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800640c:	429a      	cmp	r2, r3
 800640e:	d241      	bcs.n	8006494 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	330c      	adds	r3, #12
 8006416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006430:	637a      	str	r2, [r7, #52]	@ 0x34
 8006432:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e5      	bne.n	8006410 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3314      	adds	r3, #20
 800644a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006464:	623a      	str	r2, [r7, #32]
 8006466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	69f9      	ldr	r1, [r7, #28]
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	61bb      	str	r3, [r7, #24]
   return(result);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e00f      	b.n	80064b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4013      	ands	r3, r2
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d09f      	beq.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3740      	adds	r7, #64	@ 0x40
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2222      	movs	r2, #34	@ 0x22
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006500:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0220 	orr.w	r2, r2, #32
 8006520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006530:	b480      	push	{r7}
 8006532:	b095      	sub	sp, #84	@ 0x54
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800654e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006558:	643a      	str	r2, [r7, #64]	@ 0x40
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800655e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	61fb      	str	r3, [r7, #28]
   return(result);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3314      	adds	r3, #20
 800658a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800658c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800658e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d119      	bne.n	80065dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	647b      	str	r3, [r7, #68]	@ 0x44
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065c8:	61ba      	str	r2, [r7, #24]
 80065ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6979      	ldr	r1, [r7, #20]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	613b      	str	r3, [r7, #16]
   return(result);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80065ea:	bf00      	nop
 80065ec:	3754      	adds	r7, #84	@ 0x54
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff fecf 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b21      	cmp	r3, #33	@ 0x21
 8006630:	d13e      	bne.n	80066b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663a:	d114      	bne.n	8006666 <UART_Transmit_IT+0x48>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d110      	bne.n	8006666 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006658:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	1c9a      	adds	r2, r3, #2
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]
 8006664:	e008      	b.n	8006678 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6211      	str	r1, [r2, #32]
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29b      	uxth	r3, r3
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4619      	mov	r1, r3
 8006686:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10f      	bne.n	80066ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800669a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	e000      	b.n	80066b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
  }
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fe5e 	bl	80063a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b08c      	sub	sp, #48	@ 0x30
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b22      	cmp	r3, #34	@ 0x22
 8006700:	f040 80ab 	bne.w	800685a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670c:	d117      	bne.n	800673e <UART_Receive_IT+0x50>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d113      	bne.n	800673e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672c:	b29a      	uxth	r2, r3
 800672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006730:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006736:	1c9a      	adds	r2, r3, #2
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	629a      	str	r2, [r3, #40]	@ 0x28
 800673c:	e026      	b.n	800678c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006750:	d007      	beq.n	8006762 <UART_Receive_IT+0x74>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <UART_Receive_IT+0x82>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e008      	b.n	8006782 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677c:	b2da      	uxtb	r2, r3
 800677e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006780:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29b      	uxth	r3, r3
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	4619      	mov	r1, r3
 800679a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800679c:	2b00      	cmp	r3, #0
 800679e:	d15a      	bne.n	8006856 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0220 	bic.w	r2, r2, #32
 80067ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d135      	bne.n	800684c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	613b      	str	r3, [r7, #16]
   return(result);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f023 0310 	bic.w	r3, r3, #16
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	330c      	adds	r3, #12
 8006804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006806:	623a      	str	r2, [r7, #32]
 8006808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	69f9      	ldr	r1, [r7, #28]
 800680c:	6a3a      	ldr	r2, [r7, #32]
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	61bb      	str	r3, [r7, #24]
   return(result);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e5      	bne.n	80067e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b10      	cmp	r3, #16
 8006826:	d10a      	bne.n	800683e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff fdbf 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
 800684a:	e002      	b.n	8006852 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fb fdad 	bl	80023ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e002      	b.n	800685c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800685a:	2302      	movs	r3, #2
  }
}
 800685c:	4618      	mov	r0, r3
 800685e:	3730      	adds	r7, #48	@ 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006868:	b0c0      	sub	sp, #256	@ 0x100
 800686a:	af00      	add	r7, sp, #0
 800686c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006880:	68d9      	ldr	r1, [r3, #12]
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	ea40 0301 	orr.w	r3, r0, r1
 800688c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	431a      	orrs	r2, r3
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068bc:	f021 010c 	bic.w	r1, r1, #12
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068ca:	430b      	orrs	r3, r1
 80068cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068de:	6999      	ldr	r1, [r3, #24]
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	ea40 0301 	orr.w	r3, r0, r1
 80068ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006b30 <UART_SetConfig+0x2cc>)
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d005      	beq.n	8006904 <UART_SetConfig+0xa0>
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006b34 <UART_SetConfig+0x2d0>)
 8006900:	429a      	cmp	r2, r3
 8006902:	d104      	bne.n	800690e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006904:	f7fd fe8a 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 8006908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800690c:	e003      	b.n	8006916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800690e:	f7fd fe71 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8006912:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006920:	f040 810c 	bne.w	8006b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006928:	2200      	movs	r2, #0
 800692a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800692e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006936:	4622      	mov	r2, r4
 8006938:	462b      	mov	r3, r5
 800693a:	1891      	adds	r1, r2, r2
 800693c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800693e:	415b      	adcs	r3, r3
 8006940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006946:	4621      	mov	r1, r4
 8006948:	eb12 0801 	adds.w	r8, r2, r1
 800694c:	4629      	mov	r1, r5
 800694e:	eb43 0901 	adc.w	r9, r3, r1
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800695e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006966:	4690      	mov	r8, r2
 8006968:	4699      	mov	r9, r3
 800696a:	4623      	mov	r3, r4
 800696c:	eb18 0303 	adds.w	r3, r8, r3
 8006970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006974:	462b      	mov	r3, r5
 8006976:	eb49 0303 	adc.w	r3, r9, r3
 800697a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800697e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800698a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800698e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006992:	460b      	mov	r3, r1
 8006994:	18db      	adds	r3, r3, r3
 8006996:	653b      	str	r3, [r7, #80]	@ 0x50
 8006998:	4613      	mov	r3, r2
 800699a:	eb42 0303 	adc.w	r3, r2, r3
 800699e:	657b      	str	r3, [r7, #84]	@ 0x54
 80069a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069a8:	f7f9 fc6a 	bl	8000280 <__aeabi_uldivmod>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4b61      	ldr	r3, [pc, #388]	@ (8006b38 <UART_SetConfig+0x2d4>)
 80069b2:	fba3 2302 	umull	r2, r3, r3, r2
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	011c      	lsls	r4, r3, #4
 80069ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069cc:	4642      	mov	r2, r8
 80069ce:	464b      	mov	r3, r9
 80069d0:	1891      	adds	r1, r2, r2
 80069d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069d4:	415b      	adcs	r3, r3
 80069d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069dc:	4641      	mov	r1, r8
 80069de:	eb12 0a01 	adds.w	sl, r2, r1
 80069e2:	4649      	mov	r1, r9
 80069e4:	eb43 0b01 	adc.w	fp, r3, r1
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069fc:	4692      	mov	sl, r2
 80069fe:	469b      	mov	fp, r3
 8006a00:	4643      	mov	r3, r8
 8006a02:	eb1a 0303 	adds.w	r3, sl, r3
 8006a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	18db      	adds	r3, r3, r3
 8006a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a2e:	4613      	mov	r3, r2
 8006a30:	eb42 0303 	adc.w	r3, r2, r3
 8006a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a3e:	f7f9 fc1f 	bl	8000280 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	4b3b      	ldr	r3, [pc, #236]	@ (8006b38 <UART_SetConfig+0x2d4>)
 8006a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	2264      	movs	r2, #100	@ 0x64
 8006a52:	fb02 f303 	mul.w	r3, r2, r3
 8006a56:	1acb      	subs	r3, r1, r3
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a5e:	4b36      	ldr	r3, [pc, #216]	@ (8006b38 <UART_SetConfig+0x2d4>)
 8006a60:	fba3 2302 	umull	r2, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a6c:	441c      	add	r4, r3
 8006a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	1891      	adds	r1, r2, r2
 8006a86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a88:	415b      	adcs	r3, r3
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a90:	4641      	mov	r1, r8
 8006a92:	1851      	adds	r1, r2, r1
 8006a94:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a96:	4649      	mov	r1, r9
 8006a98:	414b      	adcs	r3, r1
 8006a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	00cb      	lsls	r3, r1, #3
 8006aac:	4651      	mov	r1, sl
 8006aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ab2:	4651      	mov	r1, sl
 8006ab4:	00ca      	lsls	r2, r1, #3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	4642      	mov	r2, r8
 8006abe:	189b      	adds	r3, r3, r2
 8006ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	460a      	mov	r2, r1
 8006ac8:	eb42 0303 	adc.w	r3, r2, r3
 8006acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006adc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	18db      	adds	r3, r3, r3
 8006ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aea:	4613      	mov	r3, r2
 8006aec:	eb42 0303 	adc.w	r3, r2, r3
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006afa:	f7f9 fbc1 	bl	8000280 <__aeabi_uldivmod>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4b0d      	ldr	r3, [pc, #52]	@ (8006b38 <UART_SetConfig+0x2d4>)
 8006b04:	fba3 1302 	umull	r1, r3, r3, r2
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	2164      	movs	r1, #100	@ 0x64
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	3332      	adds	r3, #50	@ 0x32
 8006b16:	4a08      	ldr	r2, [pc, #32]	@ (8006b38 <UART_SetConfig+0x2d4>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	f003 0207 	and.w	r2, r3, #7
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4422      	add	r2, r4
 8006b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b2c:	e106      	b.n	8006d3c <UART_SetConfig+0x4d8>
 8006b2e:	bf00      	nop
 8006b30:	40011000 	.word	0x40011000
 8006b34:	40011400 	.word	0x40011400
 8006b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b4e:	4642      	mov	r2, r8
 8006b50:	464b      	mov	r3, r9
 8006b52:	1891      	adds	r1, r2, r2
 8006b54:	6239      	str	r1, [r7, #32]
 8006b56:	415b      	adcs	r3, r3
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b5e:	4641      	mov	r1, r8
 8006b60:	1854      	adds	r4, r2, r1
 8006b62:	4649      	mov	r1, r9
 8006b64:	eb43 0501 	adc.w	r5, r3, r1
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	00eb      	lsls	r3, r5, #3
 8006b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b76:	00e2      	lsls	r2, r4, #3
 8006b78:	4614      	mov	r4, r2
 8006b7a:	461d      	mov	r5, r3
 8006b7c:	4643      	mov	r3, r8
 8006b7e:	18e3      	adds	r3, r4, r3
 8006b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b84:	464b      	mov	r3, r9
 8006b86:	eb45 0303 	adc.w	r3, r5, r3
 8006b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006baa:	4629      	mov	r1, r5
 8006bac:	008b      	lsls	r3, r1, #2
 8006bae:	4621      	mov	r1, r4
 8006bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	008a      	lsls	r2, r1, #2
 8006bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006bbc:	f7f9 fb60 	bl	8000280 <__aeabi_uldivmod>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4b60      	ldr	r3, [pc, #384]	@ (8006d48 <UART_SetConfig+0x4e4>)
 8006bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	011c      	lsls	r4, r3, #4
 8006bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	1891      	adds	r1, r2, r2
 8006be6:	61b9      	str	r1, [r7, #24]
 8006be8:	415b      	adcs	r3, r3
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	1851      	adds	r1, r2, r1
 8006bf4:	6139      	str	r1, [r7, #16]
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	414b      	adcs	r3, r1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c08:	4659      	mov	r1, fp
 8006c0a:	00cb      	lsls	r3, r1, #3
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c12:	4651      	mov	r1, sl
 8006c14:	00ca      	lsls	r2, r1, #3
 8006c16:	4610      	mov	r0, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c24:	464b      	mov	r3, r9
 8006c26:	460a      	mov	r2, r1
 8006c28:	eb42 0303 	adc.w	r3, r2, r3
 8006c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c48:	4649      	mov	r1, r9
 8006c4a:	008b      	lsls	r3, r1, #2
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c52:	4641      	mov	r1, r8
 8006c54:	008a      	lsls	r2, r1, #2
 8006c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c5a:	f7f9 fb11 	bl	8000280 <__aeabi_uldivmod>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	4b38      	ldr	r3, [pc, #224]	@ (8006d48 <UART_SetConfig+0x4e4>)
 8006c66:	fba3 2301 	umull	r2, r3, r3, r1
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	2264      	movs	r2, #100	@ 0x64
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	1acb      	subs	r3, r1, r3
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	3332      	adds	r3, #50	@ 0x32
 8006c78:	4a33      	ldr	r2, [pc, #204]	@ (8006d48 <UART_SetConfig+0x4e4>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c84:	441c      	add	r4, r3
 8006c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c94:	4642      	mov	r2, r8
 8006c96:	464b      	mov	r3, r9
 8006c98:	1891      	adds	r1, r2, r2
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	415b      	adcs	r3, r3
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	1851      	adds	r1, r2, r1
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	4649      	mov	r1, r9
 8006cac:	414b      	adcs	r3, r1
 8006cae:	607b      	str	r3, [r7, #4]
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	00cb      	lsls	r3, r1, #3
 8006cc0:	4651      	mov	r1, sl
 8006cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cc6:	4651      	mov	r1, sl
 8006cc8:	00ca      	lsls	r2, r1, #3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	189b      	adds	r3, r3, r2
 8006cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	460a      	mov	r2, r1
 8006cda:	eb42 0303 	adc.w	r3, r2, r3
 8006cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	008b      	lsls	r3, r1, #2
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d02:	4641      	mov	r1, r8
 8006d04:	008a      	lsls	r2, r1, #2
 8006d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d0a:	f7f9 fab9 	bl	8000280 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4b0d      	ldr	r3, [pc, #52]	@ (8006d48 <UART_SetConfig+0x4e4>)
 8006d14:	fba3 1302 	umull	r1, r3, r3, r2
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2164      	movs	r1, #100	@ 0x64
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	3332      	adds	r3, #50	@ 0x32
 8006d26:	4a08      	ldr	r2, [pc, #32]	@ (8006d48 <UART_SetConfig+0x4e4>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f003 020f 	and.w	r2, r3, #15
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4422      	add	r2, r4
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d42:	46bd      	mov	sp, r7
 8006d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d48:	51eb851f 	.word	0x51eb851f

08006d4c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4b20      	ldr	r3, [pc, #128]	@ (8006dec <FSMC_NORSRAM_Init+0xa0>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d76:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006d7c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006d82:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006d88:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006d8e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006d94:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006d9a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8006da0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8006da6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8006dac:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8006db2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8006db8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d103      	bne.n	8006dd0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dce:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	fff00080 	.word	0xfff00080

08006df0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e12:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e1e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e26:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e2e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e38:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	3b02      	subs	r3, #2
 8006e40:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006e42:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6979      	ldr	r1, [r7, #20]
 8006e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e84:	d122      	bne.n	8006ecc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4b15      	ldr	r3, [pc, #84]	@ (8006ee8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ea2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006eaa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006eb2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006eb8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6979      	ldr	r1, [r7, #20]
 8006ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006eca:	e005      	b.n	8006ed8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	cff00000 	.word	0xcff00000

08006eec <siprintf>:
 8006eec:	b40e      	push	{r1, r2, r3}
 8006eee:	b500      	push	{lr}
 8006ef0:	b09c      	sub	sp, #112	@ 0x70
 8006ef2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ef4:	9002      	str	r0, [sp, #8]
 8006ef6:	9006      	str	r0, [sp, #24]
 8006ef8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006efc:	4809      	ldr	r0, [pc, #36]	@ (8006f24 <siprintf+0x38>)
 8006efe:	9107      	str	r1, [sp, #28]
 8006f00:	9104      	str	r1, [sp, #16]
 8006f02:	4909      	ldr	r1, [pc, #36]	@ (8006f28 <siprintf+0x3c>)
 8006f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f08:	9105      	str	r1, [sp, #20]
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	a902      	add	r1, sp, #8
 8006f10:	f000 f9a4 	bl	800725c <_svfiprintf_r>
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	b01c      	add	sp, #112	@ 0x70
 8006f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f20:	b003      	add	sp, #12
 8006f22:	4770      	bx	lr
 8006f24:	2000002c 	.word	0x2000002c
 8006f28:	ffff0208 	.word	0xffff0208

08006f2c <memset>:
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d100      	bne.n	8006f36 <memset+0xa>
 8006f34:	4770      	bx	lr
 8006f36:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3a:	e7f9      	b.n	8006f30 <memset+0x4>

08006f3c <strcat>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4602      	mov	r2, r0
 8006f40:	7814      	ldrb	r4, [r2, #0]
 8006f42:	4613      	mov	r3, r2
 8006f44:	3201      	adds	r2, #1
 8006f46:	2c00      	cmp	r4, #0
 8006f48:	d1fa      	bne.n	8006f40 <strcat+0x4>
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	d1f9      	bne.n	8006f4c <strcat+0x10>
 8006f58:	bd10      	pop	{r4, pc}
	...

08006f5c <__errno>:
 8006f5c:	4b01      	ldr	r3, [pc, #4]	@ (8006f64 <__errno+0x8>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2000002c 	.word	0x2000002c

08006f68 <__libc_init_array>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fa0 <__libc_init_array+0x38>)
 8006f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fa4 <__libc_init_array+0x3c>)
 8006f6e:	1b64      	subs	r4, r4, r5
 8006f70:	10a4      	asrs	r4, r4, #2
 8006f72:	2600      	movs	r6, #0
 8006f74:	42a6      	cmp	r6, r4
 8006f76:	d109      	bne.n	8006f8c <__libc_init_array+0x24>
 8006f78:	4d0b      	ldr	r5, [pc, #44]	@ (8006fa8 <__libc_init_array+0x40>)
 8006f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8006fac <__libc_init_array+0x44>)
 8006f7c:	f000 fc66 	bl	800784c <_init>
 8006f80:	1b64      	subs	r4, r4, r5
 8006f82:	10a4      	asrs	r4, r4, #2
 8006f84:	2600      	movs	r6, #0
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	d105      	bne.n	8006f96 <__libc_init_array+0x2e>
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f90:	4798      	blx	r3
 8006f92:	3601      	adds	r6, #1
 8006f94:	e7ee      	b.n	8006f74 <__libc_init_array+0xc>
 8006f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9a:	4798      	blx	r3
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	e7f2      	b.n	8006f86 <__libc_init_array+0x1e>
 8006fa0:	0800a958 	.word	0x0800a958
 8006fa4:	0800a958 	.word	0x0800a958
 8006fa8:	0800a958 	.word	0x0800a958
 8006fac:	0800a95c 	.word	0x0800a95c

08006fb0 <__retarget_lock_acquire_recursive>:
 8006fb0:	4770      	bx	lr

08006fb2 <__retarget_lock_release_recursive>:
 8006fb2:	4770      	bx	lr

08006fb4 <_free_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d041      	beq.n	8007040 <_free_r+0x8c>
 8006fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc0:	1f0c      	subs	r4, r1, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfb8      	it	lt
 8006fc6:	18e4      	addlt	r4, r4, r3
 8006fc8:	f000 f8e0 	bl	800718c <__malloc_lock>
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <_free_r+0x90>)
 8006fce:	6813      	ldr	r3, [r2, #0]
 8006fd0:	b933      	cbnz	r3, 8006fe0 <_free_r+0x2c>
 8006fd2:	6063      	str	r3, [r4, #4]
 8006fd4:	6014      	str	r4, [r2, #0]
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fdc:	f000 b8dc 	b.w	8007198 <__malloc_unlock>
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d908      	bls.n	8006ff6 <_free_r+0x42>
 8006fe4:	6820      	ldr	r0, [r4, #0]
 8006fe6:	1821      	adds	r1, r4, r0
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	bf01      	itttt	eq
 8006fec:	6819      	ldreq	r1, [r3, #0]
 8006fee:	685b      	ldreq	r3, [r3, #4]
 8006ff0:	1809      	addeq	r1, r1, r0
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	e7ed      	b.n	8006fd2 <_free_r+0x1e>
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	b10b      	cbz	r3, 8007000 <_free_r+0x4c>
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	d9fa      	bls.n	8006ff6 <_free_r+0x42>
 8007000:	6811      	ldr	r1, [r2, #0]
 8007002:	1850      	adds	r0, r2, r1
 8007004:	42a0      	cmp	r0, r4
 8007006:	d10b      	bne.n	8007020 <_free_r+0x6c>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	4401      	add	r1, r0
 800700c:	1850      	adds	r0, r2, r1
 800700e:	4283      	cmp	r3, r0
 8007010:	6011      	str	r1, [r2, #0]
 8007012:	d1e0      	bne.n	8006fd6 <_free_r+0x22>
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	6053      	str	r3, [r2, #4]
 800701a:	4408      	add	r0, r1
 800701c:	6010      	str	r0, [r2, #0]
 800701e:	e7da      	b.n	8006fd6 <_free_r+0x22>
 8007020:	d902      	bls.n	8007028 <_free_r+0x74>
 8007022:	230c      	movs	r3, #12
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	e7d6      	b.n	8006fd6 <_free_r+0x22>
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	1821      	adds	r1, r4, r0
 800702c:	428b      	cmp	r3, r1
 800702e:	bf04      	itt	eq
 8007030:	6819      	ldreq	r1, [r3, #0]
 8007032:	685b      	ldreq	r3, [r3, #4]
 8007034:	6063      	str	r3, [r4, #4]
 8007036:	bf04      	itt	eq
 8007038:	1809      	addeq	r1, r1, r0
 800703a:	6021      	streq	r1, [r4, #0]
 800703c:	6054      	str	r4, [r2, #4]
 800703e:	e7ca      	b.n	8006fd6 <_free_r+0x22>
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	200004c8 	.word	0x200004c8

08007048 <sbrk_aligned>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4e0f      	ldr	r6, [pc, #60]	@ (8007088 <sbrk_aligned+0x40>)
 800704c:	460c      	mov	r4, r1
 800704e:	6831      	ldr	r1, [r6, #0]
 8007050:	4605      	mov	r5, r0
 8007052:	b911      	cbnz	r1, 800705a <sbrk_aligned+0x12>
 8007054:	f000 fba6 	bl	80077a4 <_sbrk_r>
 8007058:	6030      	str	r0, [r6, #0]
 800705a:	4621      	mov	r1, r4
 800705c:	4628      	mov	r0, r5
 800705e:	f000 fba1 	bl	80077a4 <_sbrk_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d103      	bne.n	800706e <sbrk_aligned+0x26>
 8007066:	f04f 34ff 	mov.w	r4, #4294967295
 800706a:	4620      	mov	r0, r4
 800706c:	bd70      	pop	{r4, r5, r6, pc}
 800706e:	1cc4      	adds	r4, r0, #3
 8007070:	f024 0403 	bic.w	r4, r4, #3
 8007074:	42a0      	cmp	r0, r4
 8007076:	d0f8      	beq.n	800706a <sbrk_aligned+0x22>
 8007078:	1a21      	subs	r1, r4, r0
 800707a:	4628      	mov	r0, r5
 800707c:	f000 fb92 	bl	80077a4 <_sbrk_r>
 8007080:	3001      	adds	r0, #1
 8007082:	d1f2      	bne.n	800706a <sbrk_aligned+0x22>
 8007084:	e7ef      	b.n	8007066 <sbrk_aligned+0x1e>
 8007086:	bf00      	nop
 8007088:	200004c4 	.word	0x200004c4

0800708c <_malloc_r>:
 800708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007090:	1ccd      	adds	r5, r1, #3
 8007092:	f025 0503 	bic.w	r5, r5, #3
 8007096:	3508      	adds	r5, #8
 8007098:	2d0c      	cmp	r5, #12
 800709a:	bf38      	it	cc
 800709c:	250c      	movcc	r5, #12
 800709e:	2d00      	cmp	r5, #0
 80070a0:	4606      	mov	r6, r0
 80070a2:	db01      	blt.n	80070a8 <_malloc_r+0x1c>
 80070a4:	42a9      	cmp	r1, r5
 80070a6:	d904      	bls.n	80070b2 <_malloc_r+0x26>
 80070a8:	230c      	movs	r3, #12
 80070aa:	6033      	str	r3, [r6, #0]
 80070ac:	2000      	movs	r0, #0
 80070ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007188 <_malloc_r+0xfc>
 80070b6:	f000 f869 	bl	800718c <__malloc_lock>
 80070ba:	f8d8 3000 	ldr.w	r3, [r8]
 80070be:	461c      	mov	r4, r3
 80070c0:	bb44      	cbnz	r4, 8007114 <_malloc_r+0x88>
 80070c2:	4629      	mov	r1, r5
 80070c4:	4630      	mov	r0, r6
 80070c6:	f7ff ffbf 	bl	8007048 <sbrk_aligned>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	4604      	mov	r4, r0
 80070ce:	d158      	bne.n	8007182 <_malloc_r+0xf6>
 80070d0:	f8d8 4000 	ldr.w	r4, [r8]
 80070d4:	4627      	mov	r7, r4
 80070d6:	2f00      	cmp	r7, #0
 80070d8:	d143      	bne.n	8007162 <_malloc_r+0xd6>
 80070da:	2c00      	cmp	r4, #0
 80070dc:	d04b      	beq.n	8007176 <_malloc_r+0xea>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	4639      	mov	r1, r7
 80070e2:	4630      	mov	r0, r6
 80070e4:	eb04 0903 	add.w	r9, r4, r3
 80070e8:	f000 fb5c 	bl	80077a4 <_sbrk_r>
 80070ec:	4581      	cmp	r9, r0
 80070ee:	d142      	bne.n	8007176 <_malloc_r+0xea>
 80070f0:	6821      	ldr	r1, [r4, #0]
 80070f2:	1a6d      	subs	r5, r5, r1
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ffa6 	bl	8007048 <sbrk_aligned>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d03a      	beq.n	8007176 <_malloc_r+0xea>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	442b      	add	r3, r5
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	f8d8 3000 	ldr.w	r3, [r8]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	bb62      	cbnz	r2, 8007168 <_malloc_r+0xdc>
 800710e:	f8c8 7000 	str.w	r7, [r8]
 8007112:	e00f      	b.n	8007134 <_malloc_r+0xa8>
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	1b52      	subs	r2, r2, r5
 8007118:	d420      	bmi.n	800715c <_malloc_r+0xd0>
 800711a:	2a0b      	cmp	r2, #11
 800711c:	d917      	bls.n	800714e <_malloc_r+0xc2>
 800711e:	1961      	adds	r1, r4, r5
 8007120:	42a3      	cmp	r3, r4
 8007122:	6025      	str	r5, [r4, #0]
 8007124:	bf18      	it	ne
 8007126:	6059      	strne	r1, [r3, #4]
 8007128:	6863      	ldr	r3, [r4, #4]
 800712a:	bf08      	it	eq
 800712c:	f8c8 1000 	streq.w	r1, [r8]
 8007130:	5162      	str	r2, [r4, r5]
 8007132:	604b      	str	r3, [r1, #4]
 8007134:	4630      	mov	r0, r6
 8007136:	f000 f82f 	bl	8007198 <__malloc_unlock>
 800713a:	f104 000b 	add.w	r0, r4, #11
 800713e:	1d23      	adds	r3, r4, #4
 8007140:	f020 0007 	bic.w	r0, r0, #7
 8007144:	1ac2      	subs	r2, r0, r3
 8007146:	bf1c      	itt	ne
 8007148:	1a1b      	subne	r3, r3, r0
 800714a:	50a3      	strne	r3, [r4, r2]
 800714c:	e7af      	b.n	80070ae <_malloc_r+0x22>
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	42a3      	cmp	r3, r4
 8007152:	bf0c      	ite	eq
 8007154:	f8c8 2000 	streq.w	r2, [r8]
 8007158:	605a      	strne	r2, [r3, #4]
 800715a:	e7eb      	b.n	8007134 <_malloc_r+0xa8>
 800715c:	4623      	mov	r3, r4
 800715e:	6864      	ldr	r4, [r4, #4]
 8007160:	e7ae      	b.n	80070c0 <_malloc_r+0x34>
 8007162:	463c      	mov	r4, r7
 8007164:	687f      	ldr	r7, [r7, #4]
 8007166:	e7b6      	b.n	80070d6 <_malloc_r+0x4a>
 8007168:	461a      	mov	r2, r3
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	42a3      	cmp	r3, r4
 800716e:	d1fb      	bne.n	8007168 <_malloc_r+0xdc>
 8007170:	2300      	movs	r3, #0
 8007172:	6053      	str	r3, [r2, #4]
 8007174:	e7de      	b.n	8007134 <_malloc_r+0xa8>
 8007176:	230c      	movs	r3, #12
 8007178:	6033      	str	r3, [r6, #0]
 800717a:	4630      	mov	r0, r6
 800717c:	f000 f80c 	bl	8007198 <__malloc_unlock>
 8007180:	e794      	b.n	80070ac <_malloc_r+0x20>
 8007182:	6005      	str	r5, [r0, #0]
 8007184:	e7d6      	b.n	8007134 <_malloc_r+0xa8>
 8007186:	bf00      	nop
 8007188:	200004c8 	.word	0x200004c8

0800718c <__malloc_lock>:
 800718c:	4801      	ldr	r0, [pc, #4]	@ (8007194 <__malloc_lock+0x8>)
 800718e:	f7ff bf0f 	b.w	8006fb0 <__retarget_lock_acquire_recursive>
 8007192:	bf00      	nop
 8007194:	200004c0 	.word	0x200004c0

08007198 <__malloc_unlock>:
 8007198:	4801      	ldr	r0, [pc, #4]	@ (80071a0 <__malloc_unlock+0x8>)
 800719a:	f7ff bf0a 	b.w	8006fb2 <__retarget_lock_release_recursive>
 800719e:	bf00      	nop
 80071a0:	200004c0 	.word	0x200004c0

080071a4 <__ssputs_r>:
 80071a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	688e      	ldr	r6, [r1, #8]
 80071aa:	461f      	mov	r7, r3
 80071ac:	42be      	cmp	r6, r7
 80071ae:	680b      	ldr	r3, [r1, #0]
 80071b0:	4682      	mov	sl, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	4690      	mov	r8, r2
 80071b6:	d82d      	bhi.n	8007214 <__ssputs_r+0x70>
 80071b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071c0:	d026      	beq.n	8007210 <__ssputs_r+0x6c>
 80071c2:	6965      	ldr	r5, [r4, #20]
 80071c4:	6909      	ldr	r1, [r1, #16]
 80071c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071ca:	eba3 0901 	sub.w	r9, r3, r1
 80071ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071d2:	1c7b      	adds	r3, r7, #1
 80071d4:	444b      	add	r3, r9
 80071d6:	106d      	asrs	r5, r5, #1
 80071d8:	429d      	cmp	r5, r3
 80071da:	bf38      	it	cc
 80071dc:	461d      	movcc	r5, r3
 80071de:	0553      	lsls	r3, r2, #21
 80071e0:	d527      	bpl.n	8007232 <__ssputs_r+0x8e>
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7ff ff52 	bl	800708c <_malloc_r>
 80071e8:	4606      	mov	r6, r0
 80071ea:	b360      	cbz	r0, 8007246 <__ssputs_r+0xa2>
 80071ec:	6921      	ldr	r1, [r4, #16]
 80071ee:	464a      	mov	r2, r9
 80071f0:	f000 fae8 	bl	80077c4 <memcpy>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	6126      	str	r6, [r4, #16]
 8007202:	6165      	str	r5, [r4, #20]
 8007204:	444e      	add	r6, r9
 8007206:	eba5 0509 	sub.w	r5, r5, r9
 800720a:	6026      	str	r6, [r4, #0]
 800720c:	60a5      	str	r5, [r4, #8]
 800720e:	463e      	mov	r6, r7
 8007210:	42be      	cmp	r6, r7
 8007212:	d900      	bls.n	8007216 <__ssputs_r+0x72>
 8007214:	463e      	mov	r6, r7
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	4632      	mov	r2, r6
 800721a:	4641      	mov	r1, r8
 800721c:	f000 faa8 	bl	8007770 <memmove>
 8007220:	68a3      	ldr	r3, [r4, #8]
 8007222:	1b9b      	subs	r3, r3, r6
 8007224:	60a3      	str	r3, [r4, #8]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	4433      	add	r3, r6
 800722a:	6023      	str	r3, [r4, #0]
 800722c:	2000      	movs	r0, #0
 800722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007232:	462a      	mov	r2, r5
 8007234:	f000 fad4 	bl	80077e0 <_realloc_r>
 8007238:	4606      	mov	r6, r0
 800723a:	2800      	cmp	r0, #0
 800723c:	d1e0      	bne.n	8007200 <__ssputs_r+0x5c>
 800723e:	6921      	ldr	r1, [r4, #16]
 8007240:	4650      	mov	r0, sl
 8007242:	f7ff feb7 	bl	8006fb4 <_free_r>
 8007246:	230c      	movs	r3, #12
 8007248:	f8ca 3000 	str.w	r3, [sl]
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	e7e9      	b.n	800722e <__ssputs_r+0x8a>
	...

0800725c <_svfiprintf_r>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4698      	mov	r8, r3
 8007262:	898b      	ldrh	r3, [r1, #12]
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	b09d      	sub	sp, #116	@ 0x74
 8007268:	4607      	mov	r7, r0
 800726a:	460d      	mov	r5, r1
 800726c:	4614      	mov	r4, r2
 800726e:	d510      	bpl.n	8007292 <_svfiprintf_r+0x36>
 8007270:	690b      	ldr	r3, [r1, #16]
 8007272:	b973      	cbnz	r3, 8007292 <_svfiprintf_r+0x36>
 8007274:	2140      	movs	r1, #64	@ 0x40
 8007276:	f7ff ff09 	bl	800708c <_malloc_r>
 800727a:	6028      	str	r0, [r5, #0]
 800727c:	6128      	str	r0, [r5, #16]
 800727e:	b930      	cbnz	r0, 800728e <_svfiprintf_r+0x32>
 8007280:	230c      	movs	r3, #12
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	b01d      	add	sp, #116	@ 0x74
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	2340      	movs	r3, #64	@ 0x40
 8007290:	616b      	str	r3, [r5, #20]
 8007292:	2300      	movs	r3, #0
 8007294:	9309      	str	r3, [sp, #36]	@ 0x24
 8007296:	2320      	movs	r3, #32
 8007298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800729c:	f8cd 800c 	str.w	r8, [sp, #12]
 80072a0:	2330      	movs	r3, #48	@ 0x30
 80072a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007440 <_svfiprintf_r+0x1e4>
 80072a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072aa:	f04f 0901 	mov.w	r9, #1
 80072ae:	4623      	mov	r3, r4
 80072b0:	469a      	mov	sl, r3
 80072b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b6:	b10a      	cbz	r2, 80072bc <_svfiprintf_r+0x60>
 80072b8:	2a25      	cmp	r2, #37	@ 0x25
 80072ba:	d1f9      	bne.n	80072b0 <_svfiprintf_r+0x54>
 80072bc:	ebba 0b04 	subs.w	fp, sl, r4
 80072c0:	d00b      	beq.n	80072da <_svfiprintf_r+0x7e>
 80072c2:	465b      	mov	r3, fp
 80072c4:	4622      	mov	r2, r4
 80072c6:	4629      	mov	r1, r5
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ff6b 	bl	80071a4 <__ssputs_r>
 80072ce:	3001      	adds	r0, #1
 80072d0:	f000 80a7 	beq.w	8007422 <_svfiprintf_r+0x1c6>
 80072d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d6:	445a      	add	r2, fp
 80072d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80072da:	f89a 3000 	ldrb.w	r3, [sl]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 809f 	beq.w	8007422 <_svfiprintf_r+0x1c6>
 80072e4:	2300      	movs	r3, #0
 80072e6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ee:	f10a 0a01 	add.w	sl, sl, #1
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	9307      	str	r3, [sp, #28]
 80072f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80072fc:	4654      	mov	r4, sl
 80072fe:	2205      	movs	r2, #5
 8007300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007304:	484e      	ldr	r0, [pc, #312]	@ (8007440 <_svfiprintf_r+0x1e4>)
 8007306:	f7f8 ff6b 	bl	80001e0 <memchr>
 800730a:	9a04      	ldr	r2, [sp, #16]
 800730c:	b9d8      	cbnz	r0, 8007346 <_svfiprintf_r+0xea>
 800730e:	06d0      	lsls	r0, r2, #27
 8007310:	bf44      	itt	mi
 8007312:	2320      	movmi	r3, #32
 8007314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007318:	0711      	lsls	r1, r2, #28
 800731a:	bf44      	itt	mi
 800731c:	232b      	movmi	r3, #43	@ 0x2b
 800731e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007322:	f89a 3000 	ldrb.w	r3, [sl]
 8007326:	2b2a      	cmp	r3, #42	@ 0x2a
 8007328:	d015      	beq.n	8007356 <_svfiprintf_r+0xfa>
 800732a:	9a07      	ldr	r2, [sp, #28]
 800732c:	4654      	mov	r4, sl
 800732e:	2000      	movs	r0, #0
 8007330:	f04f 0c0a 	mov.w	ip, #10
 8007334:	4621      	mov	r1, r4
 8007336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800733a:	3b30      	subs	r3, #48	@ 0x30
 800733c:	2b09      	cmp	r3, #9
 800733e:	d94b      	bls.n	80073d8 <_svfiprintf_r+0x17c>
 8007340:	b1b0      	cbz	r0, 8007370 <_svfiprintf_r+0x114>
 8007342:	9207      	str	r2, [sp, #28]
 8007344:	e014      	b.n	8007370 <_svfiprintf_r+0x114>
 8007346:	eba0 0308 	sub.w	r3, r0, r8
 800734a:	fa09 f303 	lsl.w	r3, r9, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	46a2      	mov	sl, r4
 8007354:	e7d2      	b.n	80072fc <_svfiprintf_r+0xa0>
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	1d19      	adds	r1, r3, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	9103      	str	r1, [sp, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	bfbb      	ittet	lt
 8007362:	425b      	neglt	r3, r3
 8007364:	f042 0202 	orrlt.w	r2, r2, #2
 8007368:	9307      	strge	r3, [sp, #28]
 800736a:	9307      	strlt	r3, [sp, #28]
 800736c:	bfb8      	it	lt
 800736e:	9204      	strlt	r2, [sp, #16]
 8007370:	7823      	ldrb	r3, [r4, #0]
 8007372:	2b2e      	cmp	r3, #46	@ 0x2e
 8007374:	d10a      	bne.n	800738c <_svfiprintf_r+0x130>
 8007376:	7863      	ldrb	r3, [r4, #1]
 8007378:	2b2a      	cmp	r3, #42	@ 0x2a
 800737a:	d132      	bne.n	80073e2 <_svfiprintf_r+0x186>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	1d1a      	adds	r2, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	9203      	str	r2, [sp, #12]
 8007384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007388:	3402      	adds	r4, #2
 800738a:	9305      	str	r3, [sp, #20]
 800738c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007450 <_svfiprintf_r+0x1f4>
 8007390:	7821      	ldrb	r1, [r4, #0]
 8007392:	2203      	movs	r2, #3
 8007394:	4650      	mov	r0, sl
 8007396:	f7f8 ff23 	bl	80001e0 <memchr>
 800739a:	b138      	cbz	r0, 80073ac <_svfiprintf_r+0x150>
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	eba0 000a 	sub.w	r0, r0, sl
 80073a2:	2240      	movs	r2, #64	@ 0x40
 80073a4:	4082      	lsls	r2, r0
 80073a6:	4313      	orrs	r3, r2
 80073a8:	3401      	adds	r4, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b0:	4824      	ldr	r0, [pc, #144]	@ (8007444 <_svfiprintf_r+0x1e8>)
 80073b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073b6:	2206      	movs	r2, #6
 80073b8:	f7f8 ff12 	bl	80001e0 <memchr>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d036      	beq.n	800742e <_svfiprintf_r+0x1d2>
 80073c0:	4b21      	ldr	r3, [pc, #132]	@ (8007448 <_svfiprintf_r+0x1ec>)
 80073c2:	bb1b      	cbnz	r3, 800740c <_svfiprintf_r+0x1b0>
 80073c4:	9b03      	ldr	r3, [sp, #12]
 80073c6:	3307      	adds	r3, #7
 80073c8:	f023 0307 	bic.w	r3, r3, #7
 80073cc:	3308      	adds	r3, #8
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d2:	4433      	add	r3, r6
 80073d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d6:	e76a      	b.n	80072ae <_svfiprintf_r+0x52>
 80073d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073dc:	460c      	mov	r4, r1
 80073de:	2001      	movs	r0, #1
 80073e0:	e7a8      	b.n	8007334 <_svfiprintf_r+0xd8>
 80073e2:	2300      	movs	r3, #0
 80073e4:	3401      	adds	r4, #1
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	4619      	mov	r1, r3
 80073ea:	f04f 0c0a 	mov.w	ip, #10
 80073ee:	4620      	mov	r0, r4
 80073f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f4:	3a30      	subs	r2, #48	@ 0x30
 80073f6:	2a09      	cmp	r2, #9
 80073f8:	d903      	bls.n	8007402 <_svfiprintf_r+0x1a6>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0c6      	beq.n	800738c <_svfiprintf_r+0x130>
 80073fe:	9105      	str	r1, [sp, #20]
 8007400:	e7c4      	b.n	800738c <_svfiprintf_r+0x130>
 8007402:	fb0c 2101 	mla	r1, ip, r1, r2
 8007406:	4604      	mov	r4, r0
 8007408:	2301      	movs	r3, #1
 800740a:	e7f0      	b.n	80073ee <_svfiprintf_r+0x192>
 800740c:	ab03      	add	r3, sp, #12
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	462a      	mov	r2, r5
 8007412:	4b0e      	ldr	r3, [pc, #56]	@ (800744c <_svfiprintf_r+0x1f0>)
 8007414:	a904      	add	r1, sp, #16
 8007416:	4638      	mov	r0, r7
 8007418:	f3af 8000 	nop.w
 800741c:	1c42      	adds	r2, r0, #1
 800741e:	4606      	mov	r6, r0
 8007420:	d1d6      	bne.n	80073d0 <_svfiprintf_r+0x174>
 8007422:	89ab      	ldrh	r3, [r5, #12]
 8007424:	065b      	lsls	r3, r3, #25
 8007426:	f53f af2d 	bmi.w	8007284 <_svfiprintf_r+0x28>
 800742a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800742c:	e72c      	b.n	8007288 <_svfiprintf_r+0x2c>
 800742e:	ab03      	add	r3, sp, #12
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	462a      	mov	r2, r5
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <_svfiprintf_r+0x1f0>)
 8007436:	a904      	add	r1, sp, #16
 8007438:	4638      	mov	r0, r7
 800743a:	f000 f879 	bl	8007530 <_printf_i>
 800743e:	e7ed      	b.n	800741c <_svfiprintf_r+0x1c0>
 8007440:	0800a91c 	.word	0x0800a91c
 8007444:	0800a926 	.word	0x0800a926
 8007448:	00000000 	.word	0x00000000
 800744c:	080071a5 	.word	0x080071a5
 8007450:	0800a922 	.word	0x0800a922

08007454 <_printf_common>:
 8007454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	4616      	mov	r6, r2
 800745a:	4698      	mov	r8, r3
 800745c:	688a      	ldr	r2, [r1, #8]
 800745e:	690b      	ldr	r3, [r1, #16]
 8007460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007464:	4293      	cmp	r3, r2
 8007466:	bfb8      	it	lt
 8007468:	4613      	movlt	r3, r2
 800746a:	6033      	str	r3, [r6, #0]
 800746c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007470:	4607      	mov	r7, r0
 8007472:	460c      	mov	r4, r1
 8007474:	b10a      	cbz	r2, 800747a <_printf_common+0x26>
 8007476:	3301      	adds	r3, #1
 8007478:	6033      	str	r3, [r6, #0]
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	0699      	lsls	r1, r3, #26
 800747e:	bf42      	ittt	mi
 8007480:	6833      	ldrmi	r3, [r6, #0]
 8007482:	3302      	addmi	r3, #2
 8007484:	6033      	strmi	r3, [r6, #0]
 8007486:	6825      	ldr	r5, [r4, #0]
 8007488:	f015 0506 	ands.w	r5, r5, #6
 800748c:	d106      	bne.n	800749c <_printf_common+0x48>
 800748e:	f104 0a19 	add.w	sl, r4, #25
 8007492:	68e3      	ldr	r3, [r4, #12]
 8007494:	6832      	ldr	r2, [r6, #0]
 8007496:	1a9b      	subs	r3, r3, r2
 8007498:	42ab      	cmp	r3, r5
 800749a:	dc26      	bgt.n	80074ea <_printf_common+0x96>
 800749c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	3b00      	subs	r3, #0
 80074a4:	bf18      	it	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	0692      	lsls	r2, r2, #26
 80074aa:	d42b      	bmi.n	8007504 <_printf_common+0xb0>
 80074ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074b0:	4641      	mov	r1, r8
 80074b2:	4638      	mov	r0, r7
 80074b4:	47c8      	blx	r9
 80074b6:	3001      	adds	r0, #1
 80074b8:	d01e      	beq.n	80074f8 <_printf_common+0xa4>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	6922      	ldr	r2, [r4, #16]
 80074be:	f003 0306 	and.w	r3, r3, #6
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	bf02      	ittt	eq
 80074c6:	68e5      	ldreq	r5, [r4, #12]
 80074c8:	6833      	ldreq	r3, [r6, #0]
 80074ca:	1aed      	subeq	r5, r5, r3
 80074cc:	68a3      	ldr	r3, [r4, #8]
 80074ce:	bf0c      	ite	eq
 80074d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074d4:	2500      	movne	r5, #0
 80074d6:	4293      	cmp	r3, r2
 80074d8:	bfc4      	itt	gt
 80074da:	1a9b      	subgt	r3, r3, r2
 80074dc:	18ed      	addgt	r5, r5, r3
 80074de:	2600      	movs	r6, #0
 80074e0:	341a      	adds	r4, #26
 80074e2:	42b5      	cmp	r5, r6
 80074e4:	d11a      	bne.n	800751c <_printf_common+0xc8>
 80074e6:	2000      	movs	r0, #0
 80074e8:	e008      	b.n	80074fc <_printf_common+0xa8>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4652      	mov	r2, sl
 80074ee:	4641      	mov	r1, r8
 80074f0:	4638      	mov	r0, r7
 80074f2:	47c8      	blx	r9
 80074f4:	3001      	adds	r0, #1
 80074f6:	d103      	bne.n	8007500 <_printf_common+0xac>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	3501      	adds	r5, #1
 8007502:	e7c6      	b.n	8007492 <_printf_common+0x3e>
 8007504:	18e1      	adds	r1, r4, r3
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	2030      	movs	r0, #48	@ 0x30
 800750a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800750e:	4422      	add	r2, r4
 8007510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007518:	3302      	adds	r3, #2
 800751a:	e7c7      	b.n	80074ac <_printf_common+0x58>
 800751c:	2301      	movs	r3, #1
 800751e:	4622      	mov	r2, r4
 8007520:	4641      	mov	r1, r8
 8007522:	4638      	mov	r0, r7
 8007524:	47c8      	blx	r9
 8007526:	3001      	adds	r0, #1
 8007528:	d0e6      	beq.n	80074f8 <_printf_common+0xa4>
 800752a:	3601      	adds	r6, #1
 800752c:	e7d9      	b.n	80074e2 <_printf_common+0x8e>
	...

08007530 <_printf_i>:
 8007530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	7e0f      	ldrb	r7, [r1, #24]
 8007536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007538:	2f78      	cmp	r7, #120	@ 0x78
 800753a:	4691      	mov	r9, r2
 800753c:	4680      	mov	r8, r0
 800753e:	460c      	mov	r4, r1
 8007540:	469a      	mov	sl, r3
 8007542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007546:	d807      	bhi.n	8007558 <_printf_i+0x28>
 8007548:	2f62      	cmp	r7, #98	@ 0x62
 800754a:	d80a      	bhi.n	8007562 <_printf_i+0x32>
 800754c:	2f00      	cmp	r7, #0
 800754e:	f000 80d2 	beq.w	80076f6 <_printf_i+0x1c6>
 8007552:	2f58      	cmp	r7, #88	@ 0x58
 8007554:	f000 80b9 	beq.w	80076ca <_printf_i+0x19a>
 8007558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800755c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007560:	e03a      	b.n	80075d8 <_printf_i+0xa8>
 8007562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007566:	2b15      	cmp	r3, #21
 8007568:	d8f6      	bhi.n	8007558 <_printf_i+0x28>
 800756a:	a101      	add	r1, pc, #4	@ (adr r1, 8007570 <_printf_i+0x40>)
 800756c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007570:	080075c9 	.word	0x080075c9
 8007574:	080075dd 	.word	0x080075dd
 8007578:	08007559 	.word	0x08007559
 800757c:	08007559 	.word	0x08007559
 8007580:	08007559 	.word	0x08007559
 8007584:	08007559 	.word	0x08007559
 8007588:	080075dd 	.word	0x080075dd
 800758c:	08007559 	.word	0x08007559
 8007590:	08007559 	.word	0x08007559
 8007594:	08007559 	.word	0x08007559
 8007598:	08007559 	.word	0x08007559
 800759c:	080076dd 	.word	0x080076dd
 80075a0:	08007607 	.word	0x08007607
 80075a4:	08007697 	.word	0x08007697
 80075a8:	08007559 	.word	0x08007559
 80075ac:	08007559 	.word	0x08007559
 80075b0:	080076ff 	.word	0x080076ff
 80075b4:	08007559 	.word	0x08007559
 80075b8:	08007607 	.word	0x08007607
 80075bc:	08007559 	.word	0x08007559
 80075c0:	08007559 	.word	0x08007559
 80075c4:	0800769f 	.word	0x0800769f
 80075c8:	6833      	ldr	r3, [r6, #0]
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6032      	str	r2, [r6, #0]
 80075d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075d8:	2301      	movs	r3, #1
 80075da:	e09d      	b.n	8007718 <_printf_i+0x1e8>
 80075dc:	6833      	ldr	r3, [r6, #0]
 80075de:	6820      	ldr	r0, [r4, #0]
 80075e0:	1d19      	adds	r1, r3, #4
 80075e2:	6031      	str	r1, [r6, #0]
 80075e4:	0606      	lsls	r6, r0, #24
 80075e6:	d501      	bpl.n	80075ec <_printf_i+0xbc>
 80075e8:	681d      	ldr	r5, [r3, #0]
 80075ea:	e003      	b.n	80075f4 <_printf_i+0xc4>
 80075ec:	0645      	lsls	r5, r0, #25
 80075ee:	d5fb      	bpl.n	80075e8 <_printf_i+0xb8>
 80075f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	da03      	bge.n	8007600 <_printf_i+0xd0>
 80075f8:	232d      	movs	r3, #45	@ 0x2d
 80075fa:	426d      	negs	r5, r5
 80075fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007600:	4859      	ldr	r0, [pc, #356]	@ (8007768 <_printf_i+0x238>)
 8007602:	230a      	movs	r3, #10
 8007604:	e011      	b.n	800762a <_printf_i+0xfa>
 8007606:	6821      	ldr	r1, [r4, #0]
 8007608:	6833      	ldr	r3, [r6, #0]
 800760a:	0608      	lsls	r0, r1, #24
 800760c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007610:	d402      	bmi.n	8007618 <_printf_i+0xe8>
 8007612:	0649      	lsls	r1, r1, #25
 8007614:	bf48      	it	mi
 8007616:	b2ad      	uxthmi	r5, r5
 8007618:	2f6f      	cmp	r7, #111	@ 0x6f
 800761a:	4853      	ldr	r0, [pc, #332]	@ (8007768 <_printf_i+0x238>)
 800761c:	6033      	str	r3, [r6, #0]
 800761e:	bf14      	ite	ne
 8007620:	230a      	movne	r3, #10
 8007622:	2308      	moveq	r3, #8
 8007624:	2100      	movs	r1, #0
 8007626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800762a:	6866      	ldr	r6, [r4, #4]
 800762c:	60a6      	str	r6, [r4, #8]
 800762e:	2e00      	cmp	r6, #0
 8007630:	bfa2      	ittt	ge
 8007632:	6821      	ldrge	r1, [r4, #0]
 8007634:	f021 0104 	bicge.w	r1, r1, #4
 8007638:	6021      	strge	r1, [r4, #0]
 800763a:	b90d      	cbnz	r5, 8007640 <_printf_i+0x110>
 800763c:	2e00      	cmp	r6, #0
 800763e:	d04b      	beq.n	80076d8 <_printf_i+0x1a8>
 8007640:	4616      	mov	r6, r2
 8007642:	fbb5 f1f3 	udiv	r1, r5, r3
 8007646:	fb03 5711 	mls	r7, r3, r1, r5
 800764a:	5dc7      	ldrb	r7, [r0, r7]
 800764c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007650:	462f      	mov	r7, r5
 8007652:	42bb      	cmp	r3, r7
 8007654:	460d      	mov	r5, r1
 8007656:	d9f4      	bls.n	8007642 <_printf_i+0x112>
 8007658:	2b08      	cmp	r3, #8
 800765a:	d10b      	bne.n	8007674 <_printf_i+0x144>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	07df      	lsls	r7, r3, #31
 8007660:	d508      	bpl.n	8007674 <_printf_i+0x144>
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	6861      	ldr	r1, [r4, #4]
 8007666:	4299      	cmp	r1, r3
 8007668:	bfde      	ittt	le
 800766a:	2330      	movle	r3, #48	@ 0x30
 800766c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007670:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007674:	1b92      	subs	r2, r2, r6
 8007676:	6122      	str	r2, [r4, #16]
 8007678:	f8cd a000 	str.w	sl, [sp]
 800767c:	464b      	mov	r3, r9
 800767e:	aa03      	add	r2, sp, #12
 8007680:	4621      	mov	r1, r4
 8007682:	4640      	mov	r0, r8
 8007684:	f7ff fee6 	bl	8007454 <_printf_common>
 8007688:	3001      	adds	r0, #1
 800768a:	d14a      	bne.n	8007722 <_printf_i+0x1f2>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	b004      	add	sp, #16
 8007692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	f043 0320 	orr.w	r3, r3, #32
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	4833      	ldr	r0, [pc, #204]	@ (800776c <_printf_i+0x23c>)
 80076a0:	2778      	movs	r7, #120	@ 0x78
 80076a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	6831      	ldr	r1, [r6, #0]
 80076aa:	061f      	lsls	r7, r3, #24
 80076ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80076b0:	d402      	bmi.n	80076b8 <_printf_i+0x188>
 80076b2:	065f      	lsls	r7, r3, #25
 80076b4:	bf48      	it	mi
 80076b6:	b2ad      	uxthmi	r5, r5
 80076b8:	6031      	str	r1, [r6, #0]
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	bf44      	itt	mi
 80076be:	f043 0320 	orrmi.w	r3, r3, #32
 80076c2:	6023      	strmi	r3, [r4, #0]
 80076c4:	b11d      	cbz	r5, 80076ce <_printf_i+0x19e>
 80076c6:	2310      	movs	r3, #16
 80076c8:	e7ac      	b.n	8007624 <_printf_i+0xf4>
 80076ca:	4827      	ldr	r0, [pc, #156]	@ (8007768 <_printf_i+0x238>)
 80076cc:	e7e9      	b.n	80076a2 <_printf_i+0x172>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	f023 0320 	bic.w	r3, r3, #32
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	e7f6      	b.n	80076c6 <_printf_i+0x196>
 80076d8:	4616      	mov	r6, r2
 80076da:	e7bd      	b.n	8007658 <_printf_i+0x128>
 80076dc:	6833      	ldr	r3, [r6, #0]
 80076de:	6825      	ldr	r5, [r4, #0]
 80076e0:	6961      	ldr	r1, [r4, #20]
 80076e2:	1d18      	adds	r0, r3, #4
 80076e4:	6030      	str	r0, [r6, #0]
 80076e6:	062e      	lsls	r6, r5, #24
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	d501      	bpl.n	80076f0 <_printf_i+0x1c0>
 80076ec:	6019      	str	r1, [r3, #0]
 80076ee:	e002      	b.n	80076f6 <_printf_i+0x1c6>
 80076f0:	0668      	lsls	r0, r5, #25
 80076f2:	d5fb      	bpl.n	80076ec <_printf_i+0x1bc>
 80076f4:	8019      	strh	r1, [r3, #0]
 80076f6:	2300      	movs	r3, #0
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	4616      	mov	r6, r2
 80076fc:	e7bc      	b.n	8007678 <_printf_i+0x148>
 80076fe:	6833      	ldr	r3, [r6, #0]
 8007700:	1d1a      	adds	r2, r3, #4
 8007702:	6032      	str	r2, [r6, #0]
 8007704:	681e      	ldr	r6, [r3, #0]
 8007706:	6862      	ldr	r2, [r4, #4]
 8007708:	2100      	movs	r1, #0
 800770a:	4630      	mov	r0, r6
 800770c:	f7f8 fd68 	bl	80001e0 <memchr>
 8007710:	b108      	cbz	r0, 8007716 <_printf_i+0x1e6>
 8007712:	1b80      	subs	r0, r0, r6
 8007714:	6060      	str	r0, [r4, #4]
 8007716:	6863      	ldr	r3, [r4, #4]
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	2300      	movs	r3, #0
 800771c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007720:	e7aa      	b.n	8007678 <_printf_i+0x148>
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	4632      	mov	r2, r6
 8007726:	4649      	mov	r1, r9
 8007728:	4640      	mov	r0, r8
 800772a:	47d0      	blx	sl
 800772c:	3001      	adds	r0, #1
 800772e:	d0ad      	beq.n	800768c <_printf_i+0x15c>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	d413      	bmi.n	800775e <_printf_i+0x22e>
 8007736:	68e0      	ldr	r0, [r4, #12]
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	4298      	cmp	r0, r3
 800773c:	bfb8      	it	lt
 800773e:	4618      	movlt	r0, r3
 8007740:	e7a6      	b.n	8007690 <_printf_i+0x160>
 8007742:	2301      	movs	r3, #1
 8007744:	4632      	mov	r2, r6
 8007746:	4649      	mov	r1, r9
 8007748:	4640      	mov	r0, r8
 800774a:	47d0      	blx	sl
 800774c:	3001      	adds	r0, #1
 800774e:	d09d      	beq.n	800768c <_printf_i+0x15c>
 8007750:	3501      	adds	r5, #1
 8007752:	68e3      	ldr	r3, [r4, #12]
 8007754:	9903      	ldr	r1, [sp, #12]
 8007756:	1a5b      	subs	r3, r3, r1
 8007758:	42ab      	cmp	r3, r5
 800775a:	dcf2      	bgt.n	8007742 <_printf_i+0x212>
 800775c:	e7eb      	b.n	8007736 <_printf_i+0x206>
 800775e:	2500      	movs	r5, #0
 8007760:	f104 0619 	add.w	r6, r4, #25
 8007764:	e7f5      	b.n	8007752 <_printf_i+0x222>
 8007766:	bf00      	nop
 8007768:	0800a92d 	.word	0x0800a92d
 800776c:	0800a93e 	.word	0x0800a93e

08007770 <memmove>:
 8007770:	4288      	cmp	r0, r1
 8007772:	b510      	push	{r4, lr}
 8007774:	eb01 0402 	add.w	r4, r1, r2
 8007778:	d902      	bls.n	8007780 <memmove+0x10>
 800777a:	4284      	cmp	r4, r0
 800777c:	4623      	mov	r3, r4
 800777e:	d807      	bhi.n	8007790 <memmove+0x20>
 8007780:	1e43      	subs	r3, r0, #1
 8007782:	42a1      	cmp	r1, r4
 8007784:	d008      	beq.n	8007798 <memmove+0x28>
 8007786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800778a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800778e:	e7f8      	b.n	8007782 <memmove+0x12>
 8007790:	4402      	add	r2, r0
 8007792:	4601      	mov	r1, r0
 8007794:	428a      	cmp	r2, r1
 8007796:	d100      	bne.n	800779a <memmove+0x2a>
 8007798:	bd10      	pop	{r4, pc}
 800779a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800779e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077a2:	e7f7      	b.n	8007794 <memmove+0x24>

080077a4 <_sbrk_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4d06      	ldr	r5, [pc, #24]	@ (80077c0 <_sbrk_r+0x1c>)
 80077a8:	2300      	movs	r3, #0
 80077aa:	4604      	mov	r4, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	602b      	str	r3, [r5, #0]
 80077b0:	f7fa fc66 	bl	8002080 <_sbrk>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_sbrk_r+0x1a>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_sbrk_r+0x1a>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	200004bc 	.word	0x200004bc

080077c4 <memcpy>:
 80077c4:	440a      	add	r2, r1
 80077c6:	4291      	cmp	r1, r2
 80077c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077cc:	d100      	bne.n	80077d0 <memcpy+0xc>
 80077ce:	4770      	bx	lr
 80077d0:	b510      	push	{r4, lr}
 80077d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077da:	4291      	cmp	r1, r2
 80077dc:	d1f9      	bne.n	80077d2 <memcpy+0xe>
 80077de:	bd10      	pop	{r4, pc}

080077e0 <_realloc_r>:
 80077e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e4:	4680      	mov	r8, r0
 80077e6:	4615      	mov	r5, r2
 80077e8:	460c      	mov	r4, r1
 80077ea:	b921      	cbnz	r1, 80077f6 <_realloc_r+0x16>
 80077ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077f0:	4611      	mov	r1, r2
 80077f2:	f7ff bc4b 	b.w	800708c <_malloc_r>
 80077f6:	b92a      	cbnz	r2, 8007804 <_realloc_r+0x24>
 80077f8:	f7ff fbdc 	bl	8006fb4 <_free_r>
 80077fc:	2400      	movs	r4, #0
 80077fe:	4620      	mov	r0, r4
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	f000 f81a 	bl	800783c <_malloc_usable_size_r>
 8007808:	4285      	cmp	r5, r0
 800780a:	4606      	mov	r6, r0
 800780c:	d802      	bhi.n	8007814 <_realloc_r+0x34>
 800780e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007812:	d8f4      	bhi.n	80077fe <_realloc_r+0x1e>
 8007814:	4629      	mov	r1, r5
 8007816:	4640      	mov	r0, r8
 8007818:	f7ff fc38 	bl	800708c <_malloc_r>
 800781c:	4607      	mov	r7, r0
 800781e:	2800      	cmp	r0, #0
 8007820:	d0ec      	beq.n	80077fc <_realloc_r+0x1c>
 8007822:	42b5      	cmp	r5, r6
 8007824:	462a      	mov	r2, r5
 8007826:	4621      	mov	r1, r4
 8007828:	bf28      	it	cs
 800782a:	4632      	movcs	r2, r6
 800782c:	f7ff ffca 	bl	80077c4 <memcpy>
 8007830:	4621      	mov	r1, r4
 8007832:	4640      	mov	r0, r8
 8007834:	f7ff fbbe 	bl	8006fb4 <_free_r>
 8007838:	463c      	mov	r4, r7
 800783a:	e7e0      	b.n	80077fe <_realloc_r+0x1e>

0800783c <_malloc_usable_size_r>:
 800783c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007840:	1f18      	subs	r0, r3, #4
 8007842:	2b00      	cmp	r3, #0
 8007844:	bfbc      	itt	lt
 8007846:	580b      	ldrlt	r3, [r1, r0]
 8007848:	18c0      	addlt	r0, r0, r3
 800784a:	4770      	bx	lr

0800784c <_init>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr

08007858 <_fini>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr
